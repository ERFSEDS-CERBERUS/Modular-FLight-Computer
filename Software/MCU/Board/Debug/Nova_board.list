
Nova_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008460  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  08008600  08008600  00018600  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b0c  08008b0c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08008b0c  08008b0c  00018b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b14  08008b14  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b14  08008b14  00018b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b18  08008b18  00018b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08008b1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  200001f4  08008d10  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  08008d10  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000acc3  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c3a  00000000  00000000  0002aee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000910  00000000  00000000  0002cb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000868  00000000  00000000  0002d438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c36  00000000  00000000  0002dca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b6c  00000000  00000000  000448d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088490  00000000  00000000  0004e442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d68d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a14  00000000  00000000  000d6928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080085e8 	.word	0x080085e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	080085e8 	.word	0x080085e8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <cmd_adc>:

#include "barometer.h"
#include <stdio.h>


 unsigned long cmd_adc(char cmd, SPI_HandleTypeDef hspi1){
 8000ffc:	b084      	sub	sp, #16
 8000ffe:	b590      	push	{r4, r7, lr}
 8001000:	b087      	sub	sp, #28
 8001002:	af00      	add	r7, sp, #0
 8001004:	4604      	mov	r4, r0
 8001006:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800100a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800100e:	4623      	mov	r3, r4
 8001010:	71fb      	strb	r3, [r7, #7]

 unsigned long temp=0;
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
 HAL_GPIO_WritePin(BARO_CS_GPIO_Port, BARO_CS_Pin, GPIO_PIN_RESET); // pull CSB low
 8001016:	2200      	movs	r2, #0
 8001018:	2120      	movs	r1, #32
 800101a:	4839      	ldr	r0, [pc, #228]	; (8001100 <cmd_adc+0x104>)
 800101c:	f001 f990 	bl	8002340 <HAL_GPIO_WritePin>
 uint8_t valtosend=CMD_ADC_CONV+cmd;
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	3340      	adds	r3, #64	; 0x40
 8001024:	b2db      	uxtb	r3, r3
 8001026:	74fb      	strb	r3, [r7, #19]
 HAL_SPI_Transmit(&hspi1, &valtosend, 1, 1000); // send conversion command
 8001028:	f107 0113 	add.w	r1, r7, #19
 800102c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001030:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001034:	2201      	movs	r2, #1
 8001036:	f001 fe6e 	bl	8002d16 <HAL_SPI_Transmit>
 switch (cmd & 0x0f) // wait necessary conversion time
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	f003 030f 	and.w	r3, r3, #15
 8001040:	2b08      	cmp	r3, #8
 8001042:	d829      	bhi.n	8001098 <cmd_adc+0x9c>
 8001044:	a201      	add	r2, pc, #4	; (adr r2, 800104c <cmd_adc+0x50>)
 8001046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104a:	bf00      	nop
 800104c:	08001071 	.word	0x08001071
 8001050:	08001099 	.word	0x08001099
 8001054:	08001079 	.word	0x08001079
 8001058:	08001099 	.word	0x08001099
 800105c:	08001081 	.word	0x08001081
 8001060:	08001099 	.word	0x08001099
 8001064:	08001089 	.word	0x08001089
 8001068:	08001099 	.word	0x08001099
 800106c:	08001091 	.word	0x08001091
 {
 case CMD_ADC_256 : HAL_Delay(1); break;
 8001070:	2001      	movs	r0, #1
 8001072:	f000 fed7 	bl	8001e24 <HAL_Delay>
 8001076:	e00f      	b.n	8001098 <cmd_adc+0x9c>
 case CMD_ADC_512 : HAL_Delay(3); break;
 8001078:	2003      	movs	r0, #3
 800107a:	f000 fed3 	bl	8001e24 <HAL_Delay>
 800107e:	e00b      	b.n	8001098 <cmd_adc+0x9c>
 case CMD_ADC_1024: HAL_Delay(4); break;
 8001080:	2004      	movs	r0, #4
 8001082:	f000 fecf 	bl	8001e24 <HAL_Delay>
 8001086:	e007      	b.n	8001098 <cmd_adc+0x9c>
 case CMD_ADC_2048: HAL_Delay(6); break;
 8001088:	2006      	movs	r0, #6
 800108a:	f000 fecb 	bl	8001e24 <HAL_Delay>
 800108e:	e003      	b.n	8001098 <cmd_adc+0x9c>
 case CMD_ADC_4096: HAL_Delay(10); break;
 8001090:	200a      	movs	r0, #10
 8001092:	f000 fec7 	bl	8001e24 <HAL_Delay>
 8001096:	bf00      	nop
 }
 HAL_GPIO_WritePin(BARO_CS_GPIO_Port, BARO_CS_Pin, GPIO_PIN_SET); // pull CSB high to finish the conversion
 8001098:	2201      	movs	r2, #1
 800109a:	2120      	movs	r1, #32
 800109c:	4818      	ldr	r0, [pc, #96]	; (8001100 <cmd_adc+0x104>)
 800109e:	f001 f94f 	bl	8002340 <HAL_GPIO_WritePin>
 HAL_GPIO_WritePin(BARO_CS_GPIO_Port, BARO_CS_Pin, GPIO_PIN_RESET); // pull CSB low to start new command
 80010a2:	2200      	movs	r2, #0
 80010a4:	2120      	movs	r1, #32
 80010a6:	4816      	ldr	r0, [pc, #88]	; (8001100 <cmd_adc+0x104>)
 80010a8:	f001 f94a 	bl	8002340 <HAL_GPIO_WritePin>

 uint8_t ADCREAD=CMD_ADC_READ;
 80010ac:	2300      	movs	r3, #0
 80010ae:	74bb      	strb	r3, [r7, #18]
 HAL_SPI_Transmit(&hspi1, &ADCREAD, 1, 1000);// send ADC read command
 80010b0:	f107 0112 	add.w	r1, r7, #18
 80010b4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80010b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010bc:	2201      	movs	r2, #1
 80010be:	f001 fe2a 	bl	8002d16 <HAL_SPI_Transmit>

 uint8_t buffer[3];
 HAL_SPI_Receive(&hspi1, buffer, 3, 1000); // send 0 to read 1st byte (MSB)
 80010c2:	f107 010c 	add.w	r1, r7, #12
 80010c6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80010ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ce:	2203      	movs	r2, #3
 80010d0:	f001 ff5d 	bl	8002f8e <HAL_SPI_Receive>
 temp = (buffer[2] << 16) & (buffer[1] << 8) & (buffer[0]);
 80010d4:	7bbb      	ldrb	r3, [r7, #14]
 80010d6:	041a      	lsls	r2, r3, #16
 80010d8:	7b7b      	ldrb	r3, [r7, #13]
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	4013      	ands	r3, r2
 80010de:	7b3a      	ldrb	r2, [r7, #12]
 80010e0:	4013      	ands	r3, r2
 80010e2:	617b      	str	r3, [r7, #20]

 HAL_GPIO_WritePin(BARO_CS_GPIO_Port, BARO_CS_Pin, GPIO_PIN_SET); // pull CSB high to finish the read command
 80010e4:	2201      	movs	r2, #1
 80010e6:	2120      	movs	r1, #32
 80010e8:	4805      	ldr	r0, [pc, #20]	; (8001100 <cmd_adc+0x104>)
 80010ea:	f001 f929 	bl	8002340 <HAL_GPIO_WritePin>
 return temp;
 80010ee:	697b      	ldr	r3, [r7, #20]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	371c      	adds	r7, #28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80010fa:	b004      	add	sp, #16
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40020800 	.word	0x40020800

08001104 <cmd_prom>:




 unsigned int cmd_prom(char coef_num, SPI_HandleTypeDef hspi1)
 {
 8001104:	b084      	sub	sp, #16
 8001106:	b590      	push	{r4, r7, lr}
 8001108:	b085      	sub	sp, #20
 800110a:	af00      	add	r7, sp, #0
 800110c:	4604      	mov	r4, r0
 800110e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001112:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001116:	4623      	mov	r3, r4
 8001118:	71fb      	strb	r3, [r7, #7]

  unsigned int rC=0;
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin(BARO_CS_GPIO_Port, BARO_CS_Pin, GPIO_PIN_RESET); // pull CSB low
 800111e:	2200      	movs	r2, #0
 8001120:	2120      	movs	r1, #32
 8001122:	4816      	ldr	r0, [pc, #88]	; (800117c <cmd_prom+0x78>)
 8001124:	f001 f90c 	bl	8002340 <HAL_GPIO_WritePin>
  uint8_t valtosend2=CMD_PROM_RD+coef_num*2;
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	3350      	adds	r3, #80	; 0x50
 800112c:	b2db      	uxtb	r3, r3
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	b2db      	uxtb	r3, r3
 8001132:	72fb      	strb	r3, [r7, #11]
  HAL_SPI_Transmit(&hspi1, &valtosend2, 1, 1000); // send PROM READ command
 8001134:	f107 010b 	add.w	r1, r7, #11
 8001138:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800113c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001140:	2201      	movs	r2, #1
 8001142:	f001 fde8 	bl	8002d16 <HAL_SPI_Transmit>
  uint8_t buffer[2];
  HAL_SPI_Receive(&hspi1, buffer, 2, 1000); //spi_send(0x00); // send 0 to read the MSB
 8001146:	f107 0108 	add.w	r1, r7, #8
 800114a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800114e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001152:	2202      	movs	r2, #2
 8001154:	f001 ff1b 	bl	8002f8e <HAL_SPI_Receive>
  rC = (buffer[1] << 8) & (buffer[0]);
 8001158:	7a7b      	ldrb	r3, [r7, #9]
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	7a3a      	ldrb	r2, [r7, #8]
 800115e:	4013      	ands	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(BARO_CS_GPIO_Port, BARO_CS_Pin, GPIO_PIN_SET); // pull CSB high
 8001162:	2201      	movs	r2, #1
 8001164:	2120      	movs	r1, #32
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <cmd_prom+0x78>)
 8001168:	f001 f8ea 	bl	8002340 <HAL_GPIO_WritePin>
  return rC;
 800116c:	68fb      	ldr	r3, [r7, #12]
 }
 800116e:	4618      	mov	r0, r3
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001178:	b004      	add	sp, #16
 800117a:	4770      	bx	lr
 800117c:	40020800 	.word	0x40020800

08001180 <cmd_reset>:


 void cmd_reset(SPI_HandleTypeDef hspi1)
 {
 8001180:	b084      	sub	sp, #16
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	f107 0c10 	add.w	ip, r7, #16
 800118c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	 HAL_GPIO_WritePin(BARO_CS_GPIO_Port, BARO_CS_Pin, GPIO_PIN_RESET); // pull CSB low to start the command
 8001190:	2200      	movs	r2, #0
 8001192:	2120      	movs	r1, #32
 8001194:	480d      	ldr	r0, [pc, #52]	; (80011cc <cmd_reset+0x4c>)
 8001196:	f001 f8d3 	bl	8002340 <HAL_GPIO_WritePin>
	 uint8_t resetthingy=CMD_RESET;
 800119a:	231e      	movs	r3, #30
 800119c:	71fb      	strb	r3, [r7, #7]
	 HAL_SPI_Transmit(&hspi1, &resetthingy, 1, 1000); // send reset sequence
 800119e:	1df9      	adds	r1, r7, #7
 80011a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a4:	2201      	movs	r2, #1
 80011a6:	f107 0010 	add.w	r0, r7, #16
 80011aa:	f001 fdb4 	bl	8002d16 <HAL_SPI_Transmit>
	 HAL_Delay(3); // wait for the reset sequence timing
 80011ae:	2003      	movs	r0, #3
 80011b0:	f000 fe38 	bl	8001e24 <HAL_Delay>
	 HAL_GPIO_WritePin(BARO_CS_GPIO_Port, BARO_CS_Pin, GPIO_PIN_SET); // pull CSB high to finish the command
 80011b4:	2201      	movs	r2, #1
 80011b6:	2120      	movs	r1, #32
 80011b8:	4804      	ldr	r0, [pc, #16]	; (80011cc <cmd_reset+0x4c>)
 80011ba:	f001 f8c1 	bl	8002340 <HAL_GPIO_WritePin>
 }
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011c8:	b004      	add	sp, #16
 80011ca:	4770      	bx	lr
 80011cc:	40020800 	.word	0x40020800

080011d0 <crc4>:




 unsigned char crc4(unsigned int n_prom[])
 {
 80011d0:	b480      	push	{r7}
 80011d2:	b087      	sub	sp, #28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  int cnt; // simple counter
  unsigned int n_rem; // crc reminder
  unsigned int crc_read; // original value of the crc
  unsigned char n_bit;
  n_rem = 0x00;
 80011d8:	2300      	movs	r3, #0
 80011da:	613b      	str	r3, [r7, #16]
  crc_read=n_prom[7]; //save read CRC
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	69db      	ldr	r3, [r3, #28]
 80011e0:	60bb      	str	r3, [r7, #8]
  n_prom[7]=(0xFF00 & (n_prom[7])); //CRC byte is replaced by 0
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	331c      	adds	r3, #28
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	331c      	adds	r3, #28
 80011ec:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80011f0:	601a      	str	r2, [r3, #0]
  for (cnt = 0; cnt < 16; cnt++) // operation is performed on bytes
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
 80011f6:	e039      	b.n	800126c <crc4+0x9c>
  { // choose LSB or MSB
  if (cnt%2==1) n_rem ^= (unsigned short) ((n_prom[cnt>>1]) & 0x00FF);
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	bfb8      	it	lt
 8001202:	425b      	neglt	r3, r3
 8001204:	2b01      	cmp	r3, #1
 8001206:	d10b      	bne.n	8001220 <crc4+0x50>
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	105b      	asrs	r3, r3, #1
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	b29b      	uxth	r3, r3
 8001216:	b2db      	uxtb	r3, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4053      	eors	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	e00b      	b.n	8001238 <crc4+0x68>
  else n_rem ^= (unsigned short) (n_prom[cnt>>1]>>8);
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	105b      	asrs	r3, r3, #1
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	4413      	add	r3, r2
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	0a1b      	lsrs	r3, r3, #8
 800122e:	b29b      	uxth	r3, r3
 8001230:	461a      	mov	r2, r3
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	4053      	eors	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
  for (n_bit = 8; n_bit > 0; n_bit--)
 8001238:	2308      	movs	r3, #8
 800123a:	73fb      	strb	r3, [r7, #15]
 800123c:	e010      	b.n	8001260 <crc4+0x90>
  {
  if (n_rem & (0x8000))
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d005      	beq.n	8001254 <crc4+0x84>
  {
  n_rem = (n_rem << 1) ^ 0x3000;
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	e002      	b.n	800125a <crc4+0x8a>
  }
  else
  {
  n_rem = (n_rem << 1);
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	613b      	str	r3, [r7, #16]
  for (n_bit = 8; n_bit > 0; n_bit--)
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	3b01      	subs	r3, #1
 800125e:	73fb      	strb	r3, [r7, #15]
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1eb      	bne.n	800123e <crc4+0x6e>
  for (cnt = 0; cnt < 16; cnt++) // operation is performed on bytes
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	3301      	adds	r3, #1
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	2b0f      	cmp	r3, #15
 8001270:	ddc2      	ble.n	80011f8 <crc4+0x28>
  }
  }
  }
  n_rem= (0x000F & (n_rem >> 12)); // // final 4-bit reminder is CRC code
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	0b1b      	lsrs	r3, r3, #12
 8001276:	f003 030f 	and.w	r3, r3, #15
 800127a:	613b      	str	r3, [r7, #16]
  n_prom[7]=crc_read; // restore the crc_read to its original place
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	331c      	adds	r3, #28
 8001280:	68ba      	ldr	r2, [r7, #8]
 8001282:	601a      	str	r2, [r3, #0]
  return (n_rem ^ 0x00);
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	b2db      	uxtb	r3, r3
 }
 8001288:	4618      	mov	r0, r3
 800128a:	371c      	adds	r7, #28
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <barometer_test>:




 int barometer_test (SPI_HandleTypeDef hspi1, UART_HandleTypeDef huart2)
 {
 8001294:	b084      	sub	sp, #16
 8001296:	b5b0      	push	{r4, r5, r7, lr}
 8001298:	b0aa      	sub	sp, #168	; 0xa8
 800129a:	af14      	add	r7, sp, #80	; 0x50
 800129c:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80012a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}





  cmd_reset(hspi1); // reset the module after powerup
 80012a4:	4668      	mov	r0, sp
 80012a6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80012aa:	2248      	movs	r2, #72	; 0x48
 80012ac:	4619      	mov	r1, r3
 80012ae:	f002 fd6d 	bl	8003d8c <memcpy>
 80012b2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80012b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012b8:	f7ff ff62 	bl	8001180 <cmd_reset>
  for (i=0;i<8;i++){ C[i]=cmd_prom(i, hspi1);} // read calibration coefficients
 80012bc:	2300      	movs	r3, #0
 80012be:	657b      	str	r3, [r7, #84]	; 0x54
 80012c0:	e019      	b.n	80012f6 <barometer_test+0x62>
 80012c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012c4:	b2dc      	uxtb	r4, r3
 80012c6:	4668      	mov	r0, sp
 80012c8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012cc:	224c      	movs	r2, #76	; 0x4c
 80012ce:	4619      	mov	r1, r3
 80012d0:	f002 fd5c 	bl	8003d8c <memcpy>
 80012d4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80012d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012da:	4620      	mov	r0, r4
 80012dc:	f7ff ff12 	bl	8001104 <cmd_prom>
 80012e0:	4602      	mov	r2, r0
 80012e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80012ea:	440b      	add	r3, r1
 80012ec:	f843 2c58 	str.w	r2, [r3, #-88]
 80012f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012f2:	3301      	adds	r3, #1
 80012f4:	657b      	str	r3, [r7, #84]	; 0x54
 80012f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012f8:	2b07      	cmp	r3, #7
 80012fa:	dde2      	ble.n	80012c2 <barometer_test+0x2e>
  n_crc=crc4(C);
 80012fc:	463b      	mov	r3, r7
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ff66 	bl	80011d0 <crc4>
 8001304:	4603      	mov	r3, r0
 8001306:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

 while(1) // loop without stopping
  {


  D1=cmd_adc(CMD_ADC_D1+CMD_ADC_256, hspi1); // read uncompensated pressure
 800130a:	4668      	mov	r0, sp
 800130c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001310:	224c      	movs	r2, #76	; 0x4c
 8001312:	4619      	mov	r1, r3
 8001314:	f002 fd3a 	bl	8003d8c <memcpy>
 8001318:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800131c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800131e:	2000      	movs	r0, #0
 8001320:	f7ff fe6c 	bl	8000ffc <cmd_adc>
 8001324:	64f8      	str	r0, [r7, #76]	; 0x4c
  D2=cmd_adc(CMD_ADC_D2+CMD_ADC_4096, hspi1); // read uncompensated temperature
 8001326:	4668      	mov	r0, sp
 8001328:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800132c:	224c      	movs	r2, #76	; 0x4c
 800132e:	4619      	mov	r1, r3
 8001330:	f002 fd2c 	bl	8003d8c <memcpy>
 8001334:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001338:	cb0e      	ldmia	r3, {r1, r2, r3}
 800133a:	2018      	movs	r0, #24
 800133c:	f7ff fe5e 	bl	8000ffc <cmd_adc>
 8001340:	64b8      	str	r0, [r7, #72]	; 0x48

  // calcualte 1st order pressure and temperature (MS5607 1st order algorithm)
  dT=D2-C[5]*pow(2,8);
 8001342:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001344:	f7ff f8e6 	bl	8000514 <__aeabi_ui2d>
 8001348:	4604      	mov	r4, r0
 800134a:	460d      	mov	r5, r1
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f8e0 	bl	8000514 <__aeabi_ui2d>
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	4b63      	ldr	r3, [pc, #396]	; (80014e8 <barometer_test+0x254>)
 800135a:	f7ff f955 	bl	8000608 <__aeabi_dmul>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	4620      	mov	r0, r4
 8001364:	4629      	mov	r1, r5
 8001366:	f7fe ff97 	bl	8000298 <__aeabi_dsub>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  OFF=C[2]*pow(2,17)+dT*C[4]/pow(2,6);
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f8cd 	bl	8000514 <__aeabi_ui2d>
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001382:	f7ff f941 	bl	8000608 <__aeabi_dmul>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4614      	mov	r4, r2
 800138c:	461d      	mov	r5, r3
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff f8bf 	bl	8000514 <__aeabi_ui2d>
 8001396:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800139a:	f7ff f935 	bl	8000608 <__aeabi_dmul>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4610      	mov	r0, r2
 80013a4:	4619      	mov	r1, r3
 80013a6:	f04f 0200 	mov.w	r2, #0
 80013aa:	4b50      	ldr	r3, [pc, #320]	; (80014ec <barometer_test+0x258>)
 80013ac:	f7ff fa56 	bl	800085c <__aeabi_ddiv>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4620      	mov	r0, r4
 80013b6:	4629      	mov	r1, r5
 80013b8:	f7fe ff70 	bl	800029c <__adddf3>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  SENS=C[1]*pow(2,16)+dT*C[3]/pow(2,7);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff f8a4 	bl	8000514 <__aeabi_ui2d>
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	4b47      	ldr	r3, [pc, #284]	; (80014f0 <barometer_test+0x25c>)
 80013d2:	f7ff f919 	bl	8000608 <__aeabi_dmul>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4614      	mov	r4, r2
 80013dc:	461d      	mov	r5, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff f897 	bl	8000514 <__aeabi_ui2d>
 80013e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80013ea:	f7ff f90d 	bl	8000608 <__aeabi_dmul>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4610      	mov	r0, r2
 80013f4:	4619      	mov	r1, r3
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	4b3e      	ldr	r3, [pc, #248]	; (80014f4 <barometer_test+0x260>)
 80013fc:	f7ff fa2e 	bl	800085c <__aeabi_ddiv>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4620      	mov	r0, r4
 8001406:	4629      	mov	r1, r5
 8001408:	f7fe ff48 	bl	800029c <__adddf3>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

  T=(2000+(dT*C[6])/pow(2,23))/100;
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff f87c 	bl	8000514 <__aeabi_ui2d>
 800141c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001420:	f7ff f8f2 	bl	8000608 <__aeabi_dmul>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4610      	mov	r0, r2
 800142a:	4619      	mov	r1, r3
 800142c:	f04f 0200 	mov.w	r2, #0
 8001430:	4b31      	ldr	r3, [pc, #196]	; (80014f8 <barometer_test+0x264>)
 8001432:	f7ff fa13 	bl	800085c <__aeabi_ddiv>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4610      	mov	r0, r2
 800143c:	4619      	mov	r1, r3
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	4b2e      	ldr	r3, [pc, #184]	; (80014fc <barometer_test+0x268>)
 8001444:	f7fe ff2a 	bl	800029c <__adddf3>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	4610      	mov	r0, r2
 800144e:	4619      	mov	r1, r3
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	4b2a      	ldr	r3, [pc, #168]	; (8001500 <barometer_test+0x26c>)
 8001456:	f7ff fa01 	bl	800085c <__aeabi_ddiv>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  P=(((D1*SENS)/pow(2,21)-OFF)/pow(2,15))/100;
 8001462:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001464:	f7ff f856 	bl	8000514 <__aeabi_ui2d>
 8001468:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800146c:	f7ff f8cc 	bl	8000608 <__aeabi_dmul>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4610      	mov	r0, r2
 8001476:	4619      	mov	r1, r3
 8001478:	f04f 0200 	mov.w	r2, #0
 800147c:	4b21      	ldr	r3, [pc, #132]	; (8001504 <barometer_test+0x270>)
 800147e:	f7ff f9ed 	bl	800085c <__aeabi_ddiv>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4610      	mov	r0, r2
 8001488:	4619      	mov	r1, r3
 800148a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800148e:	f7fe ff03 	bl	8000298 <__aeabi_dsub>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	4610      	mov	r0, r2
 8001498:	4619      	mov	r1, r3
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <barometer_test+0x274>)
 80014a0:	f7ff f9dc 	bl	800085c <__aeabi_ddiv>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4610      	mov	r0, r2
 80014aa:	4619      	mov	r1, r3
 80014ac:	f04f 0200 	mov.w	r2, #0
 80014b0:	4b13      	ldr	r3, [pc, #76]	; (8001500 <barometer_test+0x26c>)
 80014b2:	f7ff f9d3 	bl	800085c <__aeabi_ddiv>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // place to use P, T, put them on LCD, send them trough RS232 interface...


  sprintf(msg1,"Temperature : %d\n\r", (int)P);
 80014be:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80014c2:	f7ff fb51 	bl	8000b68 <__aeabi_d2iz>
 80014c6:	4603      	mov	r3, r0
 80014c8:	461a      	mov	r2, r3
 80014ca:	4910      	ldr	r1, [pc, #64]	; (800150c <barometer_test+0x278>)
 80014cc:	4810      	ldr	r0, [pc, #64]	; (8001510 <barometer_test+0x27c>)
 80014ce:	f003 faf3 	bl	8004ab8 <siprintf>
  HAL_UART_Transmit(&huart2,msg1,20,1);
 80014d2:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 80014d6:	2301      	movs	r3, #1
 80014d8:	2214      	movs	r2, #20
 80014da:	490d      	ldr	r1, [pc, #52]	; (8001510 <barometer_test+0x27c>)
 80014dc:	f002 f987 	bl	80037ee <HAL_UART_Transmit>
HAL_Delay(100);
 80014e0:	2064      	movs	r0, #100	; 0x64
 80014e2:	f000 fc9f 	bl	8001e24 <HAL_Delay>
  D1=cmd_adc(CMD_ADC_D1+CMD_ADC_256, hspi1); // read uncompensated pressure
 80014e6:	e710      	b.n	800130a <barometer_test+0x76>
 80014e8:	40700000 	.word	0x40700000
 80014ec:	40500000 	.word	0x40500000
 80014f0:	40f00000 	.word	0x40f00000
 80014f4:	40600000 	.word	0x40600000
 80014f8:	41600000 	.word	0x41600000
 80014fc:	409f4000 	.word	0x409f4000
 8001500:	40590000 	.word	0x40590000
 8001504:	41400000 	.word	0x41400000
 8001508:	40e00000 	.word	0x40e00000
 800150c:	08008600 	.word	0x08008600
 8001510:	20000000 	.word	0x20000000

08001514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001514:	b5b0      	push	{r4, r5, r7, lr}
 8001516:	b0ba      	sub	sp, #232	; 0xe8
 8001518:	af24      	add	r7, sp, #144	; 0x90
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800151a:	f000 fc11 	bl	8001d40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800151e:	f000 f85f 	bl	80015e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001522:	f000 f947 	bl	80017b4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001526:	f000 f8bb 	bl	80016a0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800152a:	f000 f8ef 	bl	800170c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800152e:	f000 f917 	bl	8001760 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
	uint8_t reset = 0x1E;
 8001532:	231e      	movs	r3, #30
 8001534:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_GPIO_WritePin(BARO_CS_GPIO_Port, BARO_CS_Pin, GPIO_PIN_RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	2120      	movs	r1, #32
 800153c:	4823      	ldr	r0, [pc, #140]	; (80015cc <main+0xb8>)
 800153e:	f000 feff 	bl	8002340 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reset, 1, 1000);
 8001542:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8001546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800154a:	2201      	movs	r2, #1
 800154c:	4820      	ldr	r0, [pc, #128]	; (80015d0 <main+0xbc>)
 800154e:	f001 fbe2 	bl	8002d16 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(BARO_CS_GPIO_Port, BARO_CS_Pin, GPIO_PIN_SET);
 8001552:	2201      	movs	r2, #1
 8001554:	2120      	movs	r1, #32
 8001556:	481d      	ldr	r0, [pc, #116]	; (80015cc <main+0xb8>)
 8001558:	f000 fef2 	bl	8002340 <HAL_GPIO_WritePin>

	char msg[20]  = "    Hello World     ";
 800155c:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <main+0xc0>)
 800155e:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001562:	461d      	mov	r5, r3
 8001564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001568:	682b      	ldr	r3, [r5, #0]
 800156a:	6023      	str	r3, [r4, #0]
	char msg1[20] = "                    ";
 800156c:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <main+0xc4>)
 800156e:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001572:	461d      	mov	r5, r3
 8001574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001578:	682b      	ldr	r3, [r5, #0]
 800157a:	6023      	str	r3, [r4, #0]
	char msg2[20] = "                    ";
 800157c:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <main+0xc4>)
 800157e:	f107 0418 	add.w	r4, r7, #24
 8001582:	461d      	mov	r5, r3
 8001584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001588:	682b      	ldr	r3, [r5, #0]
 800158a:	6023      	str	r3, [r4, #0]
	char msg3[20] = "                    ";
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <main+0xc4>)
 800158e:	1d3c      	adds	r4, r7, #4
 8001590:	461d      	mov	r5, r3
 8001592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001596:	682b      	ldr	r3, [r5, #0]
 8001598:	6023      	str	r3, [r4, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	barometer_test(hspi1,huart2);
 800159a:	4c0d      	ldr	r4, [pc, #52]	; (80015d0 <main+0xbc>)
 800159c:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <main+0xc8>)
 800159e:	ab12      	add	r3, sp, #72	; 0x48
 80015a0:	4611      	mov	r1, r2
 80015a2:	2244      	movs	r2, #68	; 0x44
 80015a4:	4618      	mov	r0, r3
 80015a6:	f002 fbf1 	bl	8003d8c <memcpy>
 80015aa:	4668      	mov	r0, sp
 80015ac:	f104 0310 	add.w	r3, r4, #16
 80015b0:	2248      	movs	r2, #72	; 0x48
 80015b2:	4619      	mov	r1, r3
 80015b4:	f002 fbea 	bl	8003d8c <memcpy>
 80015b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015bc:	f7ff fe6a 	bl	8001294 <barometer_test>
		//acceleration = (highVal << 8) + lowVal;

		//sprintf(msg2, "Accel:%d\n\r", (int)acceleration);
		//HAL_UART_Transmit(&huart2, msg2, 20,1);
*/
		HAL_Delay(500);
 80015c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015c4:	f000 fc2e 	bl	8001e24 <HAL_Delay>
  {
 80015c8:	e7e7      	b.n	800159a <main+0x86>
 80015ca:	bf00      	nop
 80015cc:	40020800 	.word	0x40020800
 80015d0:	20000260 	.word	0x20000260
 80015d4:	08008614 	.word	0x08008614
 80015d8:	08008628 	.word	0x08008628
 80015dc:	200002b8 	.word	0x200002b8

080015e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b094      	sub	sp, #80	; 0x50
 80015e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e6:	f107 0320 	add.w	r3, r7, #32
 80015ea:	2230      	movs	r2, #48	; 0x30
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f002 fbda 	bl	8003da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	4b23      	ldr	r3, [pc, #140]	; (8001698 <SystemClock_Config+0xb8>)
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	4a22      	ldr	r2, [pc, #136]	; (8001698 <SystemClock_Config+0xb8>)
 800160e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001612:	6413      	str	r3, [r2, #64]	; 0x40
 8001614:	4b20      	ldr	r3, [pc, #128]	; (8001698 <SystemClock_Config+0xb8>)
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001620:	2300      	movs	r3, #0
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	4b1d      	ldr	r3, [pc, #116]	; (800169c <SystemClock_Config+0xbc>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800162c:	4a1b      	ldr	r2, [pc, #108]	; (800169c <SystemClock_Config+0xbc>)
 800162e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	4b19      	ldr	r3, [pc, #100]	; (800169c <SystemClock_Config+0xbc>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001640:	2302      	movs	r3, #2
 8001642:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001644:	2301      	movs	r3, #1
 8001646:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001648:	2310      	movs	r3, #16
 800164a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800164c:	2300      	movs	r3, #0
 800164e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001650:	f107 0320 	add.w	r3, r7, #32
 8001654:	4618      	mov	r0, r3
 8001656:	f000 fe8d 	bl	8002374 <HAL_RCC_OscConfig>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001660:	f000 f950 	bl	8001904 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001664:	230f      	movs	r3, #15
 8001666:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001668:	2300      	movs	r3, #0
 800166a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001678:	f107 030c 	add.w	r3, r7, #12
 800167c:	2100      	movs	r1, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f001 f8f0 	bl	8002864 <HAL_RCC_ClockConfig>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800168a:	f000 f93b 	bl	8001904 <Error_Handler>
  }
}
 800168e:	bf00      	nop
 8001690:	3750      	adds	r7, #80	; 0x50
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800
 800169c:	40007000 	.word	0x40007000

080016a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016a4:	4b17      	ldr	r3, [pc, #92]	; (8001704 <MX_SPI1_Init+0x64>)
 80016a6:	4a18      	ldr	r2, [pc, #96]	; (8001708 <MX_SPI1_Init+0x68>)
 80016a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016aa:	4b16      	ldr	r3, [pc, #88]	; (8001704 <MX_SPI1_Init+0x64>)
 80016ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016b2:	4b14      	ldr	r3, [pc, #80]	; (8001704 <MX_SPI1_Init+0x64>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <MX_SPI1_Init+0x64>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <MX_SPI1_Init+0x64>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016c4:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <MX_SPI1_Init+0x64>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <MX_SPI1_Init+0x64>)
 80016cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016d2:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <MX_SPI1_Init+0x64>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016d8:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <MX_SPI1_Init+0x64>)
 80016da:	2200      	movs	r2, #0
 80016dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <MX_SPI1_Init+0x64>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016e4:	4b07      	ldr	r3, [pc, #28]	; (8001704 <MX_SPI1_Init+0x64>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <MX_SPI1_Init+0x64>)
 80016ec:	220a      	movs	r2, #10
 80016ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016f0:	4804      	ldr	r0, [pc, #16]	; (8001704 <MX_SPI1_Init+0x64>)
 80016f2:	f001 fa87 	bl	8002c04 <HAL_SPI_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016fc:	f000 f902 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20000260 	.word	0x20000260
 8001708:	40013000 	.word	0x40013000

0800170c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_USART2_UART_Init+0x4c>)
 8001712:	4a12      	ldr	r2, [pc, #72]	; (800175c <MX_USART2_UART_Init+0x50>)
 8001714:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <MX_USART2_UART_Init+0x4c>)
 8001718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800171c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <MX_USART2_UART_Init+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MX_USART2_UART_Init+0x4c>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <MX_USART2_UART_Init+0x4c>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MX_USART2_UART_Init+0x4c>)
 8001732:	220c      	movs	r2, #12
 8001734:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <MX_USART2_UART_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MX_USART2_UART_Init+0x4c>)
 800173e:	2200      	movs	r2, #0
 8001740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_USART2_UART_Init+0x4c>)
 8001744:	f002 f806 	bl	8003754 <HAL_UART_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800174e:	f000 f8d9 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200002b8 	.word	0x200002b8
 800175c:	40004400 	.word	0x40004400

08001760 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <MX_USART6_UART_Init+0x4c>)
 8001766:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <MX_USART6_UART_Init+0x50>)
 8001768:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <MX_USART6_UART_Init+0x4c>)
 800176c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001770:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_USART6_UART_Init+0x4c>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_USART6_UART_Init+0x4c>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <MX_USART6_UART_Init+0x4c>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_USART6_UART_Init+0x4c>)
 8001786:	220c      	movs	r2, #12
 8001788:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <MX_USART6_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_USART6_UART_Init+0x4c>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_USART6_UART_Init+0x4c>)
 8001798:	f001 ffdc 	bl	8003754 <HAL_UART_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80017a2:	f000 f8af 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	2000021c 	.word	0x2000021c
 80017b0:	40011400 	.word	0x40011400

080017b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	; 0x28
 80017b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
 80017c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	4b49      	ldr	r3, [pc, #292]	; (80018f4 <MX_GPIO_Init+0x140>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a48      	ldr	r2, [pc, #288]	; (80018f4 <MX_GPIO_Init+0x140>)
 80017d4:	f043 0304 	orr.w	r3, r3, #4
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b46      	ldr	r3, [pc, #280]	; (80018f4 <MX_GPIO_Init+0x140>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	4b42      	ldr	r3, [pc, #264]	; (80018f4 <MX_GPIO_Init+0x140>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a41      	ldr	r2, [pc, #260]	; (80018f4 <MX_GPIO_Init+0x140>)
 80017f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b3f      	ldr	r3, [pc, #252]	; (80018f4 <MX_GPIO_Init+0x140>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	4b3b      	ldr	r3, [pc, #236]	; (80018f4 <MX_GPIO_Init+0x140>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a3a      	ldr	r2, [pc, #232]	; (80018f4 <MX_GPIO_Init+0x140>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b38      	ldr	r3, [pc, #224]	; (80018f4 <MX_GPIO_Init+0x140>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	4b34      	ldr	r3, [pc, #208]	; (80018f4 <MX_GPIO_Init+0x140>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a33      	ldr	r2, [pc, #204]	; (80018f4 <MX_GPIO_Init+0x140>)
 8001828:	f043 0302 	orr.w	r3, r3, #2
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b31      	ldr	r3, [pc, #196]	; (80018f4 <MX_GPIO_Init+0x140>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLASH_SD_Pin|BARO_CS_Pin|LED_R_Pin|Arm_Pin
 800183a:	2200      	movs	r2, #0
 800183c:	f44f 715c 	mov.w	r1, #880	; 0x370
 8001840:	482d      	ldr	r0, [pc, #180]	; (80018f8 <MX_GPIO_Init+0x144>)
 8001842:	f000 fd7d 	bl	8002340 <HAL_GPIO_WritePin>
                          |Fire1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|IMU_GYRO_CS_Pin|IMU_ACCEL_CS_Pin|Buzzer_Pin
 8001846:	2200      	movs	r2, #0
 8001848:	f24e 4105 	movw	r1, #58373	; 0xe405
 800184c:	482b      	ldr	r0, [pc, #172]	; (80018fc <MX_GPIO_Init+0x148>)
 800184e:	f000 fd77 	bl	8002340 <HAL_GPIO_WritePin>
                          |LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Fire2_GPIO_Port, Fire2_Pin, GPIO_PIN_RESET);
 8001852:	2200      	movs	r2, #0
 8001854:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001858:	4829      	ldr	r0, [pc, #164]	; (8001900 <MX_GPIO_Init+0x14c>)
 800185a:	f000 fd71 	bl	8002340 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FLASH_SD_Pin BARO_CS_Pin LED_R_Pin Arm_Pin
                           Fire1_Pin */
  GPIO_InitStruct.Pin = FLASH_SD_Pin|BARO_CS_Pin|LED_R_Pin|Arm_Pin
 800185e:	f44f 735c 	mov.w	r3, #880	; 0x370
 8001862:	617b      	str	r3, [r7, #20]
                          |Fire1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001864:	2301      	movs	r3, #1
 8001866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	4619      	mov	r1, r3
 8001876:	4820      	ldr	r0, [pc, #128]	; (80018f8 <MX_GPIO_Init+0x144>)
 8001878:	f000 fbde 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin IMU_GYRO_CS_Pin IMU_ACCEL_CS_Pin Buzzer_Pin
                           LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|IMU_GYRO_CS_Pin|IMU_ACCEL_CS_Pin|Buzzer_Pin
 800187c:	f24e 4305 	movw	r3, #58373	; 0xe405
 8001880:	617b      	str	r3, [r7, #20]
                          |LED_G_Pin|LED_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001882:	2301      	movs	r3, #1
 8001884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188a:	2300      	movs	r3, #0
 800188c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4619      	mov	r1, r3
 8001894:	4819      	ldr	r0, [pc, #100]	; (80018fc <MX_GPIO_Init+0x148>)
 8001896:	f000 fbcf 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_CS_Pin */
  GPIO_InitStruct.Pin = ACCEL_CS_Pin;
 800189a:	2302      	movs	r3, #2
 800189c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800189e:	2303      	movs	r3, #3
 80018a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACCEL_CS_GPIO_Port, &GPIO_InitStruct);
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	4619      	mov	r1, r3
 80018ac:	4813      	ldr	r0, [pc, #76]	; (80018fc <MX_GPIO_Init+0x148>)
 80018ae:	f000 fbc3 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pin : Fire2_Pin */
  GPIO_InitStruct.Pin = Fire2_Pin;
 80018b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b8:	2301      	movs	r3, #1
 80018ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c0:	2300      	movs	r3, #0
 80018c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Fire2_GPIO_Port, &GPIO_InitStruct);
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	4619      	mov	r1, r3
 80018ca:	480d      	ldr	r0, [pc, #52]	; (8001900 <MX_GPIO_Init+0x14c>)
 80018cc:	f000 fbb4 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pins : Continuity1_Pin Continuity2_Pin */
  GPIO_InitStruct.Pin = Continuity1_Pin|Continuity2_Pin;
 80018d0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	4806      	ldr	r0, [pc, #24]	; (8001900 <MX_GPIO_Init+0x14c>)
 80018e6:	f000 fba7 	bl	8002038 <HAL_GPIO_Init>

}
 80018ea:	bf00      	nop
 80018ec:	3728      	adds	r7, #40	; 0x28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40020800 	.word	0x40020800
 80018fc:	40020400 	.word	0x40020400
 8001900:	40020000 	.word	0x40020000

08001904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <HAL_MspInit+0x4c>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	4a0f      	ldr	r2, [pc, #60]	; (8001960 <HAL_MspInit+0x4c>)
 8001924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001928:	6453      	str	r3, [r2, #68]	; 0x44
 800192a:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <HAL_MspInit+0x4c>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	603b      	str	r3, [r7, #0]
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_MspInit+0x4c>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	4a08      	ldr	r2, [pc, #32]	; (8001960 <HAL_MspInit+0x4c>)
 8001940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001944:	6413      	str	r3, [r2, #64]	; 0x40
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_MspInit+0x4c>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800

08001964 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08a      	sub	sp, #40	; 0x28
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a19      	ldr	r2, [pc, #100]	; (80019e8 <HAL_SPI_MspInit+0x84>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d12b      	bne.n	80019de <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	4b18      	ldr	r3, [pc, #96]	; (80019ec <HAL_SPI_MspInit+0x88>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	4a17      	ldr	r2, [pc, #92]	; (80019ec <HAL_SPI_MspInit+0x88>)
 8001990:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001994:	6453      	str	r3, [r2, #68]	; 0x44
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <HAL_SPI_MspInit+0x88>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	4b11      	ldr	r3, [pc, #68]	; (80019ec <HAL_SPI_MspInit+0x88>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	4a10      	ldr	r2, [pc, #64]	; (80019ec <HAL_SPI_MspInit+0x88>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	6313      	str	r3, [r2, #48]	; 0x30
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <HAL_SPI_MspInit+0x88>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019be:	23e0      	movs	r3, #224	; 0xe0
 80019c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c2:	2302      	movs	r3, #2
 80019c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ca:	2303      	movs	r3, #3
 80019cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019ce:	2305      	movs	r3, #5
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	4619      	mov	r1, r3
 80019d8:	4805      	ldr	r0, [pc, #20]	; (80019f0 <HAL_SPI_MspInit+0x8c>)
 80019da:	f000 fb2d 	bl	8002038 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80019de:	bf00      	nop
 80019e0:	3728      	adds	r7, #40	; 0x28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40013000 	.word	0x40013000
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40020000 	.word	0x40020000

080019f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08c      	sub	sp, #48	; 0x30
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 031c 	add.w	r3, r7, #28
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a32      	ldr	r2, [pc, #200]	; (8001adc <HAL_UART_MspInit+0xe8>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d12c      	bne.n	8001a70 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	61bb      	str	r3, [r7, #24]
 8001a1a:	4b31      	ldr	r3, [pc, #196]	; (8001ae0 <HAL_UART_MspInit+0xec>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	4a30      	ldr	r2, [pc, #192]	; (8001ae0 <HAL_UART_MspInit+0xec>)
 8001a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a24:	6413      	str	r3, [r2, #64]	; 0x40
 8001a26:	4b2e      	ldr	r3, [pc, #184]	; (8001ae0 <HAL_UART_MspInit+0xec>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	61bb      	str	r3, [r7, #24]
 8001a30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	4b2a      	ldr	r3, [pc, #168]	; (8001ae0 <HAL_UART_MspInit+0xec>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a29      	ldr	r2, [pc, #164]	; (8001ae0 <HAL_UART_MspInit+0xec>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4b27      	ldr	r3, [pc, #156]	; (8001ae0 <HAL_UART_MspInit+0xec>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a4e:	230c      	movs	r3, #12
 8001a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	2302      	movs	r3, #2
 8001a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a5e:	2307      	movs	r3, #7
 8001a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a62:	f107 031c 	add.w	r3, r7, #28
 8001a66:	4619      	mov	r1, r3
 8001a68:	481e      	ldr	r0, [pc, #120]	; (8001ae4 <HAL_UART_MspInit+0xf0>)
 8001a6a:	f000 fae5 	bl	8002038 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001a6e:	e031      	b.n	8001ad4 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART6)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a1c      	ldr	r2, [pc, #112]	; (8001ae8 <HAL_UART_MspInit+0xf4>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d12c      	bne.n	8001ad4 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <HAL_UART_MspInit+0xec>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	4a17      	ldr	r2, [pc, #92]	; (8001ae0 <HAL_UART_MspInit+0xec>)
 8001a84:	f043 0320 	orr.w	r3, r3, #32
 8001a88:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8a:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <HAL_UART_MspInit+0xec>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	f003 0320 	and.w	r3, r3, #32
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <HAL_UART_MspInit+0xec>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a10      	ldr	r2, [pc, #64]	; (8001ae0 <HAL_UART_MspInit+0xec>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <HAL_UART_MspInit+0xec>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ab2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001ac4:	2308      	movs	r3, #8
 8001ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac8:	f107 031c 	add.w	r3, r7, #28
 8001acc:	4619      	mov	r1, r3
 8001ace:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <HAL_UART_MspInit+0xf0>)
 8001ad0:	f000 fab2 	bl	8002038 <HAL_GPIO_Init>
}
 8001ad4:	bf00      	nop
 8001ad6:	3730      	adds	r7, #48	; 0x30
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40004400 	.word	0x40004400
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	40020000 	.word	0x40020000
 8001ae8:	40011400 	.word	0x40011400

08001aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001afe:	e7fe      	b.n	8001afe <HardFault_Handler+0x4>

08001b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <MemManage_Handler+0x4>

08001b06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <BusFault_Handler+0x4>

08001b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <UsageFault_Handler+0x4>

08001b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b40:	f000 f950 	bl	8001de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
	return 1;
 8001b4c:	2301      	movs	r3, #1
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <_kill>:

int _kill(int pid, int sig)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b62:	f002 f8e9 	bl	8003d38 <__errno>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2216      	movs	r2, #22
 8001b6a:	601a      	str	r2, [r3, #0]
	return -1;
 8001b6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <_exit>:

void _exit (int status)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b80:	f04f 31ff 	mov.w	r1, #4294967295
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff ffe7 	bl	8001b58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b8a:	e7fe      	b.n	8001b8a <_exit+0x12>

08001b8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	e00a      	b.n	8001bb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b9e:	f3af 8000 	nop.w
 8001ba2:	4601      	mov	r1, r0
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	60ba      	str	r2, [r7, #8]
 8001baa:	b2ca      	uxtb	r2, r1
 8001bac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	dbf0      	blt.n	8001b9e <_read+0x12>
	}

return len;
 8001bbc:	687b      	ldr	r3, [r7, #4]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b086      	sub	sp, #24
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	60f8      	str	r0, [r7, #12]
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	e009      	b.n	8001bec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	60ba      	str	r2, [r7, #8]
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	3301      	adds	r3, #1
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	dbf1      	blt.n	8001bd8 <_write+0x12>
	}
	return len;
 8001bf4:	687b      	ldr	r3, [r7, #4]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <_close>:

int _close(int file)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
	return -1;
 8001c06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <_fstat>:


int _fstat(int file, struct stat *st){
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c26:	605a      	str	r2, [r3, #4]
	return 0;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <_isatty>:

int _isatty(int file)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
	return 1;
 8001c3e:	2301      	movs	r3, #1
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
	return 0;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001c70:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <_sbrk+0x50>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d102      	bne.n	8001c7e <_sbrk+0x16>
		heap_end = &end;
 8001c78:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <_sbrk+0x50>)
 8001c7a:	4a10      	ldr	r2, [pc, #64]	; (8001cbc <_sbrk+0x54>)
 8001c7c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <_sbrk+0x50>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <_sbrk+0x50>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	466a      	mov	r2, sp
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d907      	bls.n	8001ca2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001c92:	f002 f851 	bl	8003d38 <__errno>
 8001c96:	4603      	mov	r3, r0
 8001c98:	220c      	movs	r2, #12
 8001c9a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca0:	e006      	b.n	8001cb0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001ca2:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <_sbrk+0x50>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	4a03      	ldr	r2, [pc, #12]	; (8001cb8 <_sbrk+0x50>)
 8001cac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001cae:	68fb      	ldr	r3, [r7, #12]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000210 	.word	0x20000210
 8001cbc:	20000310 	.word	0x20000310

08001cc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cc4:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <SystemInit+0x28>)
 8001cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cca:	4a07      	ldr	r2, [pc, #28]	; (8001ce8 <SystemInit+0x28>)
 8001ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cd4:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <SystemInit+0x28>)
 8001cd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cda:	609a      	str	r2, [r3, #8]
#endif
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d24 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001cf0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001cf2:	e003      	b.n	8001cfc <LoopCopyDataInit>

08001cf4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001cf6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001cf8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001cfa:	3104      	adds	r1, #4

08001cfc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001cfc:	480b      	ldr	r0, [pc, #44]	; (8001d2c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001cfe:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d04:	d3f6      	bcc.n	8001cf4 <CopyDataInit>
  ldr  r2, =_sbss
 8001d06:	4a0b      	ldr	r2, [pc, #44]	; (8001d34 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d08:	e002      	b.n	8001d10 <LoopFillZerobss>

08001d0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d0c:	f842 3b04 	str.w	r3, [r2], #4

08001d10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d10:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d14:	d3f9      	bcc.n	8001d0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d16:	f7ff ffd3 	bl	8001cc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d1a:	f002 f813 	bl	8003d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d1e:	f7ff fbf9 	bl	8001514 <main>
  bx  lr    
 8001d22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d24:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8001d28:	08008b1c 	.word	0x08008b1c
  ldr  r0, =_sdata
 8001d2c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d30:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8001d34:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 8001d38:	20000310 	.word	0x20000310

08001d3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d3c:	e7fe      	b.n	8001d3c <ADC_IRQHandler>
	...

08001d40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d44:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <HAL_Init+0x40>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a0d      	ldr	r2, [pc, #52]	; (8001d80 <HAL_Init+0x40>)
 8001d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <HAL_Init+0x40>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <HAL_Init+0x40>)
 8001d56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d5c:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <HAL_Init+0x40>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a07      	ldr	r2, [pc, #28]	; (8001d80 <HAL_Init+0x40>)
 8001d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d68:	2003      	movs	r0, #3
 8001d6a:	f000 f931 	bl	8001fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d6e:	2000      	movs	r0, #0
 8001d70:	f000 f808 	bl	8001d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d74:	f7ff fdce 	bl	8001914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40023c00 	.word	0x40023c00

08001d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d8c:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <HAL_InitTick+0x54>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <HAL_InitTick+0x58>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	4619      	mov	r1, r3
 8001d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 f93b 	bl	800201e <HAL_SYSTICK_Config>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e00e      	b.n	8001dd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b0f      	cmp	r3, #15
 8001db6:	d80a      	bhi.n	8001dce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db8:	2200      	movs	r2, #0
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc0:	f000 f911 	bl	8001fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dc4:	4a06      	ldr	r2, [pc, #24]	; (8001de0 <HAL_InitTick+0x5c>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	e000      	b.n	8001dd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000014 	.word	0x20000014
 8001ddc:	2000001c 	.word	0x2000001c
 8001de0:	20000018 	.word	0x20000018

08001de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_IncTick+0x20>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_IncTick+0x24>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4413      	add	r3, r2
 8001df4:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <HAL_IncTick+0x24>)
 8001df6:	6013      	str	r3, [r2, #0]
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	2000001c 	.word	0x2000001c
 8001e08:	200002fc 	.word	0x200002fc

08001e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e10:	4b03      	ldr	r3, [pc, #12]	; (8001e20 <HAL_GetTick+0x14>)
 8001e12:	681b      	ldr	r3, [r3, #0]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	200002fc 	.word	0x200002fc

08001e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e2c:	f7ff ffee 	bl	8001e0c <HAL_GetTick>
 8001e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3c:	d005      	beq.n	8001e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <HAL_Delay+0x44>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4413      	add	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e4a:	bf00      	nop
 8001e4c:	f7ff ffde 	bl	8001e0c <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d8f7      	bhi.n	8001e4c <HAL_Delay+0x28>
  {
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	bf00      	nop
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	2000001c 	.word	0x2000001c

08001e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e9e:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	60d3      	str	r3, [r2, #12]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <__NVIC_GetPriorityGrouping+0x18>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	f003 0307 	and.w	r3, r3, #7
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	6039      	str	r1, [r7, #0]
 8001eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	db0a      	blt.n	8001efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	490c      	ldr	r1, [pc, #48]	; (8001f1c <__NVIC_SetPriority+0x4c>)
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	0112      	lsls	r2, r2, #4
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef8:	e00a      	b.n	8001f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4908      	ldr	r1, [pc, #32]	; (8001f20 <__NVIC_SetPriority+0x50>)
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	3b04      	subs	r3, #4
 8001f08:	0112      	lsls	r2, r2, #4
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	761a      	strb	r2, [r3, #24]
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	e000e100 	.word	0xe000e100
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b089      	sub	sp, #36	; 0x24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f1c3 0307 	rsb	r3, r3, #7
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	bf28      	it	cs
 8001f42:	2304      	movcs	r3, #4
 8001f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3304      	adds	r3, #4
 8001f4a:	2b06      	cmp	r3, #6
 8001f4c:	d902      	bls.n	8001f54 <NVIC_EncodePriority+0x30>
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3b03      	subs	r3, #3
 8001f52:	e000      	b.n	8001f56 <NVIC_EncodePriority+0x32>
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f58:	f04f 32ff 	mov.w	r2, #4294967295
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43da      	mvns	r2, r3
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	401a      	ands	r2, r3
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	fa01 f303 	lsl.w	r3, r1, r3
 8001f76:	43d9      	mvns	r1, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	4313      	orrs	r3, r2
         );
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3724      	adds	r7, #36	; 0x24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f9c:	d301      	bcc.n	8001fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e00f      	b.n	8001fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fa2:	4a0a      	ldr	r2, [pc, #40]	; (8001fcc <SysTick_Config+0x40>)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001faa:	210f      	movs	r1, #15
 8001fac:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb0:	f7ff ff8e 	bl	8001ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <SysTick_Config+0x40>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fba:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <SysTick_Config+0x40>)
 8001fbc:	2207      	movs	r2, #7
 8001fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	e000e010 	.word	0xe000e010

08001fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff ff47 	bl	8001e6c <__NVIC_SetPriorityGrouping>
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b086      	sub	sp, #24
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	4603      	mov	r3, r0
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	607a      	str	r2, [r7, #4]
 8001ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff8:	f7ff ff5c 	bl	8001eb4 <__NVIC_GetPriorityGrouping>
 8001ffc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	68b9      	ldr	r1, [r7, #8]
 8002002:	6978      	ldr	r0, [r7, #20]
 8002004:	f7ff ff8e 	bl	8001f24 <NVIC_EncodePriority>
 8002008:	4602      	mov	r2, r0
 800200a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800200e:	4611      	mov	r1, r2
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff5d 	bl	8001ed0 <__NVIC_SetPriority>
}
 8002016:	bf00      	nop
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff ffb0 	bl	8001f8c <SysTick_Config>
 800202c:	4603      	mov	r3, r0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	; 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800204a:	2300      	movs	r3, #0
 800204c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	e159      	b.n	8002308 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002054:	2201      	movs	r2, #1
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4013      	ands	r3, r2
 8002066:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	429a      	cmp	r2, r3
 800206e:	f040 8148 	bne.w	8002302 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	2b01      	cmp	r3, #1
 800207c:	d005      	beq.n	800208a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002086:	2b02      	cmp	r3, #2
 8002088:	d130      	bne.n	80020ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	2203      	movs	r2, #3
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4013      	ands	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c0:	2201      	movs	r2, #1
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f003 0201 	and.w	r2, r3, #1
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d017      	beq.n	8002128 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	2203      	movs	r2, #3
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d123      	bne.n	800217c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	08da      	lsrs	r2, r3, #3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3208      	adds	r2, #8
 800213c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	220f      	movs	r2, #15
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	08da      	lsrs	r2, r3, #3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3208      	adds	r2, #8
 8002176:	69b9      	ldr	r1, [r7, #24]
 8002178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	2203      	movs	r2, #3
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0203 	and.w	r2, r3, #3
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 80a2 	beq.w	8002302 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	4b57      	ldr	r3, [pc, #348]	; (8002320 <HAL_GPIO_Init+0x2e8>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	4a56      	ldr	r2, [pc, #344]	; (8002320 <HAL_GPIO_Init+0x2e8>)
 80021c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021cc:	6453      	str	r3, [r2, #68]	; 0x44
 80021ce:	4b54      	ldr	r3, [pc, #336]	; (8002320 <HAL_GPIO_Init+0x2e8>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021da:	4a52      	ldr	r2, [pc, #328]	; (8002324 <HAL_GPIO_Init+0x2ec>)
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	089b      	lsrs	r3, r3, #2
 80021e0:	3302      	adds	r3, #2
 80021e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	220f      	movs	r2, #15
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a49      	ldr	r2, [pc, #292]	; (8002328 <HAL_GPIO_Init+0x2f0>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d019      	beq.n	800223a <HAL_GPIO_Init+0x202>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a48      	ldr	r2, [pc, #288]	; (800232c <HAL_GPIO_Init+0x2f4>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d013      	beq.n	8002236 <HAL_GPIO_Init+0x1fe>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a47      	ldr	r2, [pc, #284]	; (8002330 <HAL_GPIO_Init+0x2f8>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d00d      	beq.n	8002232 <HAL_GPIO_Init+0x1fa>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a46      	ldr	r2, [pc, #280]	; (8002334 <HAL_GPIO_Init+0x2fc>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d007      	beq.n	800222e <HAL_GPIO_Init+0x1f6>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a45      	ldr	r2, [pc, #276]	; (8002338 <HAL_GPIO_Init+0x300>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d101      	bne.n	800222a <HAL_GPIO_Init+0x1f2>
 8002226:	2304      	movs	r3, #4
 8002228:	e008      	b.n	800223c <HAL_GPIO_Init+0x204>
 800222a:	2307      	movs	r3, #7
 800222c:	e006      	b.n	800223c <HAL_GPIO_Init+0x204>
 800222e:	2303      	movs	r3, #3
 8002230:	e004      	b.n	800223c <HAL_GPIO_Init+0x204>
 8002232:	2302      	movs	r3, #2
 8002234:	e002      	b.n	800223c <HAL_GPIO_Init+0x204>
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <HAL_GPIO_Init+0x204>
 800223a:	2300      	movs	r3, #0
 800223c:	69fa      	ldr	r2, [r7, #28]
 800223e:	f002 0203 	and.w	r2, r2, #3
 8002242:	0092      	lsls	r2, r2, #2
 8002244:	4093      	lsls	r3, r2
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4313      	orrs	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800224c:	4935      	ldr	r1, [pc, #212]	; (8002324 <HAL_GPIO_Init+0x2ec>)
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	089b      	lsrs	r3, r3, #2
 8002252:	3302      	adds	r3, #2
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800225a:	4b38      	ldr	r3, [pc, #224]	; (800233c <HAL_GPIO_Init+0x304>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	43db      	mvns	r3, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4013      	ands	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800227e:	4a2f      	ldr	r2, [pc, #188]	; (800233c <HAL_GPIO_Init+0x304>)
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002284:	4b2d      	ldr	r3, [pc, #180]	; (800233c <HAL_GPIO_Init+0x304>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022a8:	4a24      	ldr	r2, [pc, #144]	; (800233c <HAL_GPIO_Init+0x304>)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022ae:	4b23      	ldr	r3, [pc, #140]	; (800233c <HAL_GPIO_Init+0x304>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	43db      	mvns	r3, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4013      	ands	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022d2:	4a1a      	ldr	r2, [pc, #104]	; (800233c <HAL_GPIO_Init+0x304>)
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022d8:	4b18      	ldr	r3, [pc, #96]	; (800233c <HAL_GPIO_Init+0x304>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	43db      	mvns	r3, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022fc:	4a0f      	ldr	r2, [pc, #60]	; (800233c <HAL_GPIO_Init+0x304>)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	3301      	adds	r3, #1
 8002306:	61fb      	str	r3, [r7, #28]
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	2b0f      	cmp	r3, #15
 800230c:	f67f aea2 	bls.w	8002054 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002310:	bf00      	nop
 8002312:	bf00      	nop
 8002314:	3724      	adds	r7, #36	; 0x24
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	40023800 	.word	0x40023800
 8002324:	40013800 	.word	0x40013800
 8002328:	40020000 	.word	0x40020000
 800232c:	40020400 	.word	0x40020400
 8002330:	40020800 	.word	0x40020800
 8002334:	40020c00 	.word	0x40020c00
 8002338:	40021000 	.word	0x40021000
 800233c:	40013c00 	.word	0x40013c00

08002340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	807b      	strh	r3, [r7, #2]
 800234c:	4613      	mov	r3, r2
 800234e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002350:	787b      	ldrb	r3, [r7, #1]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002356:	887a      	ldrh	r2, [r7, #2]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800235c:	e003      	b.n	8002366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800235e:	887b      	ldrh	r3, [r7, #2]
 8002360:	041a      	lsls	r2, r3, #16
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	619a      	str	r2, [r3, #24]
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
	...

08002374 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e264      	b.n	8002850 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d075      	beq.n	800247e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002392:	4ba3      	ldr	r3, [pc, #652]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 030c 	and.w	r3, r3, #12
 800239a:	2b04      	cmp	r3, #4
 800239c:	d00c      	beq.n	80023b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800239e:	4ba0      	ldr	r3, [pc, #640]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d112      	bne.n	80023d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023aa:	4b9d      	ldr	r3, [pc, #628]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023b6:	d10b      	bne.n	80023d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b8:	4b99      	ldr	r3, [pc, #612]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d05b      	beq.n	800247c <HAL_RCC_OscConfig+0x108>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d157      	bne.n	800247c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e23f      	b.n	8002850 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d8:	d106      	bne.n	80023e8 <HAL_RCC_OscConfig+0x74>
 80023da:	4b91      	ldr	r3, [pc, #580]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a90      	ldr	r2, [pc, #576]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 80023e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	e01d      	b.n	8002424 <HAL_RCC_OscConfig+0xb0>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023f0:	d10c      	bne.n	800240c <HAL_RCC_OscConfig+0x98>
 80023f2:	4b8b      	ldr	r3, [pc, #556]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a8a      	ldr	r2, [pc, #552]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 80023f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	4b88      	ldr	r3, [pc, #544]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a87      	ldr	r2, [pc, #540]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 8002404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	e00b      	b.n	8002424 <HAL_RCC_OscConfig+0xb0>
 800240c:	4b84      	ldr	r3, [pc, #528]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a83      	ldr	r2, [pc, #524]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 8002412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	4b81      	ldr	r3, [pc, #516]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a80      	ldr	r2, [pc, #512]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 800241e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d013      	beq.n	8002454 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242c:	f7ff fcee 	bl	8001e0c <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002434:	f7ff fcea 	bl	8001e0c <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b64      	cmp	r3, #100	; 0x64
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e204      	b.n	8002850 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002446:	4b76      	ldr	r3, [pc, #472]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f0      	beq.n	8002434 <HAL_RCC_OscConfig+0xc0>
 8002452:	e014      	b.n	800247e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002454:	f7ff fcda 	bl	8001e0c <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800245c:	f7ff fcd6 	bl	8001e0c <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b64      	cmp	r3, #100	; 0x64
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e1f0      	b.n	8002850 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800246e:	4b6c      	ldr	r3, [pc, #432]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f0      	bne.n	800245c <HAL_RCC_OscConfig+0xe8>
 800247a:	e000      	b.n	800247e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800247c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d063      	beq.n	8002552 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800248a:	4b65      	ldr	r3, [pc, #404]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 030c 	and.w	r3, r3, #12
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00b      	beq.n	80024ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002496:	4b62      	ldr	r3, [pc, #392]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d11c      	bne.n	80024dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024a2:	4b5f      	ldr	r3, [pc, #380]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d116      	bne.n	80024dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ae:	4b5c      	ldr	r3, [pc, #368]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d005      	beq.n	80024c6 <HAL_RCC_OscConfig+0x152>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d001      	beq.n	80024c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e1c4      	b.n	8002850 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c6:	4b56      	ldr	r3, [pc, #344]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4952      	ldr	r1, [pc, #328]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024da:	e03a      	b.n	8002552 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d020      	beq.n	8002526 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024e4:	4b4f      	ldr	r3, [pc, #316]	; (8002624 <HAL_RCC_OscConfig+0x2b0>)
 80024e6:	2201      	movs	r2, #1
 80024e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ea:	f7ff fc8f 	bl	8001e0c <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f2:	f7ff fc8b 	bl	8001e0c <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e1a5      	b.n	8002850 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002504:	4b46      	ldr	r3, [pc, #280]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0f0      	beq.n	80024f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002510:	4b43      	ldr	r3, [pc, #268]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	4940      	ldr	r1, [pc, #256]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 8002520:	4313      	orrs	r3, r2
 8002522:	600b      	str	r3, [r1, #0]
 8002524:	e015      	b.n	8002552 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002526:	4b3f      	ldr	r3, [pc, #252]	; (8002624 <HAL_RCC_OscConfig+0x2b0>)
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252c:	f7ff fc6e 	bl	8001e0c <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002534:	f7ff fc6a 	bl	8001e0c <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e184      	b.n	8002850 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002546:	4b36      	ldr	r3, [pc, #216]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d030      	beq.n	80025c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d016      	beq.n	8002594 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002566:	4b30      	ldr	r3, [pc, #192]	; (8002628 <HAL_RCC_OscConfig+0x2b4>)
 8002568:	2201      	movs	r2, #1
 800256a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256c:	f7ff fc4e 	bl	8001e0c <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002574:	f7ff fc4a 	bl	8001e0c <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e164      	b.n	8002850 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002586:	4b26      	ldr	r3, [pc, #152]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 8002588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0x200>
 8002592:	e015      	b.n	80025c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002594:	4b24      	ldr	r3, [pc, #144]	; (8002628 <HAL_RCC_OscConfig+0x2b4>)
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259a:	f7ff fc37 	bl	8001e0c <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a2:	f7ff fc33 	bl	8001e0c <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e14d      	b.n	8002850 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b4:	4b1a      	ldr	r3, [pc, #104]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 80025b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f0      	bne.n	80025a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 80a0 	beq.w	800270e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ce:	2300      	movs	r3, #0
 80025d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025d2:	4b13      	ldr	r3, [pc, #76]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10f      	bne.n	80025fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	4b0f      	ldr	r3, [pc, #60]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	4a0e      	ldr	r2, [pc, #56]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 80025e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ec:	6413      	str	r3, [r2, #64]	; 0x40
 80025ee:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <HAL_RCC_OscConfig+0x2ac>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025fa:	2301      	movs	r3, #1
 80025fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fe:	4b0b      	ldr	r3, [pc, #44]	; (800262c <HAL_RCC_OscConfig+0x2b8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002606:	2b00      	cmp	r3, #0
 8002608:	d121      	bne.n	800264e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800260a:	4b08      	ldr	r3, [pc, #32]	; (800262c <HAL_RCC_OscConfig+0x2b8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a07      	ldr	r2, [pc, #28]	; (800262c <HAL_RCC_OscConfig+0x2b8>)
 8002610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002616:	f7ff fbf9 	bl	8001e0c <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261c:	e011      	b.n	8002642 <HAL_RCC_OscConfig+0x2ce>
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800
 8002624:	42470000 	.word	0x42470000
 8002628:	42470e80 	.word	0x42470e80
 800262c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002630:	f7ff fbec 	bl	8001e0c <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e106      	b.n	8002850 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002642:	4b85      	ldr	r3, [pc, #532]	; (8002858 <HAL_RCC_OscConfig+0x4e4>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d106      	bne.n	8002664 <HAL_RCC_OscConfig+0x2f0>
 8002656:	4b81      	ldr	r3, [pc, #516]	; (800285c <HAL_RCC_OscConfig+0x4e8>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	4a80      	ldr	r2, [pc, #512]	; (800285c <HAL_RCC_OscConfig+0x4e8>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	6713      	str	r3, [r2, #112]	; 0x70
 8002662:	e01c      	b.n	800269e <HAL_RCC_OscConfig+0x32a>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2b05      	cmp	r3, #5
 800266a:	d10c      	bne.n	8002686 <HAL_RCC_OscConfig+0x312>
 800266c:	4b7b      	ldr	r3, [pc, #492]	; (800285c <HAL_RCC_OscConfig+0x4e8>)
 800266e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002670:	4a7a      	ldr	r2, [pc, #488]	; (800285c <HAL_RCC_OscConfig+0x4e8>)
 8002672:	f043 0304 	orr.w	r3, r3, #4
 8002676:	6713      	str	r3, [r2, #112]	; 0x70
 8002678:	4b78      	ldr	r3, [pc, #480]	; (800285c <HAL_RCC_OscConfig+0x4e8>)
 800267a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267c:	4a77      	ldr	r2, [pc, #476]	; (800285c <HAL_RCC_OscConfig+0x4e8>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	6713      	str	r3, [r2, #112]	; 0x70
 8002684:	e00b      	b.n	800269e <HAL_RCC_OscConfig+0x32a>
 8002686:	4b75      	ldr	r3, [pc, #468]	; (800285c <HAL_RCC_OscConfig+0x4e8>)
 8002688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268a:	4a74      	ldr	r2, [pc, #464]	; (800285c <HAL_RCC_OscConfig+0x4e8>)
 800268c:	f023 0301 	bic.w	r3, r3, #1
 8002690:	6713      	str	r3, [r2, #112]	; 0x70
 8002692:	4b72      	ldr	r3, [pc, #456]	; (800285c <HAL_RCC_OscConfig+0x4e8>)
 8002694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002696:	4a71      	ldr	r2, [pc, #452]	; (800285c <HAL_RCC_OscConfig+0x4e8>)
 8002698:	f023 0304 	bic.w	r3, r3, #4
 800269c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d015      	beq.n	80026d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a6:	f7ff fbb1 	bl	8001e0c <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ac:	e00a      	b.n	80026c4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ae:	f7ff fbad 	bl	8001e0c <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026bc:	4293      	cmp	r3, r2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e0c5      	b.n	8002850 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c4:	4b65      	ldr	r3, [pc, #404]	; (800285c <HAL_RCC_OscConfig+0x4e8>)
 80026c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0ee      	beq.n	80026ae <HAL_RCC_OscConfig+0x33a>
 80026d0:	e014      	b.n	80026fc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d2:	f7ff fb9b 	bl	8001e0c <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d8:	e00a      	b.n	80026f0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026da:	f7ff fb97 	bl	8001e0c <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e0af      	b.n	8002850 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f0:	4b5a      	ldr	r3, [pc, #360]	; (800285c <HAL_RCC_OscConfig+0x4e8>)
 80026f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1ee      	bne.n	80026da <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026fc:	7dfb      	ldrb	r3, [r7, #23]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d105      	bne.n	800270e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002702:	4b56      	ldr	r3, [pc, #344]	; (800285c <HAL_RCC_OscConfig+0x4e8>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	4a55      	ldr	r2, [pc, #340]	; (800285c <HAL_RCC_OscConfig+0x4e8>)
 8002708:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800270c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 809b 	beq.w	800284e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002718:	4b50      	ldr	r3, [pc, #320]	; (800285c <HAL_RCC_OscConfig+0x4e8>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 030c 	and.w	r3, r3, #12
 8002720:	2b08      	cmp	r3, #8
 8002722:	d05c      	beq.n	80027de <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	2b02      	cmp	r3, #2
 800272a:	d141      	bne.n	80027b0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800272c:	4b4c      	ldr	r3, [pc, #304]	; (8002860 <HAL_RCC_OscConfig+0x4ec>)
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002732:	f7ff fb6b 	bl	8001e0c <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800273a:	f7ff fb67 	bl	8001e0c <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e081      	b.n	8002850 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800274c:	4b43      	ldr	r3, [pc, #268]	; (800285c <HAL_RCC_OscConfig+0x4e8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1f0      	bne.n	800273a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	69da      	ldr	r2, [r3, #28]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	431a      	orrs	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002766:	019b      	lsls	r3, r3, #6
 8002768:	431a      	orrs	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276e:	085b      	lsrs	r3, r3, #1
 8002770:	3b01      	subs	r3, #1
 8002772:	041b      	lsls	r3, r3, #16
 8002774:	431a      	orrs	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277a:	061b      	lsls	r3, r3, #24
 800277c:	4937      	ldr	r1, [pc, #220]	; (800285c <HAL_RCC_OscConfig+0x4e8>)
 800277e:	4313      	orrs	r3, r2
 8002780:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002782:	4b37      	ldr	r3, [pc, #220]	; (8002860 <HAL_RCC_OscConfig+0x4ec>)
 8002784:	2201      	movs	r2, #1
 8002786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002788:	f7ff fb40 	bl	8001e0c <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002790:	f7ff fb3c 	bl	8001e0c <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e056      	b.n	8002850 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a2:	4b2e      	ldr	r3, [pc, #184]	; (800285c <HAL_RCC_OscConfig+0x4e8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0x41c>
 80027ae:	e04e      	b.n	800284e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b0:	4b2b      	ldr	r3, [pc, #172]	; (8002860 <HAL_RCC_OscConfig+0x4ec>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b6:	f7ff fb29 	bl	8001e0c <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027be:	f7ff fb25 	bl	8001e0c <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e03f      	b.n	8002850 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d0:	4b22      	ldr	r3, [pc, #136]	; (800285c <HAL_RCC_OscConfig+0x4e8>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1f0      	bne.n	80027be <HAL_RCC_OscConfig+0x44a>
 80027dc:	e037      	b.n	800284e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d101      	bne.n	80027ea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e032      	b.n	8002850 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027ea:	4b1c      	ldr	r3, [pc, #112]	; (800285c <HAL_RCC_OscConfig+0x4e8>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d028      	beq.n	800284a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002802:	429a      	cmp	r2, r3
 8002804:	d121      	bne.n	800284a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002810:	429a      	cmp	r2, r3
 8002812:	d11a      	bne.n	800284a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800281a:	4013      	ands	r3, r2
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002820:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002822:	4293      	cmp	r3, r2
 8002824:	d111      	bne.n	800284a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002830:	085b      	lsrs	r3, r3, #1
 8002832:	3b01      	subs	r3, #1
 8002834:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002836:	429a      	cmp	r2, r3
 8002838:	d107      	bne.n	800284a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002844:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002846:	429a      	cmp	r2, r3
 8002848:	d001      	beq.n	800284e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40007000 	.word	0x40007000
 800285c:	40023800 	.word	0x40023800
 8002860:	42470060 	.word	0x42470060

08002864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e0cc      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002878:	4b68      	ldr	r3, [pc, #416]	; (8002a1c <HAL_RCC_ClockConfig+0x1b8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d90c      	bls.n	80028a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002886:	4b65      	ldr	r3, [pc, #404]	; (8002a1c <HAL_RCC_ClockConfig+0x1b8>)
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800288e:	4b63      	ldr	r3, [pc, #396]	; (8002a1c <HAL_RCC_ClockConfig+0x1b8>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d001      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e0b8      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d020      	beq.n	80028ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028b8:	4b59      	ldr	r3, [pc, #356]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	4a58      	ldr	r2, [pc, #352]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80028be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028d0:	4b53      	ldr	r3, [pc, #332]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	4a52      	ldr	r2, [pc, #328]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028dc:	4b50      	ldr	r3, [pc, #320]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	494d      	ldr	r1, [pc, #308]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d044      	beq.n	8002984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d107      	bne.n	8002912 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002902:	4b47      	ldr	r3, [pc, #284]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d119      	bne.n	8002942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e07f      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b02      	cmp	r3, #2
 8002918:	d003      	beq.n	8002922 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800291e:	2b03      	cmp	r3, #3
 8002920:	d107      	bne.n	8002932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002922:	4b3f      	ldr	r3, [pc, #252]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d109      	bne.n	8002942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e06f      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002932:	4b3b      	ldr	r3, [pc, #236]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e067      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002942:	4b37      	ldr	r3, [pc, #220]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f023 0203 	bic.w	r2, r3, #3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	4934      	ldr	r1, [pc, #208]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 8002950:	4313      	orrs	r3, r2
 8002952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002954:	f7ff fa5a 	bl	8001e0c <HAL_GetTick>
 8002958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800295a:	e00a      	b.n	8002972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800295c:	f7ff fa56 	bl	8001e0c <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	f241 3288 	movw	r2, #5000	; 0x1388
 800296a:	4293      	cmp	r3, r2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e04f      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002972:	4b2b      	ldr	r3, [pc, #172]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 020c 	and.w	r2, r3, #12
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	429a      	cmp	r2, r3
 8002982:	d1eb      	bne.n	800295c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002984:	4b25      	ldr	r3, [pc, #148]	; (8002a1c <HAL_RCC_ClockConfig+0x1b8>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d20c      	bcs.n	80029ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002992:	4b22      	ldr	r3, [pc, #136]	; (8002a1c <HAL_RCC_ClockConfig+0x1b8>)
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800299a:	4b20      	ldr	r3, [pc, #128]	; (8002a1c <HAL_RCC_ClockConfig+0x1b8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d001      	beq.n	80029ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e032      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d008      	beq.n	80029ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029b8:	4b19      	ldr	r3, [pc, #100]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	4916      	ldr	r1, [pc, #88]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d009      	beq.n	80029ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029d6:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	490e      	ldr	r1, [pc, #56]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029ea:	f000 f821 	bl	8002a30 <HAL_RCC_GetSysClockFreq>
 80029ee:	4602      	mov	r2, r0
 80029f0:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	091b      	lsrs	r3, r3, #4
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	490a      	ldr	r1, [pc, #40]	; (8002a24 <HAL_RCC_ClockConfig+0x1c0>)
 80029fc:	5ccb      	ldrb	r3, [r1, r3]
 80029fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002a02:	4a09      	ldr	r2, [pc, #36]	; (8002a28 <HAL_RCC_ClockConfig+0x1c4>)
 8002a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a06:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <HAL_RCC_ClockConfig+0x1c8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff f9ba 	bl	8001d84 <HAL_InitTick>

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40023c00 	.word	0x40023c00
 8002a20:	40023800 	.word	0x40023800
 8002a24:	0800863c 	.word	0x0800863c
 8002a28:	20000014 	.word	0x20000014
 8002a2c:	20000018 	.word	0x20000018

08002a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a30:	b5b0      	push	{r4, r5, r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a36:	2100      	movs	r1, #0
 8002a38:	6079      	str	r1, [r7, #4]
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	60f9      	str	r1, [r7, #12]
 8002a3e:	2100      	movs	r1, #0
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002a42:	2100      	movs	r1, #0
 8002a44:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a46:	4952      	ldr	r1, [pc, #328]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a48:	6889      	ldr	r1, [r1, #8]
 8002a4a:	f001 010c 	and.w	r1, r1, #12
 8002a4e:	2908      	cmp	r1, #8
 8002a50:	d00d      	beq.n	8002a6e <HAL_RCC_GetSysClockFreq+0x3e>
 8002a52:	2908      	cmp	r1, #8
 8002a54:	f200 8094 	bhi.w	8002b80 <HAL_RCC_GetSysClockFreq+0x150>
 8002a58:	2900      	cmp	r1, #0
 8002a5a:	d002      	beq.n	8002a62 <HAL_RCC_GetSysClockFreq+0x32>
 8002a5c:	2904      	cmp	r1, #4
 8002a5e:	d003      	beq.n	8002a68 <HAL_RCC_GetSysClockFreq+0x38>
 8002a60:	e08e      	b.n	8002b80 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a62:	4b4c      	ldr	r3, [pc, #304]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x164>)
 8002a64:	60bb      	str	r3, [r7, #8]
       break;
 8002a66:	e08e      	b.n	8002b86 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a68:	4b4b      	ldr	r3, [pc, #300]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x168>)
 8002a6a:	60bb      	str	r3, [r7, #8]
      break;
 8002a6c:	e08b      	b.n	8002b86 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a6e:	4948      	ldr	r1, [pc, #288]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a70:	6849      	ldr	r1, [r1, #4]
 8002a72:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002a76:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a78:	4945      	ldr	r1, [pc, #276]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a7a:	6849      	ldr	r1, [r1, #4]
 8002a7c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002a80:	2900      	cmp	r1, #0
 8002a82:	d024      	beq.n	8002ace <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a84:	4942      	ldr	r1, [pc, #264]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a86:	6849      	ldr	r1, [r1, #4]
 8002a88:	0989      	lsrs	r1, r1, #6
 8002a8a:	4608      	mov	r0, r1
 8002a8c:	f04f 0100 	mov.w	r1, #0
 8002a90:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002a94:	f04f 0500 	mov.w	r5, #0
 8002a98:	ea00 0204 	and.w	r2, r0, r4
 8002a9c:	ea01 0305 	and.w	r3, r1, r5
 8002aa0:	493d      	ldr	r1, [pc, #244]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x168>)
 8002aa2:	fb01 f003 	mul.w	r0, r1, r3
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	fb01 f102 	mul.w	r1, r1, r2
 8002aac:	1844      	adds	r4, r0, r1
 8002aae:	493a      	ldr	r1, [pc, #232]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x168>)
 8002ab0:	fba2 0101 	umull	r0, r1, r2, r1
 8002ab4:	1863      	adds	r3, r4, r1
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	461a      	mov	r2, r3
 8002abc:	f04f 0300 	mov.w	r3, #0
 8002ac0:	f7fe f8ea 	bl	8000c98 <__aeabi_uldivmod>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4613      	mov	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	e04a      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ace:	4b30      	ldr	r3, [pc, #192]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	099b      	lsrs	r3, r3, #6
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ade:	f04f 0100 	mov.w	r1, #0
 8002ae2:	ea02 0400 	and.w	r4, r2, r0
 8002ae6:	ea03 0501 	and.w	r5, r3, r1
 8002aea:	4620      	mov	r0, r4
 8002aec:	4629      	mov	r1, r5
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	f04f 0300 	mov.w	r3, #0
 8002af6:	014b      	lsls	r3, r1, #5
 8002af8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002afc:	0142      	lsls	r2, r0, #5
 8002afe:	4610      	mov	r0, r2
 8002b00:	4619      	mov	r1, r3
 8002b02:	1b00      	subs	r0, r0, r4
 8002b04:	eb61 0105 	sbc.w	r1, r1, r5
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	f04f 0300 	mov.w	r3, #0
 8002b10:	018b      	lsls	r3, r1, #6
 8002b12:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b16:	0182      	lsls	r2, r0, #6
 8002b18:	1a12      	subs	r2, r2, r0
 8002b1a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b1e:	f04f 0000 	mov.w	r0, #0
 8002b22:	f04f 0100 	mov.w	r1, #0
 8002b26:	00d9      	lsls	r1, r3, #3
 8002b28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b2c:	00d0      	lsls	r0, r2, #3
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	1912      	adds	r2, r2, r4
 8002b34:	eb45 0303 	adc.w	r3, r5, r3
 8002b38:	f04f 0000 	mov.w	r0, #0
 8002b3c:	f04f 0100 	mov.w	r1, #0
 8002b40:	0299      	lsls	r1, r3, #10
 8002b42:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002b46:	0290      	lsls	r0, r2, #10
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	4619      	mov	r1, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	461a      	mov	r2, r3
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	f7fe f89e 	bl	8000c98 <__aeabi_uldivmod>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4613      	mov	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b64:	4b0a      	ldr	r3, [pc, #40]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	0c1b      	lsrs	r3, r3, #16
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	3301      	adds	r3, #1
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7c:	60bb      	str	r3, [r7, #8]
      break;
 8002b7e:	e002      	b.n	8002b86 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b80:	4b04      	ldr	r3, [pc, #16]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x164>)
 8002b82:	60bb      	str	r3, [r7, #8]
      break;
 8002b84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b86:	68bb      	ldr	r3, [r7, #8]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bdb0      	pop	{r4, r5, r7, pc}
 8002b90:	40023800 	.word	0x40023800
 8002b94:	00f42400 	.word	0x00f42400
 8002b98:	017d7840 	.word	0x017d7840

08002b9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ba0:	4b03      	ldr	r3, [pc, #12]	; (8002bb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	20000014 	.word	0x20000014

08002bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bb8:	f7ff fff0 	bl	8002b9c <HAL_RCC_GetHCLKFreq>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	0a9b      	lsrs	r3, r3, #10
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	4903      	ldr	r1, [pc, #12]	; (8002bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bca:	5ccb      	ldrb	r3, [r1, r3]
 8002bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	0800864c 	.word	0x0800864c

08002bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002be0:	f7ff ffdc 	bl	8002b9c <HAL_RCC_GetHCLKFreq>
 8002be4:	4602      	mov	r2, r0
 8002be6:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	0b5b      	lsrs	r3, r3, #13
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	4903      	ldr	r1, [pc, #12]	; (8002c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bf2:	5ccb      	ldrb	r3, [r1, r3]
 8002bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	0800864c 	.word	0x0800864c

08002c04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e07b      	b.n	8002d0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d108      	bne.n	8002c30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c26:	d009      	beq.n	8002c3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	61da      	str	r2, [r3, #28]
 8002c2e:	e005      	b.n	8002c3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fe fe84 	bl	8001964 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c84:	431a      	orrs	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc0:	ea42 0103 	orr.w	r1, r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	0c1b      	lsrs	r3, r3, #16
 8002cda:	f003 0104 	and.w	r1, r3, #4
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	f003 0210 	and.w	r2, r3, #16
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	69da      	ldr	r2, [r3, #28]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cfc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b088      	sub	sp, #32
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	60f8      	str	r0, [r7, #12]
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	603b      	str	r3, [r7, #0]
 8002d22:	4613      	mov	r3, r2
 8002d24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d101      	bne.n	8002d38 <HAL_SPI_Transmit+0x22>
 8002d34:	2302      	movs	r3, #2
 8002d36:	e126      	b.n	8002f86 <HAL_SPI_Transmit+0x270>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d40:	f7ff f864 	bl	8001e0c <HAL_GetTick>
 8002d44:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d46:	88fb      	ldrh	r3, [r7, #6]
 8002d48:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d002      	beq.n	8002d5c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d56:	2302      	movs	r3, #2
 8002d58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d5a:	e10b      	b.n	8002f74 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d002      	beq.n	8002d68 <HAL_SPI_Transmit+0x52>
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d102      	bne.n	8002d6e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d6c:	e102      	b.n	8002f74 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2203      	movs	r2, #3
 8002d72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	88fa      	ldrh	r2, [r7, #6]
 8002d86:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	88fa      	ldrh	r2, [r7, #6]
 8002d8c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002db4:	d10f      	bne.n	8002dd6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dd4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de0:	2b40      	cmp	r3, #64	; 0x40
 8002de2:	d007      	beq.n	8002df4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002df2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dfc:	d14b      	bne.n	8002e96 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <HAL_SPI_Transmit+0xf6>
 8002e06:	8afb      	ldrh	r3, [r7, #22]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d13e      	bne.n	8002e8a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e10:	881a      	ldrh	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1c:	1c9a      	adds	r2, r3, #2
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e30:	e02b      	b.n	8002e8a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d112      	bne.n	8002e66 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e44:	881a      	ldrh	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	1c9a      	adds	r2, r3, #2
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e64:	e011      	b.n	8002e8a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e66:	f7fe ffd1 	bl	8001e0c <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d803      	bhi.n	8002e7e <HAL_SPI_Transmit+0x168>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7c:	d102      	bne.n	8002e84 <HAL_SPI_Transmit+0x16e>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d102      	bne.n	8002e8a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e88:	e074      	b.n	8002f74 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1ce      	bne.n	8002e32 <HAL_SPI_Transmit+0x11c>
 8002e94:	e04c      	b.n	8002f30 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <HAL_SPI_Transmit+0x18e>
 8002e9e:	8afb      	ldrh	r3, [r7, #22]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d140      	bne.n	8002f26 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	330c      	adds	r3, #12
 8002eae:	7812      	ldrb	r2, [r2, #0]
 8002eb0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	1c5a      	adds	r2, r3, #1
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002eca:	e02c      	b.n	8002f26 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d113      	bne.n	8002f02 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	330c      	adds	r3, #12
 8002ee4:	7812      	ldrb	r2, [r2, #0]
 8002ee6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f00:	e011      	b.n	8002f26 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f02:	f7fe ff83 	bl	8001e0c <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d803      	bhi.n	8002f1a <HAL_SPI_Transmit+0x204>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f18:	d102      	bne.n	8002f20 <HAL_SPI_Transmit+0x20a>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d102      	bne.n	8002f26 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f24:	e026      	b.n	8002f74 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1cd      	bne.n	8002ecc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	6839      	ldr	r1, [r7, #0]
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 fbcb 	bl	80036d0 <SPI_EndRxTxTransaction>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2220      	movs	r2, #32
 8002f44:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10a      	bne.n	8002f64 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f4e:	2300      	movs	r3, #0
 8002f50:	613b      	str	r3, [r7, #16]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d002      	beq.n	8002f72 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	77fb      	strb	r3, [r7, #31]
 8002f70:	e000      	b.n	8002f74 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002f72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f84:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3720      	adds	r7, #32
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b088      	sub	sp, #32
 8002f92:	af02      	add	r7, sp, #8
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	603b      	str	r3, [r7, #0]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002faa:	d112      	bne.n	8002fd2 <HAL_SPI_Receive+0x44>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10e      	bne.n	8002fd2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2204      	movs	r2, #4
 8002fb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002fbc:	88fa      	ldrh	r2, [r7, #6]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	68b9      	ldr	r1, [r7, #8]
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 f8f1 	bl	80031b0 <HAL_SPI_TransmitReceive>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	e0ea      	b.n	80031a8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d101      	bne.n	8002fe0 <HAL_SPI_Receive+0x52>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	e0e3      	b.n	80031a8 <HAL_SPI_Receive+0x21a>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fe8:	f7fe ff10 	bl	8001e0c <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d002      	beq.n	8003000 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ffe:	e0ca      	b.n	8003196 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d002      	beq.n	800300c <HAL_SPI_Receive+0x7e>
 8003006:	88fb      	ldrh	r3, [r7, #6]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d102      	bne.n	8003012 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003010:	e0c1      	b.n	8003196 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2204      	movs	r2, #4
 8003016:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	88fa      	ldrh	r2, [r7, #6]
 800302a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	88fa      	ldrh	r2, [r7, #6]
 8003030:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003058:	d10f      	bne.n	800307a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003068:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003078:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003084:	2b40      	cmp	r3, #64	; 0x40
 8003086:	d007      	beq.n	8003098 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003096:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d162      	bne.n	8003166 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80030a0:	e02e      	b.n	8003100 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d115      	bne.n	80030dc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f103 020c 	add.w	r2, r3, #12
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030bc:	7812      	ldrb	r2, [r2, #0]
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c6:	1c5a      	adds	r2, r3, #1
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	3b01      	subs	r3, #1
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030da:	e011      	b.n	8003100 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030dc:	f7fe fe96 	bl	8001e0c <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d803      	bhi.n	80030f4 <HAL_SPI_Receive+0x166>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f2:	d102      	bne.n	80030fa <HAL_SPI_Receive+0x16c>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d102      	bne.n	8003100 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80030fe:	e04a      	b.n	8003196 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003104:	b29b      	uxth	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1cb      	bne.n	80030a2 <HAL_SPI_Receive+0x114>
 800310a:	e031      	b.n	8003170 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b01      	cmp	r3, #1
 8003118:	d113      	bne.n	8003142 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68da      	ldr	r2, [r3, #12]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003124:	b292      	uxth	r2, r2
 8003126:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312c:	1c9a      	adds	r2, r3, #2
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003136:	b29b      	uxth	r3, r3
 8003138:	3b01      	subs	r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003140:	e011      	b.n	8003166 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003142:	f7fe fe63 	bl	8001e0c <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d803      	bhi.n	800315a <HAL_SPI_Receive+0x1cc>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003158:	d102      	bne.n	8003160 <HAL_SPI_Receive+0x1d2>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d102      	bne.n	8003166 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003164:	e017      	b.n	8003196 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800316a:	b29b      	uxth	r3, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1cd      	bne.n	800310c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	6839      	ldr	r1, [r7, #0]
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f000 fa45 	bl	8003604 <SPI_EndRxTransaction>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d002      	beq.n	8003186 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2220      	movs	r2, #32
 8003184:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318a:	2b00      	cmp	r3, #0
 800318c:	d002      	beq.n	8003194 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	75fb      	strb	r3, [r7, #23]
 8003192:	e000      	b.n	8003196 <HAL_SPI_Receive+0x208>
  }

error :
 8003194:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80031a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b08c      	sub	sp, #48	; 0x30
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
 80031bc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80031be:	2301      	movs	r3, #1
 80031c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80031c2:	2300      	movs	r3, #0
 80031c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_SPI_TransmitReceive+0x26>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e18a      	b.n	80034ec <HAL_SPI_TransmitReceive+0x33c>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031de:	f7fe fe15 	bl	8001e0c <HAL_GetTick>
 80031e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80031f4:	887b      	ldrh	r3, [r7, #2]
 80031f6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d00f      	beq.n	8003220 <HAL_SPI_TransmitReceive+0x70>
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003206:	d107      	bne.n	8003218 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d103      	bne.n	8003218 <HAL_SPI_TransmitReceive+0x68>
 8003210:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003214:	2b04      	cmp	r3, #4
 8003216:	d003      	beq.n	8003220 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003218:	2302      	movs	r3, #2
 800321a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800321e:	e15b      	b.n	80034d8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d005      	beq.n	8003232 <HAL_SPI_TransmitReceive+0x82>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <HAL_SPI_TransmitReceive+0x82>
 800322c:	887b      	ldrh	r3, [r7, #2]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d103      	bne.n	800323a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003238:	e14e      	b.n	80034d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b04      	cmp	r3, #4
 8003244:	d003      	beq.n	800324e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2205      	movs	r2, #5
 800324a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	887a      	ldrh	r2, [r7, #2]
 800325e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	887a      	ldrh	r2, [r7, #2]
 8003264:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	887a      	ldrh	r2, [r7, #2]
 8003270:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	887a      	ldrh	r2, [r7, #2]
 8003276:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328e:	2b40      	cmp	r3, #64	; 0x40
 8003290:	d007      	beq.n	80032a2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032aa:	d178      	bne.n	800339e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d002      	beq.n	80032ba <HAL_SPI_TransmitReceive+0x10a>
 80032b4:	8b7b      	ldrh	r3, [r7, #26]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d166      	bne.n	8003388 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	881a      	ldrh	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	1c9a      	adds	r2, r3, #2
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032de:	e053      	b.n	8003388 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d11b      	bne.n	8003326 <HAL_SPI_TransmitReceive+0x176>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d016      	beq.n	8003326 <HAL_SPI_TransmitReceive+0x176>
 80032f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d113      	bne.n	8003326 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	881a      	ldrh	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	1c9a      	adds	r2, r3, #2
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003318:	b29b      	uxth	r3, r3
 800331a:	3b01      	subs	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b01      	cmp	r3, #1
 8003332:	d119      	bne.n	8003368 <HAL_SPI_TransmitReceive+0x1b8>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003338:	b29b      	uxth	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d014      	beq.n	8003368 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003348:	b292      	uxth	r2, r2
 800334a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003350:	1c9a      	adds	r2, r3, #2
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800335a:	b29b      	uxth	r3, r3
 800335c:	3b01      	subs	r3, #1
 800335e:	b29a      	uxth	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003364:	2301      	movs	r3, #1
 8003366:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003368:	f7fe fd50 	bl	8001e0c <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003374:	429a      	cmp	r2, r3
 8003376:	d807      	bhi.n	8003388 <HAL_SPI_TransmitReceive+0x1d8>
 8003378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337e:	d003      	beq.n	8003388 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003386:	e0a7      	b.n	80034d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1a6      	bne.n	80032e0 <HAL_SPI_TransmitReceive+0x130>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003396:	b29b      	uxth	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1a1      	bne.n	80032e0 <HAL_SPI_TransmitReceive+0x130>
 800339c:	e07c      	b.n	8003498 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d002      	beq.n	80033ac <HAL_SPI_TransmitReceive+0x1fc>
 80033a6:	8b7b      	ldrh	r3, [r7, #26]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d16b      	bne.n	8003484 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	330c      	adds	r3, #12
 80033b6:	7812      	ldrb	r2, [r2, #0]
 80033b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	1c5a      	adds	r2, r3, #1
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033d2:	e057      	b.n	8003484 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d11c      	bne.n	800341c <HAL_SPI_TransmitReceive+0x26c>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d017      	beq.n	800341c <HAL_SPI_TransmitReceive+0x26c>
 80033ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d114      	bne.n	800341c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	330c      	adds	r3, #12
 80033fc:	7812      	ldrb	r2, [r2, #0]
 80033fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	1c5a      	adds	r2, r3, #1
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800340e:	b29b      	uxth	r3, r3
 8003410:	3b01      	subs	r3, #1
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b01      	cmp	r3, #1
 8003428:	d119      	bne.n	800345e <HAL_SPI_TransmitReceive+0x2ae>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800342e:	b29b      	uxth	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d014      	beq.n	800345e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68da      	ldr	r2, [r3, #12]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800345a:	2301      	movs	r3, #1
 800345c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800345e:	f7fe fcd5 	bl	8001e0c <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800346a:	429a      	cmp	r2, r3
 800346c:	d803      	bhi.n	8003476 <HAL_SPI_TransmitReceive+0x2c6>
 800346e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003474:	d102      	bne.n	800347c <HAL_SPI_TransmitReceive+0x2cc>
 8003476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003478:	2b00      	cmp	r3, #0
 800347a:	d103      	bne.n	8003484 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003482:	e029      	b.n	80034d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003488:	b29b      	uxth	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1a2      	bne.n	80033d4 <HAL_SPI_TransmitReceive+0x224>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003492:	b29b      	uxth	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d19d      	bne.n	80033d4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800349a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 f917 	bl	80036d0 <SPI_EndRxTxTransaction>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d006      	beq.n	80034b6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2220      	movs	r2, #32
 80034b2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80034b4:	e010      	b.n	80034d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10b      	bne.n	80034d6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034be:	2300      	movs	r3, #0
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	e000      	b.n	80034d8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80034d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3730      	adds	r7, #48	; 0x30
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b088      	sub	sp, #32
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	603b      	str	r3, [r7, #0]
 8003500:	4613      	mov	r3, r2
 8003502:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003504:	f7fe fc82 	bl	8001e0c <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350c:	1a9b      	subs	r3, r3, r2
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	4413      	add	r3, r2
 8003512:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003514:	f7fe fc7a 	bl	8001e0c <HAL_GetTick>
 8003518:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800351a:	4b39      	ldr	r3, [pc, #228]	; (8003600 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	015b      	lsls	r3, r3, #5
 8003520:	0d1b      	lsrs	r3, r3, #20
 8003522:	69fa      	ldr	r2, [r7, #28]
 8003524:	fb02 f303 	mul.w	r3, r2, r3
 8003528:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800352a:	e054      	b.n	80035d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003532:	d050      	beq.n	80035d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003534:	f7fe fc6a 	bl	8001e0c <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	69fa      	ldr	r2, [r7, #28]
 8003540:	429a      	cmp	r2, r3
 8003542:	d902      	bls.n	800354a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d13d      	bne.n	80035c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003558:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003562:	d111      	bne.n	8003588 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800356c:	d004      	beq.n	8003578 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003576:	d107      	bne.n	8003588 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003586:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003590:	d10f      	bne.n	80035b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e017      	b.n	80035f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	4013      	ands	r3, r2
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	bf0c      	ite	eq
 80035e6:	2301      	moveq	r3, #1
 80035e8:	2300      	movne	r3, #0
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	461a      	mov	r2, r3
 80035ee:	79fb      	ldrb	r3, [r7, #7]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d19b      	bne.n	800352c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3720      	adds	r7, #32
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	20000014 	.word	0x20000014

08003604 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af02      	add	r7, sp, #8
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003618:	d111      	bne.n	800363e <SPI_EndRxTransaction+0x3a>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003622:	d004      	beq.n	800362e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800362c:	d107      	bne.n	800363e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800363c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003646:	d12a      	bne.n	800369e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003650:	d012      	beq.n	8003678 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	2200      	movs	r2, #0
 800365a:	2180      	movs	r1, #128	; 0x80
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f7ff ff49 	bl	80034f4 <SPI_WaitFlagStateUntilTimeout>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d02d      	beq.n	80036c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366c:	f043 0220 	orr.w	r2, r3, #32
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e026      	b.n	80036c6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2200      	movs	r2, #0
 8003680:	2101      	movs	r1, #1
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f7ff ff36 	bl	80034f4 <SPI_WaitFlagStateUntilTimeout>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d01a      	beq.n	80036c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003692:	f043 0220 	orr.w	r2, r3, #32
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e013      	b.n	80036c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2200      	movs	r2, #0
 80036a6:	2101      	movs	r1, #1
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f7ff ff23 	bl	80034f4 <SPI_WaitFlagStateUntilTimeout>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d007      	beq.n	80036c4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b8:	f043 0220 	orr.w	r2, r3, #32
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e000      	b.n	80036c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
	...

080036d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b088      	sub	sp, #32
 80036d4:	af02      	add	r7, sp, #8
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80036dc:	4b1b      	ldr	r3, [pc, #108]	; (800374c <SPI_EndRxTxTransaction+0x7c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a1b      	ldr	r2, [pc, #108]	; (8003750 <SPI_EndRxTxTransaction+0x80>)
 80036e2:	fba2 2303 	umull	r2, r3, r2, r3
 80036e6:	0d5b      	lsrs	r3, r3, #21
 80036e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036ec:	fb02 f303 	mul.w	r3, r2, r3
 80036f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036fa:	d112      	bne.n	8003722 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2200      	movs	r2, #0
 8003704:	2180      	movs	r1, #128	; 0x80
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f7ff fef4 	bl	80034f4 <SPI_WaitFlagStateUntilTimeout>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d016      	beq.n	8003740 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003716:	f043 0220 	orr.w	r2, r3, #32
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e00f      	b.n	8003742 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00a      	beq.n	800373e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	3b01      	subs	r3, #1
 800372c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003738:	2b80      	cmp	r3, #128	; 0x80
 800373a:	d0f2      	beq.n	8003722 <SPI_EndRxTxTransaction+0x52>
 800373c:	e000      	b.n	8003740 <SPI_EndRxTxTransaction+0x70>
        break;
 800373e:	bf00      	nop
  }

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	20000014 	.word	0x20000014
 8003750:	165e9f81 	.word	0x165e9f81

08003754 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e03f      	b.n	80037e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7fe f93a 	bl	80019f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2224      	movs	r2, #36	; 0x24
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003796:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f905 	bl	80039a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	691a      	ldr	r2, [r3, #16]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695a      	ldr	r2, [r3, #20]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b08a      	sub	sp, #40	; 0x28
 80037f2:	af02      	add	r7, sp, #8
 80037f4:	60f8      	str	r0, [r7, #12]
 80037f6:	60b9      	str	r1, [r7, #8]
 80037f8:	603b      	str	r3, [r7, #0]
 80037fa:	4613      	mov	r3, r2
 80037fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037fe:	2300      	movs	r3, #0
 8003800:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b20      	cmp	r3, #32
 800380c:	d17c      	bne.n	8003908 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <HAL_UART_Transmit+0x2c>
 8003814:	88fb      	ldrh	r3, [r7, #6]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e075      	b.n	800390a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003824:	2b01      	cmp	r3, #1
 8003826:	d101      	bne.n	800382c <HAL_UART_Transmit+0x3e>
 8003828:	2302      	movs	r3, #2
 800382a:	e06e      	b.n	800390a <HAL_UART_Transmit+0x11c>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2221      	movs	r2, #33	; 0x21
 800383e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003842:	f7fe fae3 	bl	8001e0c <HAL_GetTick>
 8003846:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	88fa      	ldrh	r2, [r7, #6]
 800384c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	88fa      	ldrh	r2, [r7, #6]
 8003852:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800385c:	d108      	bne.n	8003870 <HAL_UART_Transmit+0x82>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d104      	bne.n	8003870 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003866:	2300      	movs	r3, #0
 8003868:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	61bb      	str	r3, [r7, #24]
 800386e:	e003      	b.n	8003878 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003874:	2300      	movs	r3, #0
 8003876:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003880:	e02a      	b.n	80038d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2200      	movs	r2, #0
 800388a:	2180      	movs	r1, #128	; 0x80
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f000 f840 	bl	8003912 <UART_WaitOnFlagUntilTimeout>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e036      	b.n	800390a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10b      	bne.n	80038ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	881b      	ldrh	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	3302      	adds	r3, #2
 80038b6:	61bb      	str	r3, [r7, #24]
 80038b8:	e007      	b.n	80038ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	781a      	ldrb	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	3301      	adds	r3, #1
 80038c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038dc:	b29b      	uxth	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1cf      	bne.n	8003882 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2200      	movs	r2, #0
 80038ea:	2140      	movs	r1, #64	; 0x40
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 f810 	bl	8003912 <UART_WaitOnFlagUntilTimeout>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e006      	b.n	800390a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003904:	2300      	movs	r3, #0
 8003906:	e000      	b.n	800390a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003908:	2302      	movs	r3, #2
  }
}
 800390a:	4618      	mov	r0, r3
 800390c:	3720      	adds	r7, #32
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b084      	sub	sp, #16
 8003916:	af00      	add	r7, sp, #0
 8003918:	60f8      	str	r0, [r7, #12]
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	603b      	str	r3, [r7, #0]
 800391e:	4613      	mov	r3, r2
 8003920:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003922:	e02c      	b.n	800397e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392a:	d028      	beq.n	800397e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d007      	beq.n	8003942 <UART_WaitOnFlagUntilTimeout+0x30>
 8003932:	f7fe fa6b 	bl	8001e0c <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	429a      	cmp	r2, r3
 8003940:	d21d      	bcs.n	800397e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003950:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	695a      	ldr	r2, [r3, #20]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 0201 	bic.w	r2, r2, #1
 8003960:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2220      	movs	r2, #32
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2220      	movs	r2, #32
 800396e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e00f      	b.n	800399e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	4013      	ands	r3, r2
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	429a      	cmp	r2, r3
 800398c:	bf0c      	ite	eq
 800398e:	2301      	moveq	r3, #1
 8003990:	2300      	movne	r3, #0
 8003992:	b2db      	uxtb	r3, r3
 8003994:	461a      	mov	r2, r3
 8003996:	79fb      	ldrb	r3, [r7, #7]
 8003998:	429a      	cmp	r2, r3
 800399a:	d0c3      	beq.n	8003924 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039ac:	b09f      	sub	sp, #124	; 0x7c
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80039bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039be:	68d9      	ldr	r1, [r3, #12]
 80039c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	ea40 0301 	orr.w	r3, r0, r1
 80039c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039cc:	689a      	ldr	r2, [r3, #8]
 80039ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	431a      	orrs	r2, r3
 80039d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	431a      	orrs	r2, r3
 80039da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	4313      	orrs	r3, r2
 80039e0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80039e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80039ec:	f021 010c 	bic.w	r1, r1, #12
 80039f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039f6:	430b      	orrs	r3, r1
 80039f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a06:	6999      	ldr	r1, [r3, #24]
 8003a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	ea40 0301 	orr.w	r3, r0, r1
 8003a10:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	4bc5      	ldr	r3, [pc, #788]	; (8003d2c <UART_SetConfig+0x384>)
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d004      	beq.n	8003a26 <UART_SetConfig+0x7e>
 8003a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	4bc3      	ldr	r3, [pc, #780]	; (8003d30 <UART_SetConfig+0x388>)
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d103      	bne.n	8003a2e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a26:	f7ff f8d9 	bl	8002bdc <HAL_RCC_GetPCLK2Freq>
 8003a2a:	6778      	str	r0, [r7, #116]	; 0x74
 8003a2c:	e002      	b.n	8003a34 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a2e:	f7ff f8c1 	bl	8002bb4 <HAL_RCC_GetPCLK1Freq>
 8003a32:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a3c:	f040 80b6 	bne.w	8003bac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a42:	461c      	mov	r4, r3
 8003a44:	f04f 0500 	mov.w	r5, #0
 8003a48:	4622      	mov	r2, r4
 8003a4a:	462b      	mov	r3, r5
 8003a4c:	1891      	adds	r1, r2, r2
 8003a4e:	6439      	str	r1, [r7, #64]	; 0x40
 8003a50:	415b      	adcs	r3, r3
 8003a52:	647b      	str	r3, [r7, #68]	; 0x44
 8003a54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a58:	1912      	adds	r2, r2, r4
 8003a5a:	eb45 0303 	adc.w	r3, r5, r3
 8003a5e:	f04f 0000 	mov.w	r0, #0
 8003a62:	f04f 0100 	mov.w	r1, #0
 8003a66:	00d9      	lsls	r1, r3, #3
 8003a68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a6c:	00d0      	lsls	r0, r2, #3
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	1911      	adds	r1, r2, r4
 8003a74:	6639      	str	r1, [r7, #96]	; 0x60
 8003a76:	416b      	adcs	r3, r5
 8003a78:	667b      	str	r3, [r7, #100]	; 0x64
 8003a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	f04f 0300 	mov.w	r3, #0
 8003a84:	1891      	adds	r1, r2, r2
 8003a86:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a88:	415b      	adcs	r3, r3
 8003a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a90:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003a94:	f7fd f900 	bl	8000c98 <__aeabi_uldivmod>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4ba5      	ldr	r3, [pc, #660]	; (8003d34 <UART_SetConfig+0x38c>)
 8003a9e:	fba3 2302 	umull	r2, r3, r3, r2
 8003aa2:	095b      	lsrs	r3, r3, #5
 8003aa4:	011e      	lsls	r6, r3, #4
 8003aa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aa8:	461c      	mov	r4, r3
 8003aaa:	f04f 0500 	mov.w	r5, #0
 8003aae:	4622      	mov	r2, r4
 8003ab0:	462b      	mov	r3, r5
 8003ab2:	1891      	adds	r1, r2, r2
 8003ab4:	6339      	str	r1, [r7, #48]	; 0x30
 8003ab6:	415b      	adcs	r3, r3
 8003ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8003aba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003abe:	1912      	adds	r2, r2, r4
 8003ac0:	eb45 0303 	adc.w	r3, r5, r3
 8003ac4:	f04f 0000 	mov.w	r0, #0
 8003ac8:	f04f 0100 	mov.w	r1, #0
 8003acc:	00d9      	lsls	r1, r3, #3
 8003ace:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ad2:	00d0      	lsls	r0, r2, #3
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	1911      	adds	r1, r2, r4
 8003ada:	65b9      	str	r1, [r7, #88]	; 0x58
 8003adc:	416b      	adcs	r3, r5
 8003ade:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	f04f 0300 	mov.w	r3, #0
 8003aea:	1891      	adds	r1, r2, r2
 8003aec:	62b9      	str	r1, [r7, #40]	; 0x28
 8003aee:	415b      	adcs	r3, r3
 8003af0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003af2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003af6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003afa:	f7fd f8cd 	bl	8000c98 <__aeabi_uldivmod>
 8003afe:	4602      	mov	r2, r0
 8003b00:	460b      	mov	r3, r1
 8003b02:	4b8c      	ldr	r3, [pc, #560]	; (8003d34 <UART_SetConfig+0x38c>)
 8003b04:	fba3 1302 	umull	r1, r3, r3, r2
 8003b08:	095b      	lsrs	r3, r3, #5
 8003b0a:	2164      	movs	r1, #100	; 0x64
 8003b0c:	fb01 f303 	mul.w	r3, r1, r3
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	3332      	adds	r3, #50	; 0x32
 8003b16:	4a87      	ldr	r2, [pc, #540]	; (8003d34 <UART_SetConfig+0x38c>)
 8003b18:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1c:	095b      	lsrs	r3, r3, #5
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b24:	441e      	add	r6, r3
 8003b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f04f 0100 	mov.w	r1, #0
 8003b2e:	4602      	mov	r2, r0
 8003b30:	460b      	mov	r3, r1
 8003b32:	1894      	adds	r4, r2, r2
 8003b34:	623c      	str	r4, [r7, #32]
 8003b36:	415b      	adcs	r3, r3
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b3e:	1812      	adds	r2, r2, r0
 8003b40:	eb41 0303 	adc.w	r3, r1, r3
 8003b44:	f04f 0400 	mov.w	r4, #0
 8003b48:	f04f 0500 	mov.w	r5, #0
 8003b4c:	00dd      	lsls	r5, r3, #3
 8003b4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b52:	00d4      	lsls	r4, r2, #3
 8003b54:	4622      	mov	r2, r4
 8003b56:	462b      	mov	r3, r5
 8003b58:	1814      	adds	r4, r2, r0
 8003b5a:	653c      	str	r4, [r7, #80]	; 0x50
 8003b5c:	414b      	adcs	r3, r1
 8003b5e:	657b      	str	r3, [r7, #84]	; 0x54
 8003b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	461a      	mov	r2, r3
 8003b66:	f04f 0300 	mov.w	r3, #0
 8003b6a:	1891      	adds	r1, r2, r2
 8003b6c:	61b9      	str	r1, [r7, #24]
 8003b6e:	415b      	adcs	r3, r3
 8003b70:	61fb      	str	r3, [r7, #28]
 8003b72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003b7a:	f7fd f88d 	bl	8000c98 <__aeabi_uldivmod>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	460b      	mov	r3, r1
 8003b82:	4b6c      	ldr	r3, [pc, #432]	; (8003d34 <UART_SetConfig+0x38c>)
 8003b84:	fba3 1302 	umull	r1, r3, r3, r2
 8003b88:	095b      	lsrs	r3, r3, #5
 8003b8a:	2164      	movs	r1, #100	; 0x64
 8003b8c:	fb01 f303 	mul.w	r3, r1, r3
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	3332      	adds	r3, #50	; 0x32
 8003b96:	4a67      	ldr	r2, [pc, #412]	; (8003d34 <UART_SetConfig+0x38c>)
 8003b98:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9c:	095b      	lsrs	r3, r3, #5
 8003b9e:	f003 0207 	and.w	r2, r3, #7
 8003ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4432      	add	r2, r6
 8003ba8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003baa:	e0b9      	b.n	8003d20 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bae:	461c      	mov	r4, r3
 8003bb0:	f04f 0500 	mov.w	r5, #0
 8003bb4:	4622      	mov	r2, r4
 8003bb6:	462b      	mov	r3, r5
 8003bb8:	1891      	adds	r1, r2, r2
 8003bba:	6139      	str	r1, [r7, #16]
 8003bbc:	415b      	adcs	r3, r3
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003bc4:	1912      	adds	r2, r2, r4
 8003bc6:	eb45 0303 	adc.w	r3, r5, r3
 8003bca:	f04f 0000 	mov.w	r0, #0
 8003bce:	f04f 0100 	mov.w	r1, #0
 8003bd2:	00d9      	lsls	r1, r3, #3
 8003bd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bd8:	00d0      	lsls	r0, r2, #3
 8003bda:	4602      	mov	r2, r0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	eb12 0804 	adds.w	r8, r2, r4
 8003be2:	eb43 0905 	adc.w	r9, r3, r5
 8003be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f04f 0100 	mov.w	r1, #0
 8003bf0:	f04f 0200 	mov.w	r2, #0
 8003bf4:	f04f 0300 	mov.w	r3, #0
 8003bf8:	008b      	lsls	r3, r1, #2
 8003bfa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003bfe:	0082      	lsls	r2, r0, #2
 8003c00:	4640      	mov	r0, r8
 8003c02:	4649      	mov	r1, r9
 8003c04:	f7fd f848 	bl	8000c98 <__aeabi_uldivmod>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4b49      	ldr	r3, [pc, #292]	; (8003d34 <UART_SetConfig+0x38c>)
 8003c0e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c12:	095b      	lsrs	r3, r3, #5
 8003c14:	011e      	lsls	r6, r3, #4
 8003c16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f04f 0100 	mov.w	r1, #0
 8003c1e:	4602      	mov	r2, r0
 8003c20:	460b      	mov	r3, r1
 8003c22:	1894      	adds	r4, r2, r2
 8003c24:	60bc      	str	r4, [r7, #8]
 8003c26:	415b      	adcs	r3, r3
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c2e:	1812      	adds	r2, r2, r0
 8003c30:	eb41 0303 	adc.w	r3, r1, r3
 8003c34:	f04f 0400 	mov.w	r4, #0
 8003c38:	f04f 0500 	mov.w	r5, #0
 8003c3c:	00dd      	lsls	r5, r3, #3
 8003c3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c42:	00d4      	lsls	r4, r2, #3
 8003c44:	4622      	mov	r2, r4
 8003c46:	462b      	mov	r3, r5
 8003c48:	1814      	adds	r4, r2, r0
 8003c4a:	64bc      	str	r4, [r7, #72]	; 0x48
 8003c4c:	414b      	adcs	r3, r1
 8003c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f04f 0100 	mov.w	r1, #0
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	f04f 0300 	mov.w	r3, #0
 8003c62:	008b      	lsls	r3, r1, #2
 8003c64:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c68:	0082      	lsls	r2, r0, #2
 8003c6a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003c6e:	f7fd f813 	bl	8000c98 <__aeabi_uldivmod>
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	4b2f      	ldr	r3, [pc, #188]	; (8003d34 <UART_SetConfig+0x38c>)
 8003c78:	fba3 1302 	umull	r1, r3, r3, r2
 8003c7c:	095b      	lsrs	r3, r3, #5
 8003c7e:	2164      	movs	r1, #100	; 0x64
 8003c80:	fb01 f303 	mul.w	r3, r1, r3
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	3332      	adds	r3, #50	; 0x32
 8003c8a:	4a2a      	ldr	r2, [pc, #168]	; (8003d34 <UART_SetConfig+0x38c>)
 8003c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c90:	095b      	lsrs	r3, r3, #5
 8003c92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c96:	441e      	add	r6, r3
 8003c98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f04f 0100 	mov.w	r1, #0
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	1894      	adds	r4, r2, r2
 8003ca6:	603c      	str	r4, [r7, #0]
 8003ca8:	415b      	adcs	r3, r3
 8003caa:	607b      	str	r3, [r7, #4]
 8003cac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cb0:	1812      	adds	r2, r2, r0
 8003cb2:	eb41 0303 	adc.w	r3, r1, r3
 8003cb6:	f04f 0400 	mov.w	r4, #0
 8003cba:	f04f 0500 	mov.w	r5, #0
 8003cbe:	00dd      	lsls	r5, r3, #3
 8003cc0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003cc4:	00d4      	lsls	r4, r2, #3
 8003cc6:	4622      	mov	r2, r4
 8003cc8:	462b      	mov	r3, r5
 8003cca:	eb12 0a00 	adds.w	sl, r2, r0
 8003cce:	eb43 0b01 	adc.w	fp, r3, r1
 8003cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f04f 0100 	mov.w	r1, #0
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	f04f 0300 	mov.w	r3, #0
 8003ce4:	008b      	lsls	r3, r1, #2
 8003ce6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003cea:	0082      	lsls	r2, r0, #2
 8003cec:	4650      	mov	r0, sl
 8003cee:	4659      	mov	r1, fp
 8003cf0:	f7fc ffd2 	bl	8000c98 <__aeabi_uldivmod>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4b0e      	ldr	r3, [pc, #56]	; (8003d34 <UART_SetConfig+0x38c>)
 8003cfa:	fba3 1302 	umull	r1, r3, r3, r2
 8003cfe:	095b      	lsrs	r3, r3, #5
 8003d00:	2164      	movs	r1, #100	; 0x64
 8003d02:	fb01 f303 	mul.w	r3, r1, r3
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	3332      	adds	r3, #50	; 0x32
 8003d0c:	4a09      	ldr	r2, [pc, #36]	; (8003d34 <UART_SetConfig+0x38c>)
 8003d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d12:	095b      	lsrs	r3, r3, #5
 8003d14:	f003 020f 	and.w	r2, r3, #15
 8003d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4432      	add	r2, r6
 8003d1e:	609a      	str	r2, [r3, #8]
}
 8003d20:	bf00      	nop
 8003d22:	377c      	adds	r7, #124	; 0x7c
 8003d24:	46bd      	mov	sp, r7
 8003d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40011000 	.word	0x40011000
 8003d30:	40011400 	.word	0x40011400
 8003d34:	51eb851f 	.word	0x51eb851f

08003d38 <__errno>:
 8003d38:	4b01      	ldr	r3, [pc, #4]	; (8003d40 <__errno+0x8>)
 8003d3a:	6818      	ldr	r0, [r3, #0]
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	20000020 	.word	0x20000020

08003d44 <__libc_init_array>:
 8003d44:	b570      	push	{r4, r5, r6, lr}
 8003d46:	4d0d      	ldr	r5, [pc, #52]	; (8003d7c <__libc_init_array+0x38>)
 8003d48:	4c0d      	ldr	r4, [pc, #52]	; (8003d80 <__libc_init_array+0x3c>)
 8003d4a:	1b64      	subs	r4, r4, r5
 8003d4c:	10a4      	asrs	r4, r4, #2
 8003d4e:	2600      	movs	r6, #0
 8003d50:	42a6      	cmp	r6, r4
 8003d52:	d109      	bne.n	8003d68 <__libc_init_array+0x24>
 8003d54:	4d0b      	ldr	r5, [pc, #44]	; (8003d84 <__libc_init_array+0x40>)
 8003d56:	4c0c      	ldr	r4, [pc, #48]	; (8003d88 <__libc_init_array+0x44>)
 8003d58:	f004 fc46 	bl	80085e8 <_init>
 8003d5c:	1b64      	subs	r4, r4, r5
 8003d5e:	10a4      	asrs	r4, r4, #2
 8003d60:	2600      	movs	r6, #0
 8003d62:	42a6      	cmp	r6, r4
 8003d64:	d105      	bne.n	8003d72 <__libc_init_array+0x2e>
 8003d66:	bd70      	pop	{r4, r5, r6, pc}
 8003d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d6c:	4798      	blx	r3
 8003d6e:	3601      	adds	r6, #1
 8003d70:	e7ee      	b.n	8003d50 <__libc_init_array+0xc>
 8003d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d76:	4798      	blx	r3
 8003d78:	3601      	adds	r6, #1
 8003d7a:	e7f2      	b.n	8003d62 <__libc_init_array+0x1e>
 8003d7c:	08008b14 	.word	0x08008b14
 8003d80:	08008b14 	.word	0x08008b14
 8003d84:	08008b14 	.word	0x08008b14
 8003d88:	08008b18 	.word	0x08008b18

08003d8c <memcpy>:
 8003d8c:	440a      	add	r2, r1
 8003d8e:	4291      	cmp	r1, r2
 8003d90:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d94:	d100      	bne.n	8003d98 <memcpy+0xc>
 8003d96:	4770      	bx	lr
 8003d98:	b510      	push	{r4, lr}
 8003d9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003da2:	4291      	cmp	r1, r2
 8003da4:	d1f9      	bne.n	8003d9a <memcpy+0xe>
 8003da6:	bd10      	pop	{r4, pc}

08003da8 <memset>:
 8003da8:	4402      	add	r2, r0
 8003daa:	4603      	mov	r3, r0
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d100      	bne.n	8003db2 <memset+0xa>
 8003db0:	4770      	bx	lr
 8003db2:	f803 1b01 	strb.w	r1, [r3], #1
 8003db6:	e7f9      	b.n	8003dac <memset+0x4>

08003db8 <__cvt>:
 8003db8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dbc:	ec55 4b10 	vmov	r4, r5, d0
 8003dc0:	2d00      	cmp	r5, #0
 8003dc2:	460e      	mov	r6, r1
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	462b      	mov	r3, r5
 8003dc8:	bfbb      	ittet	lt
 8003dca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003dce:	461d      	movlt	r5, r3
 8003dd0:	2300      	movge	r3, #0
 8003dd2:	232d      	movlt	r3, #45	; 0x2d
 8003dd4:	700b      	strb	r3, [r1, #0]
 8003dd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003dd8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003ddc:	4691      	mov	r9, r2
 8003dde:	f023 0820 	bic.w	r8, r3, #32
 8003de2:	bfbc      	itt	lt
 8003de4:	4622      	movlt	r2, r4
 8003de6:	4614      	movlt	r4, r2
 8003de8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003dec:	d005      	beq.n	8003dfa <__cvt+0x42>
 8003dee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003df2:	d100      	bne.n	8003df6 <__cvt+0x3e>
 8003df4:	3601      	adds	r6, #1
 8003df6:	2102      	movs	r1, #2
 8003df8:	e000      	b.n	8003dfc <__cvt+0x44>
 8003dfa:	2103      	movs	r1, #3
 8003dfc:	ab03      	add	r3, sp, #12
 8003dfe:	9301      	str	r3, [sp, #4]
 8003e00:	ab02      	add	r3, sp, #8
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	ec45 4b10 	vmov	d0, r4, r5
 8003e08:	4653      	mov	r3, sl
 8003e0a:	4632      	mov	r2, r6
 8003e0c:	f001 fdb4 	bl	8005978 <_dtoa_r>
 8003e10:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003e14:	4607      	mov	r7, r0
 8003e16:	d102      	bne.n	8003e1e <__cvt+0x66>
 8003e18:	f019 0f01 	tst.w	r9, #1
 8003e1c:	d022      	beq.n	8003e64 <__cvt+0xac>
 8003e1e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003e22:	eb07 0906 	add.w	r9, r7, r6
 8003e26:	d110      	bne.n	8003e4a <__cvt+0x92>
 8003e28:	783b      	ldrb	r3, [r7, #0]
 8003e2a:	2b30      	cmp	r3, #48	; 0x30
 8003e2c:	d10a      	bne.n	8003e44 <__cvt+0x8c>
 8003e2e:	2200      	movs	r2, #0
 8003e30:	2300      	movs	r3, #0
 8003e32:	4620      	mov	r0, r4
 8003e34:	4629      	mov	r1, r5
 8003e36:	f7fc fe4f 	bl	8000ad8 <__aeabi_dcmpeq>
 8003e3a:	b918      	cbnz	r0, 8003e44 <__cvt+0x8c>
 8003e3c:	f1c6 0601 	rsb	r6, r6, #1
 8003e40:	f8ca 6000 	str.w	r6, [sl]
 8003e44:	f8da 3000 	ldr.w	r3, [sl]
 8003e48:	4499      	add	r9, r3
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	4620      	mov	r0, r4
 8003e50:	4629      	mov	r1, r5
 8003e52:	f7fc fe41 	bl	8000ad8 <__aeabi_dcmpeq>
 8003e56:	b108      	cbz	r0, 8003e5c <__cvt+0xa4>
 8003e58:	f8cd 900c 	str.w	r9, [sp, #12]
 8003e5c:	2230      	movs	r2, #48	; 0x30
 8003e5e:	9b03      	ldr	r3, [sp, #12]
 8003e60:	454b      	cmp	r3, r9
 8003e62:	d307      	bcc.n	8003e74 <__cvt+0xbc>
 8003e64:	9b03      	ldr	r3, [sp, #12]
 8003e66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e68:	1bdb      	subs	r3, r3, r7
 8003e6a:	4638      	mov	r0, r7
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	b004      	add	sp, #16
 8003e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e74:	1c59      	adds	r1, r3, #1
 8003e76:	9103      	str	r1, [sp, #12]
 8003e78:	701a      	strb	r2, [r3, #0]
 8003e7a:	e7f0      	b.n	8003e5e <__cvt+0xa6>

08003e7c <__exponent>:
 8003e7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2900      	cmp	r1, #0
 8003e82:	bfb8      	it	lt
 8003e84:	4249      	neglt	r1, r1
 8003e86:	f803 2b02 	strb.w	r2, [r3], #2
 8003e8a:	bfb4      	ite	lt
 8003e8c:	222d      	movlt	r2, #45	; 0x2d
 8003e8e:	222b      	movge	r2, #43	; 0x2b
 8003e90:	2909      	cmp	r1, #9
 8003e92:	7042      	strb	r2, [r0, #1]
 8003e94:	dd2a      	ble.n	8003eec <__exponent+0x70>
 8003e96:	f10d 0407 	add.w	r4, sp, #7
 8003e9a:	46a4      	mov	ip, r4
 8003e9c:	270a      	movs	r7, #10
 8003e9e:	46a6      	mov	lr, r4
 8003ea0:	460a      	mov	r2, r1
 8003ea2:	fb91 f6f7 	sdiv	r6, r1, r7
 8003ea6:	fb07 1516 	mls	r5, r7, r6, r1
 8003eaa:	3530      	adds	r5, #48	; 0x30
 8003eac:	2a63      	cmp	r2, #99	; 0x63
 8003eae:	f104 34ff 	add.w	r4, r4, #4294967295
 8003eb2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003eb6:	4631      	mov	r1, r6
 8003eb8:	dcf1      	bgt.n	8003e9e <__exponent+0x22>
 8003eba:	3130      	adds	r1, #48	; 0x30
 8003ebc:	f1ae 0502 	sub.w	r5, lr, #2
 8003ec0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003ec4:	1c44      	adds	r4, r0, #1
 8003ec6:	4629      	mov	r1, r5
 8003ec8:	4561      	cmp	r1, ip
 8003eca:	d30a      	bcc.n	8003ee2 <__exponent+0x66>
 8003ecc:	f10d 0209 	add.w	r2, sp, #9
 8003ed0:	eba2 020e 	sub.w	r2, r2, lr
 8003ed4:	4565      	cmp	r5, ip
 8003ed6:	bf88      	it	hi
 8003ed8:	2200      	movhi	r2, #0
 8003eda:	4413      	add	r3, r2
 8003edc:	1a18      	subs	r0, r3, r0
 8003ede:	b003      	add	sp, #12
 8003ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ee2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ee6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003eea:	e7ed      	b.n	8003ec8 <__exponent+0x4c>
 8003eec:	2330      	movs	r3, #48	; 0x30
 8003eee:	3130      	adds	r1, #48	; 0x30
 8003ef0:	7083      	strb	r3, [r0, #2]
 8003ef2:	70c1      	strb	r1, [r0, #3]
 8003ef4:	1d03      	adds	r3, r0, #4
 8003ef6:	e7f1      	b.n	8003edc <__exponent+0x60>

08003ef8 <_printf_float>:
 8003ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003efc:	ed2d 8b02 	vpush	{d8}
 8003f00:	b08d      	sub	sp, #52	; 0x34
 8003f02:	460c      	mov	r4, r1
 8003f04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003f08:	4616      	mov	r6, r2
 8003f0a:	461f      	mov	r7, r3
 8003f0c:	4605      	mov	r5, r0
 8003f0e:	f002 fe8f 	bl	8006c30 <_localeconv_r>
 8003f12:	f8d0 a000 	ldr.w	sl, [r0]
 8003f16:	4650      	mov	r0, sl
 8003f18:	f7fc f962 	bl	80001e0 <strlen>
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	930a      	str	r3, [sp, #40]	; 0x28
 8003f20:	6823      	ldr	r3, [r4, #0]
 8003f22:	9305      	str	r3, [sp, #20]
 8003f24:	f8d8 3000 	ldr.w	r3, [r8]
 8003f28:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003f2c:	3307      	adds	r3, #7
 8003f2e:	f023 0307 	bic.w	r3, r3, #7
 8003f32:	f103 0208 	add.w	r2, r3, #8
 8003f36:	f8c8 2000 	str.w	r2, [r8]
 8003f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003f42:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003f46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003f4a:	9307      	str	r3, [sp, #28]
 8003f4c:	f8cd 8018 	str.w	r8, [sp, #24]
 8003f50:	ee08 0a10 	vmov	s16, r0
 8003f54:	4b9f      	ldr	r3, [pc, #636]	; (80041d4 <_printf_float+0x2dc>)
 8003f56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f5e:	f7fc fded 	bl	8000b3c <__aeabi_dcmpun>
 8003f62:	bb88      	cbnz	r0, 8003fc8 <_printf_float+0xd0>
 8003f64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f68:	4b9a      	ldr	r3, [pc, #616]	; (80041d4 <_printf_float+0x2dc>)
 8003f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f6e:	f7fc fdc7 	bl	8000b00 <__aeabi_dcmple>
 8003f72:	bb48      	cbnz	r0, 8003fc8 <_printf_float+0xd0>
 8003f74:	2200      	movs	r2, #0
 8003f76:	2300      	movs	r3, #0
 8003f78:	4640      	mov	r0, r8
 8003f7a:	4649      	mov	r1, r9
 8003f7c:	f7fc fdb6 	bl	8000aec <__aeabi_dcmplt>
 8003f80:	b110      	cbz	r0, 8003f88 <_printf_float+0x90>
 8003f82:	232d      	movs	r3, #45	; 0x2d
 8003f84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f88:	4b93      	ldr	r3, [pc, #588]	; (80041d8 <_printf_float+0x2e0>)
 8003f8a:	4894      	ldr	r0, [pc, #592]	; (80041dc <_printf_float+0x2e4>)
 8003f8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003f90:	bf94      	ite	ls
 8003f92:	4698      	movls	r8, r3
 8003f94:	4680      	movhi	r8, r0
 8003f96:	2303      	movs	r3, #3
 8003f98:	6123      	str	r3, [r4, #16]
 8003f9a:	9b05      	ldr	r3, [sp, #20]
 8003f9c:	f023 0204 	bic.w	r2, r3, #4
 8003fa0:	6022      	str	r2, [r4, #0]
 8003fa2:	f04f 0900 	mov.w	r9, #0
 8003fa6:	9700      	str	r7, [sp, #0]
 8003fa8:	4633      	mov	r3, r6
 8003faa:	aa0b      	add	r2, sp, #44	; 0x2c
 8003fac:	4621      	mov	r1, r4
 8003fae:	4628      	mov	r0, r5
 8003fb0:	f000 f9d8 	bl	8004364 <_printf_common>
 8003fb4:	3001      	adds	r0, #1
 8003fb6:	f040 8090 	bne.w	80040da <_printf_float+0x1e2>
 8003fba:	f04f 30ff 	mov.w	r0, #4294967295
 8003fbe:	b00d      	add	sp, #52	; 0x34
 8003fc0:	ecbd 8b02 	vpop	{d8}
 8003fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fc8:	4642      	mov	r2, r8
 8003fca:	464b      	mov	r3, r9
 8003fcc:	4640      	mov	r0, r8
 8003fce:	4649      	mov	r1, r9
 8003fd0:	f7fc fdb4 	bl	8000b3c <__aeabi_dcmpun>
 8003fd4:	b140      	cbz	r0, 8003fe8 <_printf_float+0xf0>
 8003fd6:	464b      	mov	r3, r9
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	bfbc      	itt	lt
 8003fdc:	232d      	movlt	r3, #45	; 0x2d
 8003fde:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003fe2:	487f      	ldr	r0, [pc, #508]	; (80041e0 <_printf_float+0x2e8>)
 8003fe4:	4b7f      	ldr	r3, [pc, #508]	; (80041e4 <_printf_float+0x2ec>)
 8003fe6:	e7d1      	b.n	8003f8c <_printf_float+0x94>
 8003fe8:	6863      	ldr	r3, [r4, #4]
 8003fea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003fee:	9206      	str	r2, [sp, #24]
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	d13f      	bne.n	8004074 <_printf_float+0x17c>
 8003ff4:	2306      	movs	r3, #6
 8003ff6:	6063      	str	r3, [r4, #4]
 8003ff8:	9b05      	ldr	r3, [sp, #20]
 8003ffa:	6861      	ldr	r1, [r4, #4]
 8003ffc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004000:	2300      	movs	r3, #0
 8004002:	9303      	str	r3, [sp, #12]
 8004004:	ab0a      	add	r3, sp, #40	; 0x28
 8004006:	e9cd b301 	strd	fp, r3, [sp, #4]
 800400a:	ab09      	add	r3, sp, #36	; 0x24
 800400c:	ec49 8b10 	vmov	d0, r8, r9
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	6022      	str	r2, [r4, #0]
 8004014:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004018:	4628      	mov	r0, r5
 800401a:	f7ff fecd 	bl	8003db8 <__cvt>
 800401e:	9b06      	ldr	r3, [sp, #24]
 8004020:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004022:	2b47      	cmp	r3, #71	; 0x47
 8004024:	4680      	mov	r8, r0
 8004026:	d108      	bne.n	800403a <_printf_float+0x142>
 8004028:	1cc8      	adds	r0, r1, #3
 800402a:	db02      	blt.n	8004032 <_printf_float+0x13a>
 800402c:	6863      	ldr	r3, [r4, #4]
 800402e:	4299      	cmp	r1, r3
 8004030:	dd41      	ble.n	80040b6 <_printf_float+0x1be>
 8004032:	f1ab 0b02 	sub.w	fp, fp, #2
 8004036:	fa5f fb8b 	uxtb.w	fp, fp
 800403a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800403e:	d820      	bhi.n	8004082 <_printf_float+0x18a>
 8004040:	3901      	subs	r1, #1
 8004042:	465a      	mov	r2, fp
 8004044:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004048:	9109      	str	r1, [sp, #36]	; 0x24
 800404a:	f7ff ff17 	bl	8003e7c <__exponent>
 800404e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004050:	1813      	adds	r3, r2, r0
 8004052:	2a01      	cmp	r2, #1
 8004054:	4681      	mov	r9, r0
 8004056:	6123      	str	r3, [r4, #16]
 8004058:	dc02      	bgt.n	8004060 <_printf_float+0x168>
 800405a:	6822      	ldr	r2, [r4, #0]
 800405c:	07d2      	lsls	r2, r2, #31
 800405e:	d501      	bpl.n	8004064 <_printf_float+0x16c>
 8004060:	3301      	adds	r3, #1
 8004062:	6123      	str	r3, [r4, #16]
 8004064:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004068:	2b00      	cmp	r3, #0
 800406a:	d09c      	beq.n	8003fa6 <_printf_float+0xae>
 800406c:	232d      	movs	r3, #45	; 0x2d
 800406e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004072:	e798      	b.n	8003fa6 <_printf_float+0xae>
 8004074:	9a06      	ldr	r2, [sp, #24]
 8004076:	2a47      	cmp	r2, #71	; 0x47
 8004078:	d1be      	bne.n	8003ff8 <_printf_float+0x100>
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1bc      	bne.n	8003ff8 <_printf_float+0x100>
 800407e:	2301      	movs	r3, #1
 8004080:	e7b9      	b.n	8003ff6 <_printf_float+0xfe>
 8004082:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004086:	d118      	bne.n	80040ba <_printf_float+0x1c2>
 8004088:	2900      	cmp	r1, #0
 800408a:	6863      	ldr	r3, [r4, #4]
 800408c:	dd0b      	ble.n	80040a6 <_printf_float+0x1ae>
 800408e:	6121      	str	r1, [r4, #16]
 8004090:	b913      	cbnz	r3, 8004098 <_printf_float+0x1a0>
 8004092:	6822      	ldr	r2, [r4, #0]
 8004094:	07d0      	lsls	r0, r2, #31
 8004096:	d502      	bpl.n	800409e <_printf_float+0x1a6>
 8004098:	3301      	adds	r3, #1
 800409a:	440b      	add	r3, r1
 800409c:	6123      	str	r3, [r4, #16]
 800409e:	65a1      	str	r1, [r4, #88]	; 0x58
 80040a0:	f04f 0900 	mov.w	r9, #0
 80040a4:	e7de      	b.n	8004064 <_printf_float+0x16c>
 80040a6:	b913      	cbnz	r3, 80040ae <_printf_float+0x1b6>
 80040a8:	6822      	ldr	r2, [r4, #0]
 80040aa:	07d2      	lsls	r2, r2, #31
 80040ac:	d501      	bpl.n	80040b2 <_printf_float+0x1ba>
 80040ae:	3302      	adds	r3, #2
 80040b0:	e7f4      	b.n	800409c <_printf_float+0x1a4>
 80040b2:	2301      	movs	r3, #1
 80040b4:	e7f2      	b.n	800409c <_printf_float+0x1a4>
 80040b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80040ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040bc:	4299      	cmp	r1, r3
 80040be:	db05      	blt.n	80040cc <_printf_float+0x1d4>
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	6121      	str	r1, [r4, #16]
 80040c4:	07d8      	lsls	r0, r3, #31
 80040c6:	d5ea      	bpl.n	800409e <_printf_float+0x1a6>
 80040c8:	1c4b      	adds	r3, r1, #1
 80040ca:	e7e7      	b.n	800409c <_printf_float+0x1a4>
 80040cc:	2900      	cmp	r1, #0
 80040ce:	bfd4      	ite	le
 80040d0:	f1c1 0202 	rsble	r2, r1, #2
 80040d4:	2201      	movgt	r2, #1
 80040d6:	4413      	add	r3, r2
 80040d8:	e7e0      	b.n	800409c <_printf_float+0x1a4>
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	055a      	lsls	r2, r3, #21
 80040de:	d407      	bmi.n	80040f0 <_printf_float+0x1f8>
 80040e0:	6923      	ldr	r3, [r4, #16]
 80040e2:	4642      	mov	r2, r8
 80040e4:	4631      	mov	r1, r6
 80040e6:	4628      	mov	r0, r5
 80040e8:	47b8      	blx	r7
 80040ea:	3001      	adds	r0, #1
 80040ec:	d12c      	bne.n	8004148 <_printf_float+0x250>
 80040ee:	e764      	b.n	8003fba <_printf_float+0xc2>
 80040f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80040f4:	f240 80e0 	bls.w	80042b8 <_printf_float+0x3c0>
 80040f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80040fc:	2200      	movs	r2, #0
 80040fe:	2300      	movs	r3, #0
 8004100:	f7fc fcea 	bl	8000ad8 <__aeabi_dcmpeq>
 8004104:	2800      	cmp	r0, #0
 8004106:	d034      	beq.n	8004172 <_printf_float+0x27a>
 8004108:	4a37      	ldr	r2, [pc, #220]	; (80041e8 <_printf_float+0x2f0>)
 800410a:	2301      	movs	r3, #1
 800410c:	4631      	mov	r1, r6
 800410e:	4628      	mov	r0, r5
 8004110:	47b8      	blx	r7
 8004112:	3001      	adds	r0, #1
 8004114:	f43f af51 	beq.w	8003fba <_printf_float+0xc2>
 8004118:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800411c:	429a      	cmp	r2, r3
 800411e:	db02      	blt.n	8004126 <_printf_float+0x22e>
 8004120:	6823      	ldr	r3, [r4, #0]
 8004122:	07d8      	lsls	r0, r3, #31
 8004124:	d510      	bpl.n	8004148 <_printf_float+0x250>
 8004126:	ee18 3a10 	vmov	r3, s16
 800412a:	4652      	mov	r2, sl
 800412c:	4631      	mov	r1, r6
 800412e:	4628      	mov	r0, r5
 8004130:	47b8      	blx	r7
 8004132:	3001      	adds	r0, #1
 8004134:	f43f af41 	beq.w	8003fba <_printf_float+0xc2>
 8004138:	f04f 0800 	mov.w	r8, #0
 800413c:	f104 091a 	add.w	r9, r4, #26
 8004140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004142:	3b01      	subs	r3, #1
 8004144:	4543      	cmp	r3, r8
 8004146:	dc09      	bgt.n	800415c <_printf_float+0x264>
 8004148:	6823      	ldr	r3, [r4, #0]
 800414a:	079b      	lsls	r3, r3, #30
 800414c:	f100 8105 	bmi.w	800435a <_printf_float+0x462>
 8004150:	68e0      	ldr	r0, [r4, #12]
 8004152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004154:	4298      	cmp	r0, r3
 8004156:	bfb8      	it	lt
 8004158:	4618      	movlt	r0, r3
 800415a:	e730      	b.n	8003fbe <_printf_float+0xc6>
 800415c:	2301      	movs	r3, #1
 800415e:	464a      	mov	r2, r9
 8004160:	4631      	mov	r1, r6
 8004162:	4628      	mov	r0, r5
 8004164:	47b8      	blx	r7
 8004166:	3001      	adds	r0, #1
 8004168:	f43f af27 	beq.w	8003fba <_printf_float+0xc2>
 800416c:	f108 0801 	add.w	r8, r8, #1
 8004170:	e7e6      	b.n	8004140 <_printf_float+0x248>
 8004172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004174:	2b00      	cmp	r3, #0
 8004176:	dc39      	bgt.n	80041ec <_printf_float+0x2f4>
 8004178:	4a1b      	ldr	r2, [pc, #108]	; (80041e8 <_printf_float+0x2f0>)
 800417a:	2301      	movs	r3, #1
 800417c:	4631      	mov	r1, r6
 800417e:	4628      	mov	r0, r5
 8004180:	47b8      	blx	r7
 8004182:	3001      	adds	r0, #1
 8004184:	f43f af19 	beq.w	8003fba <_printf_float+0xc2>
 8004188:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800418c:	4313      	orrs	r3, r2
 800418e:	d102      	bne.n	8004196 <_printf_float+0x29e>
 8004190:	6823      	ldr	r3, [r4, #0]
 8004192:	07d9      	lsls	r1, r3, #31
 8004194:	d5d8      	bpl.n	8004148 <_printf_float+0x250>
 8004196:	ee18 3a10 	vmov	r3, s16
 800419a:	4652      	mov	r2, sl
 800419c:	4631      	mov	r1, r6
 800419e:	4628      	mov	r0, r5
 80041a0:	47b8      	blx	r7
 80041a2:	3001      	adds	r0, #1
 80041a4:	f43f af09 	beq.w	8003fba <_printf_float+0xc2>
 80041a8:	f04f 0900 	mov.w	r9, #0
 80041ac:	f104 0a1a 	add.w	sl, r4, #26
 80041b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041b2:	425b      	negs	r3, r3
 80041b4:	454b      	cmp	r3, r9
 80041b6:	dc01      	bgt.n	80041bc <_printf_float+0x2c4>
 80041b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041ba:	e792      	b.n	80040e2 <_printf_float+0x1ea>
 80041bc:	2301      	movs	r3, #1
 80041be:	4652      	mov	r2, sl
 80041c0:	4631      	mov	r1, r6
 80041c2:	4628      	mov	r0, r5
 80041c4:	47b8      	blx	r7
 80041c6:	3001      	adds	r0, #1
 80041c8:	f43f aef7 	beq.w	8003fba <_printf_float+0xc2>
 80041cc:	f109 0901 	add.w	r9, r9, #1
 80041d0:	e7ee      	b.n	80041b0 <_printf_float+0x2b8>
 80041d2:	bf00      	nop
 80041d4:	7fefffff 	.word	0x7fefffff
 80041d8:	08008658 	.word	0x08008658
 80041dc:	0800865c 	.word	0x0800865c
 80041e0:	08008664 	.word	0x08008664
 80041e4:	08008660 	.word	0x08008660
 80041e8:	08008668 	.word	0x08008668
 80041ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80041ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041f0:	429a      	cmp	r2, r3
 80041f2:	bfa8      	it	ge
 80041f4:	461a      	movge	r2, r3
 80041f6:	2a00      	cmp	r2, #0
 80041f8:	4691      	mov	r9, r2
 80041fa:	dc37      	bgt.n	800426c <_printf_float+0x374>
 80041fc:	f04f 0b00 	mov.w	fp, #0
 8004200:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004204:	f104 021a 	add.w	r2, r4, #26
 8004208:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800420a:	9305      	str	r3, [sp, #20]
 800420c:	eba3 0309 	sub.w	r3, r3, r9
 8004210:	455b      	cmp	r3, fp
 8004212:	dc33      	bgt.n	800427c <_printf_float+0x384>
 8004214:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004218:	429a      	cmp	r2, r3
 800421a:	db3b      	blt.n	8004294 <_printf_float+0x39c>
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	07da      	lsls	r2, r3, #31
 8004220:	d438      	bmi.n	8004294 <_printf_float+0x39c>
 8004222:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004224:	9b05      	ldr	r3, [sp, #20]
 8004226:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	eba2 0901 	sub.w	r9, r2, r1
 800422e:	4599      	cmp	r9, r3
 8004230:	bfa8      	it	ge
 8004232:	4699      	movge	r9, r3
 8004234:	f1b9 0f00 	cmp.w	r9, #0
 8004238:	dc35      	bgt.n	80042a6 <_printf_float+0x3ae>
 800423a:	f04f 0800 	mov.w	r8, #0
 800423e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004242:	f104 0a1a 	add.w	sl, r4, #26
 8004246:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800424a:	1a9b      	subs	r3, r3, r2
 800424c:	eba3 0309 	sub.w	r3, r3, r9
 8004250:	4543      	cmp	r3, r8
 8004252:	f77f af79 	ble.w	8004148 <_printf_float+0x250>
 8004256:	2301      	movs	r3, #1
 8004258:	4652      	mov	r2, sl
 800425a:	4631      	mov	r1, r6
 800425c:	4628      	mov	r0, r5
 800425e:	47b8      	blx	r7
 8004260:	3001      	adds	r0, #1
 8004262:	f43f aeaa 	beq.w	8003fba <_printf_float+0xc2>
 8004266:	f108 0801 	add.w	r8, r8, #1
 800426a:	e7ec      	b.n	8004246 <_printf_float+0x34e>
 800426c:	4613      	mov	r3, r2
 800426e:	4631      	mov	r1, r6
 8004270:	4642      	mov	r2, r8
 8004272:	4628      	mov	r0, r5
 8004274:	47b8      	blx	r7
 8004276:	3001      	adds	r0, #1
 8004278:	d1c0      	bne.n	80041fc <_printf_float+0x304>
 800427a:	e69e      	b.n	8003fba <_printf_float+0xc2>
 800427c:	2301      	movs	r3, #1
 800427e:	4631      	mov	r1, r6
 8004280:	4628      	mov	r0, r5
 8004282:	9205      	str	r2, [sp, #20]
 8004284:	47b8      	blx	r7
 8004286:	3001      	adds	r0, #1
 8004288:	f43f ae97 	beq.w	8003fba <_printf_float+0xc2>
 800428c:	9a05      	ldr	r2, [sp, #20]
 800428e:	f10b 0b01 	add.w	fp, fp, #1
 8004292:	e7b9      	b.n	8004208 <_printf_float+0x310>
 8004294:	ee18 3a10 	vmov	r3, s16
 8004298:	4652      	mov	r2, sl
 800429a:	4631      	mov	r1, r6
 800429c:	4628      	mov	r0, r5
 800429e:	47b8      	blx	r7
 80042a0:	3001      	adds	r0, #1
 80042a2:	d1be      	bne.n	8004222 <_printf_float+0x32a>
 80042a4:	e689      	b.n	8003fba <_printf_float+0xc2>
 80042a6:	9a05      	ldr	r2, [sp, #20]
 80042a8:	464b      	mov	r3, r9
 80042aa:	4442      	add	r2, r8
 80042ac:	4631      	mov	r1, r6
 80042ae:	4628      	mov	r0, r5
 80042b0:	47b8      	blx	r7
 80042b2:	3001      	adds	r0, #1
 80042b4:	d1c1      	bne.n	800423a <_printf_float+0x342>
 80042b6:	e680      	b.n	8003fba <_printf_float+0xc2>
 80042b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80042ba:	2a01      	cmp	r2, #1
 80042bc:	dc01      	bgt.n	80042c2 <_printf_float+0x3ca>
 80042be:	07db      	lsls	r3, r3, #31
 80042c0:	d538      	bpl.n	8004334 <_printf_float+0x43c>
 80042c2:	2301      	movs	r3, #1
 80042c4:	4642      	mov	r2, r8
 80042c6:	4631      	mov	r1, r6
 80042c8:	4628      	mov	r0, r5
 80042ca:	47b8      	blx	r7
 80042cc:	3001      	adds	r0, #1
 80042ce:	f43f ae74 	beq.w	8003fba <_printf_float+0xc2>
 80042d2:	ee18 3a10 	vmov	r3, s16
 80042d6:	4652      	mov	r2, sl
 80042d8:	4631      	mov	r1, r6
 80042da:	4628      	mov	r0, r5
 80042dc:	47b8      	blx	r7
 80042de:	3001      	adds	r0, #1
 80042e0:	f43f ae6b 	beq.w	8003fba <_printf_float+0xc2>
 80042e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80042e8:	2200      	movs	r2, #0
 80042ea:	2300      	movs	r3, #0
 80042ec:	f7fc fbf4 	bl	8000ad8 <__aeabi_dcmpeq>
 80042f0:	b9d8      	cbnz	r0, 800432a <_printf_float+0x432>
 80042f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042f4:	f108 0201 	add.w	r2, r8, #1
 80042f8:	3b01      	subs	r3, #1
 80042fa:	4631      	mov	r1, r6
 80042fc:	4628      	mov	r0, r5
 80042fe:	47b8      	blx	r7
 8004300:	3001      	adds	r0, #1
 8004302:	d10e      	bne.n	8004322 <_printf_float+0x42a>
 8004304:	e659      	b.n	8003fba <_printf_float+0xc2>
 8004306:	2301      	movs	r3, #1
 8004308:	4652      	mov	r2, sl
 800430a:	4631      	mov	r1, r6
 800430c:	4628      	mov	r0, r5
 800430e:	47b8      	blx	r7
 8004310:	3001      	adds	r0, #1
 8004312:	f43f ae52 	beq.w	8003fba <_printf_float+0xc2>
 8004316:	f108 0801 	add.w	r8, r8, #1
 800431a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800431c:	3b01      	subs	r3, #1
 800431e:	4543      	cmp	r3, r8
 8004320:	dcf1      	bgt.n	8004306 <_printf_float+0x40e>
 8004322:	464b      	mov	r3, r9
 8004324:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004328:	e6dc      	b.n	80040e4 <_printf_float+0x1ec>
 800432a:	f04f 0800 	mov.w	r8, #0
 800432e:	f104 0a1a 	add.w	sl, r4, #26
 8004332:	e7f2      	b.n	800431a <_printf_float+0x422>
 8004334:	2301      	movs	r3, #1
 8004336:	4642      	mov	r2, r8
 8004338:	e7df      	b.n	80042fa <_printf_float+0x402>
 800433a:	2301      	movs	r3, #1
 800433c:	464a      	mov	r2, r9
 800433e:	4631      	mov	r1, r6
 8004340:	4628      	mov	r0, r5
 8004342:	47b8      	blx	r7
 8004344:	3001      	adds	r0, #1
 8004346:	f43f ae38 	beq.w	8003fba <_printf_float+0xc2>
 800434a:	f108 0801 	add.w	r8, r8, #1
 800434e:	68e3      	ldr	r3, [r4, #12]
 8004350:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004352:	1a5b      	subs	r3, r3, r1
 8004354:	4543      	cmp	r3, r8
 8004356:	dcf0      	bgt.n	800433a <_printf_float+0x442>
 8004358:	e6fa      	b.n	8004150 <_printf_float+0x258>
 800435a:	f04f 0800 	mov.w	r8, #0
 800435e:	f104 0919 	add.w	r9, r4, #25
 8004362:	e7f4      	b.n	800434e <_printf_float+0x456>

08004364 <_printf_common>:
 8004364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004368:	4616      	mov	r6, r2
 800436a:	4699      	mov	r9, r3
 800436c:	688a      	ldr	r2, [r1, #8]
 800436e:	690b      	ldr	r3, [r1, #16]
 8004370:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004374:	4293      	cmp	r3, r2
 8004376:	bfb8      	it	lt
 8004378:	4613      	movlt	r3, r2
 800437a:	6033      	str	r3, [r6, #0]
 800437c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004380:	4607      	mov	r7, r0
 8004382:	460c      	mov	r4, r1
 8004384:	b10a      	cbz	r2, 800438a <_printf_common+0x26>
 8004386:	3301      	adds	r3, #1
 8004388:	6033      	str	r3, [r6, #0]
 800438a:	6823      	ldr	r3, [r4, #0]
 800438c:	0699      	lsls	r1, r3, #26
 800438e:	bf42      	ittt	mi
 8004390:	6833      	ldrmi	r3, [r6, #0]
 8004392:	3302      	addmi	r3, #2
 8004394:	6033      	strmi	r3, [r6, #0]
 8004396:	6825      	ldr	r5, [r4, #0]
 8004398:	f015 0506 	ands.w	r5, r5, #6
 800439c:	d106      	bne.n	80043ac <_printf_common+0x48>
 800439e:	f104 0a19 	add.w	sl, r4, #25
 80043a2:	68e3      	ldr	r3, [r4, #12]
 80043a4:	6832      	ldr	r2, [r6, #0]
 80043a6:	1a9b      	subs	r3, r3, r2
 80043a8:	42ab      	cmp	r3, r5
 80043aa:	dc26      	bgt.n	80043fa <_printf_common+0x96>
 80043ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043b0:	1e13      	subs	r3, r2, #0
 80043b2:	6822      	ldr	r2, [r4, #0]
 80043b4:	bf18      	it	ne
 80043b6:	2301      	movne	r3, #1
 80043b8:	0692      	lsls	r2, r2, #26
 80043ba:	d42b      	bmi.n	8004414 <_printf_common+0xb0>
 80043bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043c0:	4649      	mov	r1, r9
 80043c2:	4638      	mov	r0, r7
 80043c4:	47c0      	blx	r8
 80043c6:	3001      	adds	r0, #1
 80043c8:	d01e      	beq.n	8004408 <_printf_common+0xa4>
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	68e5      	ldr	r5, [r4, #12]
 80043ce:	6832      	ldr	r2, [r6, #0]
 80043d0:	f003 0306 	and.w	r3, r3, #6
 80043d4:	2b04      	cmp	r3, #4
 80043d6:	bf08      	it	eq
 80043d8:	1aad      	subeq	r5, r5, r2
 80043da:	68a3      	ldr	r3, [r4, #8]
 80043dc:	6922      	ldr	r2, [r4, #16]
 80043de:	bf0c      	ite	eq
 80043e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043e4:	2500      	movne	r5, #0
 80043e6:	4293      	cmp	r3, r2
 80043e8:	bfc4      	itt	gt
 80043ea:	1a9b      	subgt	r3, r3, r2
 80043ec:	18ed      	addgt	r5, r5, r3
 80043ee:	2600      	movs	r6, #0
 80043f0:	341a      	adds	r4, #26
 80043f2:	42b5      	cmp	r5, r6
 80043f4:	d11a      	bne.n	800442c <_printf_common+0xc8>
 80043f6:	2000      	movs	r0, #0
 80043f8:	e008      	b.n	800440c <_printf_common+0xa8>
 80043fa:	2301      	movs	r3, #1
 80043fc:	4652      	mov	r2, sl
 80043fe:	4649      	mov	r1, r9
 8004400:	4638      	mov	r0, r7
 8004402:	47c0      	blx	r8
 8004404:	3001      	adds	r0, #1
 8004406:	d103      	bne.n	8004410 <_printf_common+0xac>
 8004408:	f04f 30ff 	mov.w	r0, #4294967295
 800440c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004410:	3501      	adds	r5, #1
 8004412:	e7c6      	b.n	80043a2 <_printf_common+0x3e>
 8004414:	18e1      	adds	r1, r4, r3
 8004416:	1c5a      	adds	r2, r3, #1
 8004418:	2030      	movs	r0, #48	; 0x30
 800441a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800441e:	4422      	add	r2, r4
 8004420:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004424:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004428:	3302      	adds	r3, #2
 800442a:	e7c7      	b.n	80043bc <_printf_common+0x58>
 800442c:	2301      	movs	r3, #1
 800442e:	4622      	mov	r2, r4
 8004430:	4649      	mov	r1, r9
 8004432:	4638      	mov	r0, r7
 8004434:	47c0      	blx	r8
 8004436:	3001      	adds	r0, #1
 8004438:	d0e6      	beq.n	8004408 <_printf_common+0xa4>
 800443a:	3601      	adds	r6, #1
 800443c:	e7d9      	b.n	80043f2 <_printf_common+0x8e>
	...

08004440 <_printf_i>:
 8004440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004444:	460c      	mov	r4, r1
 8004446:	4691      	mov	r9, r2
 8004448:	7e27      	ldrb	r7, [r4, #24]
 800444a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800444c:	2f78      	cmp	r7, #120	; 0x78
 800444e:	4680      	mov	r8, r0
 8004450:	469a      	mov	sl, r3
 8004452:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004456:	d807      	bhi.n	8004468 <_printf_i+0x28>
 8004458:	2f62      	cmp	r7, #98	; 0x62
 800445a:	d80a      	bhi.n	8004472 <_printf_i+0x32>
 800445c:	2f00      	cmp	r7, #0
 800445e:	f000 80d8 	beq.w	8004612 <_printf_i+0x1d2>
 8004462:	2f58      	cmp	r7, #88	; 0x58
 8004464:	f000 80a3 	beq.w	80045ae <_printf_i+0x16e>
 8004468:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800446c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004470:	e03a      	b.n	80044e8 <_printf_i+0xa8>
 8004472:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004476:	2b15      	cmp	r3, #21
 8004478:	d8f6      	bhi.n	8004468 <_printf_i+0x28>
 800447a:	a001      	add	r0, pc, #4	; (adr r0, 8004480 <_printf_i+0x40>)
 800447c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004480:	080044d9 	.word	0x080044d9
 8004484:	080044ed 	.word	0x080044ed
 8004488:	08004469 	.word	0x08004469
 800448c:	08004469 	.word	0x08004469
 8004490:	08004469 	.word	0x08004469
 8004494:	08004469 	.word	0x08004469
 8004498:	080044ed 	.word	0x080044ed
 800449c:	08004469 	.word	0x08004469
 80044a0:	08004469 	.word	0x08004469
 80044a4:	08004469 	.word	0x08004469
 80044a8:	08004469 	.word	0x08004469
 80044ac:	080045f9 	.word	0x080045f9
 80044b0:	0800451d 	.word	0x0800451d
 80044b4:	080045db 	.word	0x080045db
 80044b8:	08004469 	.word	0x08004469
 80044bc:	08004469 	.word	0x08004469
 80044c0:	0800461b 	.word	0x0800461b
 80044c4:	08004469 	.word	0x08004469
 80044c8:	0800451d 	.word	0x0800451d
 80044cc:	08004469 	.word	0x08004469
 80044d0:	08004469 	.word	0x08004469
 80044d4:	080045e3 	.word	0x080045e3
 80044d8:	680b      	ldr	r3, [r1, #0]
 80044da:	1d1a      	adds	r2, r3, #4
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	600a      	str	r2, [r1, #0]
 80044e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80044e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044e8:	2301      	movs	r3, #1
 80044ea:	e0a3      	b.n	8004634 <_printf_i+0x1f4>
 80044ec:	6825      	ldr	r5, [r4, #0]
 80044ee:	6808      	ldr	r0, [r1, #0]
 80044f0:	062e      	lsls	r6, r5, #24
 80044f2:	f100 0304 	add.w	r3, r0, #4
 80044f6:	d50a      	bpl.n	800450e <_printf_i+0xce>
 80044f8:	6805      	ldr	r5, [r0, #0]
 80044fa:	600b      	str	r3, [r1, #0]
 80044fc:	2d00      	cmp	r5, #0
 80044fe:	da03      	bge.n	8004508 <_printf_i+0xc8>
 8004500:	232d      	movs	r3, #45	; 0x2d
 8004502:	426d      	negs	r5, r5
 8004504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004508:	485e      	ldr	r0, [pc, #376]	; (8004684 <_printf_i+0x244>)
 800450a:	230a      	movs	r3, #10
 800450c:	e019      	b.n	8004542 <_printf_i+0x102>
 800450e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004512:	6805      	ldr	r5, [r0, #0]
 8004514:	600b      	str	r3, [r1, #0]
 8004516:	bf18      	it	ne
 8004518:	b22d      	sxthne	r5, r5
 800451a:	e7ef      	b.n	80044fc <_printf_i+0xbc>
 800451c:	680b      	ldr	r3, [r1, #0]
 800451e:	6825      	ldr	r5, [r4, #0]
 8004520:	1d18      	adds	r0, r3, #4
 8004522:	6008      	str	r0, [r1, #0]
 8004524:	0628      	lsls	r0, r5, #24
 8004526:	d501      	bpl.n	800452c <_printf_i+0xec>
 8004528:	681d      	ldr	r5, [r3, #0]
 800452a:	e002      	b.n	8004532 <_printf_i+0xf2>
 800452c:	0669      	lsls	r1, r5, #25
 800452e:	d5fb      	bpl.n	8004528 <_printf_i+0xe8>
 8004530:	881d      	ldrh	r5, [r3, #0]
 8004532:	4854      	ldr	r0, [pc, #336]	; (8004684 <_printf_i+0x244>)
 8004534:	2f6f      	cmp	r7, #111	; 0x6f
 8004536:	bf0c      	ite	eq
 8004538:	2308      	moveq	r3, #8
 800453a:	230a      	movne	r3, #10
 800453c:	2100      	movs	r1, #0
 800453e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004542:	6866      	ldr	r6, [r4, #4]
 8004544:	60a6      	str	r6, [r4, #8]
 8004546:	2e00      	cmp	r6, #0
 8004548:	bfa2      	ittt	ge
 800454a:	6821      	ldrge	r1, [r4, #0]
 800454c:	f021 0104 	bicge.w	r1, r1, #4
 8004550:	6021      	strge	r1, [r4, #0]
 8004552:	b90d      	cbnz	r5, 8004558 <_printf_i+0x118>
 8004554:	2e00      	cmp	r6, #0
 8004556:	d04d      	beq.n	80045f4 <_printf_i+0x1b4>
 8004558:	4616      	mov	r6, r2
 800455a:	fbb5 f1f3 	udiv	r1, r5, r3
 800455e:	fb03 5711 	mls	r7, r3, r1, r5
 8004562:	5dc7      	ldrb	r7, [r0, r7]
 8004564:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004568:	462f      	mov	r7, r5
 800456a:	42bb      	cmp	r3, r7
 800456c:	460d      	mov	r5, r1
 800456e:	d9f4      	bls.n	800455a <_printf_i+0x11a>
 8004570:	2b08      	cmp	r3, #8
 8004572:	d10b      	bne.n	800458c <_printf_i+0x14c>
 8004574:	6823      	ldr	r3, [r4, #0]
 8004576:	07df      	lsls	r7, r3, #31
 8004578:	d508      	bpl.n	800458c <_printf_i+0x14c>
 800457a:	6923      	ldr	r3, [r4, #16]
 800457c:	6861      	ldr	r1, [r4, #4]
 800457e:	4299      	cmp	r1, r3
 8004580:	bfde      	ittt	le
 8004582:	2330      	movle	r3, #48	; 0x30
 8004584:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004588:	f106 36ff 	addle.w	r6, r6, #4294967295
 800458c:	1b92      	subs	r2, r2, r6
 800458e:	6122      	str	r2, [r4, #16]
 8004590:	f8cd a000 	str.w	sl, [sp]
 8004594:	464b      	mov	r3, r9
 8004596:	aa03      	add	r2, sp, #12
 8004598:	4621      	mov	r1, r4
 800459a:	4640      	mov	r0, r8
 800459c:	f7ff fee2 	bl	8004364 <_printf_common>
 80045a0:	3001      	adds	r0, #1
 80045a2:	d14c      	bne.n	800463e <_printf_i+0x1fe>
 80045a4:	f04f 30ff 	mov.w	r0, #4294967295
 80045a8:	b004      	add	sp, #16
 80045aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045ae:	4835      	ldr	r0, [pc, #212]	; (8004684 <_printf_i+0x244>)
 80045b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	680e      	ldr	r6, [r1, #0]
 80045b8:	061f      	lsls	r7, r3, #24
 80045ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80045be:	600e      	str	r6, [r1, #0]
 80045c0:	d514      	bpl.n	80045ec <_printf_i+0x1ac>
 80045c2:	07d9      	lsls	r1, r3, #31
 80045c4:	bf44      	itt	mi
 80045c6:	f043 0320 	orrmi.w	r3, r3, #32
 80045ca:	6023      	strmi	r3, [r4, #0]
 80045cc:	b91d      	cbnz	r5, 80045d6 <_printf_i+0x196>
 80045ce:	6823      	ldr	r3, [r4, #0]
 80045d0:	f023 0320 	bic.w	r3, r3, #32
 80045d4:	6023      	str	r3, [r4, #0]
 80045d6:	2310      	movs	r3, #16
 80045d8:	e7b0      	b.n	800453c <_printf_i+0xfc>
 80045da:	6823      	ldr	r3, [r4, #0]
 80045dc:	f043 0320 	orr.w	r3, r3, #32
 80045e0:	6023      	str	r3, [r4, #0]
 80045e2:	2378      	movs	r3, #120	; 0x78
 80045e4:	4828      	ldr	r0, [pc, #160]	; (8004688 <_printf_i+0x248>)
 80045e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045ea:	e7e3      	b.n	80045b4 <_printf_i+0x174>
 80045ec:	065e      	lsls	r6, r3, #25
 80045ee:	bf48      	it	mi
 80045f0:	b2ad      	uxthmi	r5, r5
 80045f2:	e7e6      	b.n	80045c2 <_printf_i+0x182>
 80045f4:	4616      	mov	r6, r2
 80045f6:	e7bb      	b.n	8004570 <_printf_i+0x130>
 80045f8:	680b      	ldr	r3, [r1, #0]
 80045fa:	6826      	ldr	r6, [r4, #0]
 80045fc:	6960      	ldr	r0, [r4, #20]
 80045fe:	1d1d      	adds	r5, r3, #4
 8004600:	600d      	str	r5, [r1, #0]
 8004602:	0635      	lsls	r5, r6, #24
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	d501      	bpl.n	800460c <_printf_i+0x1cc>
 8004608:	6018      	str	r0, [r3, #0]
 800460a:	e002      	b.n	8004612 <_printf_i+0x1d2>
 800460c:	0671      	lsls	r1, r6, #25
 800460e:	d5fb      	bpl.n	8004608 <_printf_i+0x1c8>
 8004610:	8018      	strh	r0, [r3, #0]
 8004612:	2300      	movs	r3, #0
 8004614:	6123      	str	r3, [r4, #16]
 8004616:	4616      	mov	r6, r2
 8004618:	e7ba      	b.n	8004590 <_printf_i+0x150>
 800461a:	680b      	ldr	r3, [r1, #0]
 800461c:	1d1a      	adds	r2, r3, #4
 800461e:	600a      	str	r2, [r1, #0]
 8004620:	681e      	ldr	r6, [r3, #0]
 8004622:	6862      	ldr	r2, [r4, #4]
 8004624:	2100      	movs	r1, #0
 8004626:	4630      	mov	r0, r6
 8004628:	f7fb fde2 	bl	80001f0 <memchr>
 800462c:	b108      	cbz	r0, 8004632 <_printf_i+0x1f2>
 800462e:	1b80      	subs	r0, r0, r6
 8004630:	6060      	str	r0, [r4, #4]
 8004632:	6863      	ldr	r3, [r4, #4]
 8004634:	6123      	str	r3, [r4, #16]
 8004636:	2300      	movs	r3, #0
 8004638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800463c:	e7a8      	b.n	8004590 <_printf_i+0x150>
 800463e:	6923      	ldr	r3, [r4, #16]
 8004640:	4632      	mov	r2, r6
 8004642:	4649      	mov	r1, r9
 8004644:	4640      	mov	r0, r8
 8004646:	47d0      	blx	sl
 8004648:	3001      	adds	r0, #1
 800464a:	d0ab      	beq.n	80045a4 <_printf_i+0x164>
 800464c:	6823      	ldr	r3, [r4, #0]
 800464e:	079b      	lsls	r3, r3, #30
 8004650:	d413      	bmi.n	800467a <_printf_i+0x23a>
 8004652:	68e0      	ldr	r0, [r4, #12]
 8004654:	9b03      	ldr	r3, [sp, #12]
 8004656:	4298      	cmp	r0, r3
 8004658:	bfb8      	it	lt
 800465a:	4618      	movlt	r0, r3
 800465c:	e7a4      	b.n	80045a8 <_printf_i+0x168>
 800465e:	2301      	movs	r3, #1
 8004660:	4632      	mov	r2, r6
 8004662:	4649      	mov	r1, r9
 8004664:	4640      	mov	r0, r8
 8004666:	47d0      	blx	sl
 8004668:	3001      	adds	r0, #1
 800466a:	d09b      	beq.n	80045a4 <_printf_i+0x164>
 800466c:	3501      	adds	r5, #1
 800466e:	68e3      	ldr	r3, [r4, #12]
 8004670:	9903      	ldr	r1, [sp, #12]
 8004672:	1a5b      	subs	r3, r3, r1
 8004674:	42ab      	cmp	r3, r5
 8004676:	dcf2      	bgt.n	800465e <_printf_i+0x21e>
 8004678:	e7eb      	b.n	8004652 <_printf_i+0x212>
 800467a:	2500      	movs	r5, #0
 800467c:	f104 0619 	add.w	r6, r4, #25
 8004680:	e7f5      	b.n	800466e <_printf_i+0x22e>
 8004682:	bf00      	nop
 8004684:	0800866a 	.word	0x0800866a
 8004688:	0800867b 	.word	0x0800867b

0800468c <_scanf_float>:
 800468c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004690:	b087      	sub	sp, #28
 8004692:	4617      	mov	r7, r2
 8004694:	9303      	str	r3, [sp, #12]
 8004696:	688b      	ldr	r3, [r1, #8]
 8004698:	1e5a      	subs	r2, r3, #1
 800469a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800469e:	bf83      	ittte	hi
 80046a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80046a4:	195b      	addhi	r3, r3, r5
 80046a6:	9302      	strhi	r3, [sp, #8]
 80046a8:	2300      	movls	r3, #0
 80046aa:	bf86      	itte	hi
 80046ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 80046b0:	608b      	strhi	r3, [r1, #8]
 80046b2:	9302      	strls	r3, [sp, #8]
 80046b4:	680b      	ldr	r3, [r1, #0]
 80046b6:	468b      	mov	fp, r1
 80046b8:	2500      	movs	r5, #0
 80046ba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80046be:	f84b 3b1c 	str.w	r3, [fp], #28
 80046c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80046c6:	4680      	mov	r8, r0
 80046c8:	460c      	mov	r4, r1
 80046ca:	465e      	mov	r6, fp
 80046cc:	46aa      	mov	sl, r5
 80046ce:	46a9      	mov	r9, r5
 80046d0:	9501      	str	r5, [sp, #4]
 80046d2:	68a2      	ldr	r2, [r4, #8]
 80046d4:	b152      	cbz	r2, 80046ec <_scanf_float+0x60>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	2b4e      	cmp	r3, #78	; 0x4e
 80046dc:	d864      	bhi.n	80047a8 <_scanf_float+0x11c>
 80046de:	2b40      	cmp	r3, #64	; 0x40
 80046e0:	d83c      	bhi.n	800475c <_scanf_float+0xd0>
 80046e2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80046e6:	b2c8      	uxtb	r0, r1
 80046e8:	280e      	cmp	r0, #14
 80046ea:	d93a      	bls.n	8004762 <_scanf_float+0xd6>
 80046ec:	f1b9 0f00 	cmp.w	r9, #0
 80046f0:	d003      	beq.n	80046fa <_scanf_float+0x6e>
 80046f2:	6823      	ldr	r3, [r4, #0]
 80046f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046f8:	6023      	str	r3, [r4, #0]
 80046fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80046fe:	f1ba 0f01 	cmp.w	sl, #1
 8004702:	f200 8113 	bhi.w	800492c <_scanf_float+0x2a0>
 8004706:	455e      	cmp	r6, fp
 8004708:	f200 8105 	bhi.w	8004916 <_scanf_float+0x28a>
 800470c:	2501      	movs	r5, #1
 800470e:	4628      	mov	r0, r5
 8004710:	b007      	add	sp, #28
 8004712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004716:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800471a:	2a0d      	cmp	r2, #13
 800471c:	d8e6      	bhi.n	80046ec <_scanf_float+0x60>
 800471e:	a101      	add	r1, pc, #4	; (adr r1, 8004724 <_scanf_float+0x98>)
 8004720:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004724:	08004863 	.word	0x08004863
 8004728:	080046ed 	.word	0x080046ed
 800472c:	080046ed 	.word	0x080046ed
 8004730:	080046ed 	.word	0x080046ed
 8004734:	080048c3 	.word	0x080048c3
 8004738:	0800489b 	.word	0x0800489b
 800473c:	080046ed 	.word	0x080046ed
 8004740:	080046ed 	.word	0x080046ed
 8004744:	08004871 	.word	0x08004871
 8004748:	080046ed 	.word	0x080046ed
 800474c:	080046ed 	.word	0x080046ed
 8004750:	080046ed 	.word	0x080046ed
 8004754:	080046ed 	.word	0x080046ed
 8004758:	08004829 	.word	0x08004829
 800475c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004760:	e7db      	b.n	800471a <_scanf_float+0x8e>
 8004762:	290e      	cmp	r1, #14
 8004764:	d8c2      	bhi.n	80046ec <_scanf_float+0x60>
 8004766:	a001      	add	r0, pc, #4	; (adr r0, 800476c <_scanf_float+0xe0>)
 8004768:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800476c:	0800481b 	.word	0x0800481b
 8004770:	080046ed 	.word	0x080046ed
 8004774:	0800481b 	.word	0x0800481b
 8004778:	080048af 	.word	0x080048af
 800477c:	080046ed 	.word	0x080046ed
 8004780:	080047c9 	.word	0x080047c9
 8004784:	08004805 	.word	0x08004805
 8004788:	08004805 	.word	0x08004805
 800478c:	08004805 	.word	0x08004805
 8004790:	08004805 	.word	0x08004805
 8004794:	08004805 	.word	0x08004805
 8004798:	08004805 	.word	0x08004805
 800479c:	08004805 	.word	0x08004805
 80047a0:	08004805 	.word	0x08004805
 80047a4:	08004805 	.word	0x08004805
 80047a8:	2b6e      	cmp	r3, #110	; 0x6e
 80047aa:	d809      	bhi.n	80047c0 <_scanf_float+0x134>
 80047ac:	2b60      	cmp	r3, #96	; 0x60
 80047ae:	d8b2      	bhi.n	8004716 <_scanf_float+0x8a>
 80047b0:	2b54      	cmp	r3, #84	; 0x54
 80047b2:	d077      	beq.n	80048a4 <_scanf_float+0x218>
 80047b4:	2b59      	cmp	r3, #89	; 0x59
 80047b6:	d199      	bne.n	80046ec <_scanf_float+0x60>
 80047b8:	2d07      	cmp	r5, #7
 80047ba:	d197      	bne.n	80046ec <_scanf_float+0x60>
 80047bc:	2508      	movs	r5, #8
 80047be:	e029      	b.n	8004814 <_scanf_float+0x188>
 80047c0:	2b74      	cmp	r3, #116	; 0x74
 80047c2:	d06f      	beq.n	80048a4 <_scanf_float+0x218>
 80047c4:	2b79      	cmp	r3, #121	; 0x79
 80047c6:	e7f6      	b.n	80047b6 <_scanf_float+0x12a>
 80047c8:	6821      	ldr	r1, [r4, #0]
 80047ca:	05c8      	lsls	r0, r1, #23
 80047cc:	d51a      	bpl.n	8004804 <_scanf_float+0x178>
 80047ce:	9b02      	ldr	r3, [sp, #8]
 80047d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80047d4:	6021      	str	r1, [r4, #0]
 80047d6:	f109 0901 	add.w	r9, r9, #1
 80047da:	b11b      	cbz	r3, 80047e4 <_scanf_float+0x158>
 80047dc:	3b01      	subs	r3, #1
 80047de:	3201      	adds	r2, #1
 80047e0:	9302      	str	r3, [sp, #8]
 80047e2:	60a2      	str	r2, [r4, #8]
 80047e4:	68a3      	ldr	r3, [r4, #8]
 80047e6:	3b01      	subs	r3, #1
 80047e8:	60a3      	str	r3, [r4, #8]
 80047ea:	6923      	ldr	r3, [r4, #16]
 80047ec:	3301      	adds	r3, #1
 80047ee:	6123      	str	r3, [r4, #16]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	3b01      	subs	r3, #1
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	607b      	str	r3, [r7, #4]
 80047f8:	f340 8084 	ble.w	8004904 <_scanf_float+0x278>
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	3301      	adds	r3, #1
 8004800:	603b      	str	r3, [r7, #0]
 8004802:	e766      	b.n	80046d2 <_scanf_float+0x46>
 8004804:	eb1a 0f05 	cmn.w	sl, r5
 8004808:	f47f af70 	bne.w	80046ec <_scanf_float+0x60>
 800480c:	6822      	ldr	r2, [r4, #0]
 800480e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004812:	6022      	str	r2, [r4, #0]
 8004814:	f806 3b01 	strb.w	r3, [r6], #1
 8004818:	e7e4      	b.n	80047e4 <_scanf_float+0x158>
 800481a:	6822      	ldr	r2, [r4, #0]
 800481c:	0610      	lsls	r0, r2, #24
 800481e:	f57f af65 	bpl.w	80046ec <_scanf_float+0x60>
 8004822:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004826:	e7f4      	b.n	8004812 <_scanf_float+0x186>
 8004828:	f1ba 0f00 	cmp.w	sl, #0
 800482c:	d10e      	bne.n	800484c <_scanf_float+0x1c0>
 800482e:	f1b9 0f00 	cmp.w	r9, #0
 8004832:	d10e      	bne.n	8004852 <_scanf_float+0x1c6>
 8004834:	6822      	ldr	r2, [r4, #0]
 8004836:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800483a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800483e:	d108      	bne.n	8004852 <_scanf_float+0x1c6>
 8004840:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004844:	6022      	str	r2, [r4, #0]
 8004846:	f04f 0a01 	mov.w	sl, #1
 800484a:	e7e3      	b.n	8004814 <_scanf_float+0x188>
 800484c:	f1ba 0f02 	cmp.w	sl, #2
 8004850:	d055      	beq.n	80048fe <_scanf_float+0x272>
 8004852:	2d01      	cmp	r5, #1
 8004854:	d002      	beq.n	800485c <_scanf_float+0x1d0>
 8004856:	2d04      	cmp	r5, #4
 8004858:	f47f af48 	bne.w	80046ec <_scanf_float+0x60>
 800485c:	3501      	adds	r5, #1
 800485e:	b2ed      	uxtb	r5, r5
 8004860:	e7d8      	b.n	8004814 <_scanf_float+0x188>
 8004862:	f1ba 0f01 	cmp.w	sl, #1
 8004866:	f47f af41 	bne.w	80046ec <_scanf_float+0x60>
 800486a:	f04f 0a02 	mov.w	sl, #2
 800486e:	e7d1      	b.n	8004814 <_scanf_float+0x188>
 8004870:	b97d      	cbnz	r5, 8004892 <_scanf_float+0x206>
 8004872:	f1b9 0f00 	cmp.w	r9, #0
 8004876:	f47f af3c 	bne.w	80046f2 <_scanf_float+0x66>
 800487a:	6822      	ldr	r2, [r4, #0]
 800487c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004880:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004884:	f47f af39 	bne.w	80046fa <_scanf_float+0x6e>
 8004888:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800488c:	6022      	str	r2, [r4, #0]
 800488e:	2501      	movs	r5, #1
 8004890:	e7c0      	b.n	8004814 <_scanf_float+0x188>
 8004892:	2d03      	cmp	r5, #3
 8004894:	d0e2      	beq.n	800485c <_scanf_float+0x1d0>
 8004896:	2d05      	cmp	r5, #5
 8004898:	e7de      	b.n	8004858 <_scanf_float+0x1cc>
 800489a:	2d02      	cmp	r5, #2
 800489c:	f47f af26 	bne.w	80046ec <_scanf_float+0x60>
 80048a0:	2503      	movs	r5, #3
 80048a2:	e7b7      	b.n	8004814 <_scanf_float+0x188>
 80048a4:	2d06      	cmp	r5, #6
 80048a6:	f47f af21 	bne.w	80046ec <_scanf_float+0x60>
 80048aa:	2507      	movs	r5, #7
 80048ac:	e7b2      	b.n	8004814 <_scanf_float+0x188>
 80048ae:	6822      	ldr	r2, [r4, #0]
 80048b0:	0591      	lsls	r1, r2, #22
 80048b2:	f57f af1b 	bpl.w	80046ec <_scanf_float+0x60>
 80048b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80048ba:	6022      	str	r2, [r4, #0]
 80048bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80048c0:	e7a8      	b.n	8004814 <_scanf_float+0x188>
 80048c2:	6822      	ldr	r2, [r4, #0]
 80048c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80048c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80048cc:	d006      	beq.n	80048dc <_scanf_float+0x250>
 80048ce:	0550      	lsls	r0, r2, #21
 80048d0:	f57f af0c 	bpl.w	80046ec <_scanf_float+0x60>
 80048d4:	f1b9 0f00 	cmp.w	r9, #0
 80048d8:	f43f af0f 	beq.w	80046fa <_scanf_float+0x6e>
 80048dc:	0591      	lsls	r1, r2, #22
 80048de:	bf58      	it	pl
 80048e0:	9901      	ldrpl	r1, [sp, #4]
 80048e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80048e6:	bf58      	it	pl
 80048e8:	eba9 0101 	subpl.w	r1, r9, r1
 80048ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80048f0:	bf58      	it	pl
 80048f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80048f6:	6022      	str	r2, [r4, #0]
 80048f8:	f04f 0900 	mov.w	r9, #0
 80048fc:	e78a      	b.n	8004814 <_scanf_float+0x188>
 80048fe:	f04f 0a03 	mov.w	sl, #3
 8004902:	e787      	b.n	8004814 <_scanf_float+0x188>
 8004904:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004908:	4639      	mov	r1, r7
 800490a:	4640      	mov	r0, r8
 800490c:	4798      	blx	r3
 800490e:	2800      	cmp	r0, #0
 8004910:	f43f aedf 	beq.w	80046d2 <_scanf_float+0x46>
 8004914:	e6ea      	b.n	80046ec <_scanf_float+0x60>
 8004916:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800491a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800491e:	463a      	mov	r2, r7
 8004920:	4640      	mov	r0, r8
 8004922:	4798      	blx	r3
 8004924:	6923      	ldr	r3, [r4, #16]
 8004926:	3b01      	subs	r3, #1
 8004928:	6123      	str	r3, [r4, #16]
 800492a:	e6ec      	b.n	8004706 <_scanf_float+0x7a>
 800492c:	1e6b      	subs	r3, r5, #1
 800492e:	2b06      	cmp	r3, #6
 8004930:	d825      	bhi.n	800497e <_scanf_float+0x2f2>
 8004932:	2d02      	cmp	r5, #2
 8004934:	d836      	bhi.n	80049a4 <_scanf_float+0x318>
 8004936:	455e      	cmp	r6, fp
 8004938:	f67f aee8 	bls.w	800470c <_scanf_float+0x80>
 800493c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004940:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004944:	463a      	mov	r2, r7
 8004946:	4640      	mov	r0, r8
 8004948:	4798      	blx	r3
 800494a:	6923      	ldr	r3, [r4, #16]
 800494c:	3b01      	subs	r3, #1
 800494e:	6123      	str	r3, [r4, #16]
 8004950:	e7f1      	b.n	8004936 <_scanf_float+0x2aa>
 8004952:	9802      	ldr	r0, [sp, #8]
 8004954:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004958:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800495c:	9002      	str	r0, [sp, #8]
 800495e:	463a      	mov	r2, r7
 8004960:	4640      	mov	r0, r8
 8004962:	4798      	blx	r3
 8004964:	6923      	ldr	r3, [r4, #16]
 8004966:	3b01      	subs	r3, #1
 8004968:	6123      	str	r3, [r4, #16]
 800496a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800496e:	fa5f fa8a 	uxtb.w	sl, sl
 8004972:	f1ba 0f02 	cmp.w	sl, #2
 8004976:	d1ec      	bne.n	8004952 <_scanf_float+0x2c6>
 8004978:	3d03      	subs	r5, #3
 800497a:	b2ed      	uxtb	r5, r5
 800497c:	1b76      	subs	r6, r6, r5
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	05da      	lsls	r2, r3, #23
 8004982:	d52f      	bpl.n	80049e4 <_scanf_float+0x358>
 8004984:	055b      	lsls	r3, r3, #21
 8004986:	d510      	bpl.n	80049aa <_scanf_float+0x31e>
 8004988:	455e      	cmp	r6, fp
 800498a:	f67f aebf 	bls.w	800470c <_scanf_float+0x80>
 800498e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004992:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004996:	463a      	mov	r2, r7
 8004998:	4640      	mov	r0, r8
 800499a:	4798      	blx	r3
 800499c:	6923      	ldr	r3, [r4, #16]
 800499e:	3b01      	subs	r3, #1
 80049a0:	6123      	str	r3, [r4, #16]
 80049a2:	e7f1      	b.n	8004988 <_scanf_float+0x2fc>
 80049a4:	46aa      	mov	sl, r5
 80049a6:	9602      	str	r6, [sp, #8]
 80049a8:	e7df      	b.n	800496a <_scanf_float+0x2de>
 80049aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80049ae:	6923      	ldr	r3, [r4, #16]
 80049b0:	2965      	cmp	r1, #101	; 0x65
 80049b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80049b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80049ba:	6123      	str	r3, [r4, #16]
 80049bc:	d00c      	beq.n	80049d8 <_scanf_float+0x34c>
 80049be:	2945      	cmp	r1, #69	; 0x45
 80049c0:	d00a      	beq.n	80049d8 <_scanf_float+0x34c>
 80049c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80049c6:	463a      	mov	r2, r7
 80049c8:	4640      	mov	r0, r8
 80049ca:	4798      	blx	r3
 80049cc:	6923      	ldr	r3, [r4, #16]
 80049ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80049d2:	3b01      	subs	r3, #1
 80049d4:	1eb5      	subs	r5, r6, #2
 80049d6:	6123      	str	r3, [r4, #16]
 80049d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80049dc:	463a      	mov	r2, r7
 80049de:	4640      	mov	r0, r8
 80049e0:	4798      	blx	r3
 80049e2:	462e      	mov	r6, r5
 80049e4:	6825      	ldr	r5, [r4, #0]
 80049e6:	f015 0510 	ands.w	r5, r5, #16
 80049ea:	d158      	bne.n	8004a9e <_scanf_float+0x412>
 80049ec:	7035      	strb	r5, [r6, #0]
 80049ee:	6823      	ldr	r3, [r4, #0]
 80049f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80049f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049f8:	d11c      	bne.n	8004a34 <_scanf_float+0x3a8>
 80049fa:	9b01      	ldr	r3, [sp, #4]
 80049fc:	454b      	cmp	r3, r9
 80049fe:	eba3 0209 	sub.w	r2, r3, r9
 8004a02:	d124      	bne.n	8004a4e <_scanf_float+0x3c2>
 8004a04:	2200      	movs	r2, #0
 8004a06:	4659      	mov	r1, fp
 8004a08:	4640      	mov	r0, r8
 8004a0a:	f000 fe9b 	bl	8005744 <_strtod_r>
 8004a0e:	9b03      	ldr	r3, [sp, #12]
 8004a10:	6821      	ldr	r1, [r4, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f011 0f02 	tst.w	r1, #2
 8004a18:	ec57 6b10 	vmov	r6, r7, d0
 8004a1c:	f103 0204 	add.w	r2, r3, #4
 8004a20:	d020      	beq.n	8004a64 <_scanf_float+0x3d8>
 8004a22:	9903      	ldr	r1, [sp, #12]
 8004a24:	600a      	str	r2, [r1, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	e9c3 6700 	strd	r6, r7, [r3]
 8004a2c:	68e3      	ldr	r3, [r4, #12]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	60e3      	str	r3, [r4, #12]
 8004a32:	e66c      	b.n	800470e <_scanf_float+0x82>
 8004a34:	9b04      	ldr	r3, [sp, #16]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0e4      	beq.n	8004a04 <_scanf_float+0x378>
 8004a3a:	9905      	ldr	r1, [sp, #20]
 8004a3c:	230a      	movs	r3, #10
 8004a3e:	462a      	mov	r2, r5
 8004a40:	3101      	adds	r1, #1
 8004a42:	4640      	mov	r0, r8
 8004a44:	f000 ff08 	bl	8005858 <_strtol_r>
 8004a48:	9b04      	ldr	r3, [sp, #16]
 8004a4a:	9e05      	ldr	r6, [sp, #20]
 8004a4c:	1ac2      	subs	r2, r0, r3
 8004a4e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004a52:	429e      	cmp	r6, r3
 8004a54:	bf28      	it	cs
 8004a56:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004a5a:	4912      	ldr	r1, [pc, #72]	; (8004aa4 <_scanf_float+0x418>)
 8004a5c:	4630      	mov	r0, r6
 8004a5e:	f000 f82b 	bl	8004ab8 <siprintf>
 8004a62:	e7cf      	b.n	8004a04 <_scanf_float+0x378>
 8004a64:	f011 0f04 	tst.w	r1, #4
 8004a68:	9903      	ldr	r1, [sp, #12]
 8004a6a:	600a      	str	r2, [r1, #0]
 8004a6c:	d1db      	bne.n	8004a26 <_scanf_float+0x39a>
 8004a6e:	f8d3 8000 	ldr.w	r8, [r3]
 8004a72:	ee10 2a10 	vmov	r2, s0
 8004a76:	ee10 0a10 	vmov	r0, s0
 8004a7a:	463b      	mov	r3, r7
 8004a7c:	4639      	mov	r1, r7
 8004a7e:	f7fc f85d 	bl	8000b3c <__aeabi_dcmpun>
 8004a82:	b128      	cbz	r0, 8004a90 <_scanf_float+0x404>
 8004a84:	4808      	ldr	r0, [pc, #32]	; (8004aa8 <_scanf_float+0x41c>)
 8004a86:	f000 f811 	bl	8004aac <nanf>
 8004a8a:	ed88 0a00 	vstr	s0, [r8]
 8004a8e:	e7cd      	b.n	8004a2c <_scanf_float+0x3a0>
 8004a90:	4630      	mov	r0, r6
 8004a92:	4639      	mov	r1, r7
 8004a94:	f7fc f8b0 	bl	8000bf8 <__aeabi_d2f>
 8004a98:	f8c8 0000 	str.w	r0, [r8]
 8004a9c:	e7c6      	b.n	8004a2c <_scanf_float+0x3a0>
 8004a9e:	2500      	movs	r5, #0
 8004aa0:	e635      	b.n	800470e <_scanf_float+0x82>
 8004aa2:	bf00      	nop
 8004aa4:	0800868c 	.word	0x0800868c
 8004aa8:	08008aa8 	.word	0x08008aa8

08004aac <nanf>:
 8004aac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004ab4 <nanf+0x8>
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	7fc00000 	.word	0x7fc00000

08004ab8 <siprintf>:
 8004ab8:	b40e      	push	{r1, r2, r3}
 8004aba:	b500      	push	{lr}
 8004abc:	b09c      	sub	sp, #112	; 0x70
 8004abe:	ab1d      	add	r3, sp, #116	; 0x74
 8004ac0:	9002      	str	r0, [sp, #8]
 8004ac2:	9006      	str	r0, [sp, #24]
 8004ac4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ac8:	4809      	ldr	r0, [pc, #36]	; (8004af0 <siprintf+0x38>)
 8004aca:	9107      	str	r1, [sp, #28]
 8004acc:	9104      	str	r1, [sp, #16]
 8004ace:	4909      	ldr	r1, [pc, #36]	; (8004af4 <siprintf+0x3c>)
 8004ad0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ad4:	9105      	str	r1, [sp, #20]
 8004ad6:	6800      	ldr	r0, [r0, #0]
 8004ad8:	9301      	str	r3, [sp, #4]
 8004ada:	a902      	add	r1, sp, #8
 8004adc:	f002 fe96 	bl	800780c <_svfiprintf_r>
 8004ae0:	9b02      	ldr	r3, [sp, #8]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	701a      	strb	r2, [r3, #0]
 8004ae6:	b01c      	add	sp, #112	; 0x70
 8004ae8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004aec:	b003      	add	sp, #12
 8004aee:	4770      	bx	lr
 8004af0:	20000020 	.word	0x20000020
 8004af4:	ffff0208 	.word	0xffff0208

08004af8 <sulp>:
 8004af8:	b570      	push	{r4, r5, r6, lr}
 8004afa:	4604      	mov	r4, r0
 8004afc:	460d      	mov	r5, r1
 8004afe:	ec45 4b10 	vmov	d0, r4, r5
 8004b02:	4616      	mov	r6, r2
 8004b04:	f002 fc1e 	bl	8007344 <__ulp>
 8004b08:	ec51 0b10 	vmov	r0, r1, d0
 8004b0c:	b17e      	cbz	r6, 8004b2e <sulp+0x36>
 8004b0e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004b12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	dd09      	ble.n	8004b2e <sulp+0x36>
 8004b1a:	051b      	lsls	r3, r3, #20
 8004b1c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004b20:	2400      	movs	r4, #0
 8004b22:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004b26:	4622      	mov	r2, r4
 8004b28:	462b      	mov	r3, r5
 8004b2a:	f7fb fd6d 	bl	8000608 <__aeabi_dmul>
 8004b2e:	bd70      	pop	{r4, r5, r6, pc}

08004b30 <_strtod_l>:
 8004b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b34:	b0a3      	sub	sp, #140	; 0x8c
 8004b36:	461f      	mov	r7, r3
 8004b38:	2300      	movs	r3, #0
 8004b3a:	931e      	str	r3, [sp, #120]	; 0x78
 8004b3c:	4ba4      	ldr	r3, [pc, #656]	; (8004dd0 <_strtod_l+0x2a0>)
 8004b3e:	9219      	str	r2, [sp, #100]	; 0x64
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	9307      	str	r3, [sp, #28]
 8004b44:	4604      	mov	r4, r0
 8004b46:	4618      	mov	r0, r3
 8004b48:	4688      	mov	r8, r1
 8004b4a:	f7fb fb49 	bl	80001e0 <strlen>
 8004b4e:	f04f 0a00 	mov.w	sl, #0
 8004b52:	4605      	mov	r5, r0
 8004b54:	f04f 0b00 	mov.w	fp, #0
 8004b58:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8004b5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004b5e:	781a      	ldrb	r2, [r3, #0]
 8004b60:	2a2b      	cmp	r2, #43	; 0x2b
 8004b62:	d04c      	beq.n	8004bfe <_strtod_l+0xce>
 8004b64:	d839      	bhi.n	8004bda <_strtod_l+0xaa>
 8004b66:	2a0d      	cmp	r2, #13
 8004b68:	d832      	bhi.n	8004bd0 <_strtod_l+0xa0>
 8004b6a:	2a08      	cmp	r2, #8
 8004b6c:	d832      	bhi.n	8004bd4 <_strtod_l+0xa4>
 8004b6e:	2a00      	cmp	r2, #0
 8004b70:	d03c      	beq.n	8004bec <_strtod_l+0xbc>
 8004b72:	2300      	movs	r3, #0
 8004b74:	930e      	str	r3, [sp, #56]	; 0x38
 8004b76:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8004b78:	7833      	ldrb	r3, [r6, #0]
 8004b7a:	2b30      	cmp	r3, #48	; 0x30
 8004b7c:	f040 80b4 	bne.w	8004ce8 <_strtod_l+0x1b8>
 8004b80:	7873      	ldrb	r3, [r6, #1]
 8004b82:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004b86:	2b58      	cmp	r3, #88	; 0x58
 8004b88:	d16c      	bne.n	8004c64 <_strtod_l+0x134>
 8004b8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b8c:	9301      	str	r3, [sp, #4]
 8004b8e:	ab1e      	add	r3, sp, #120	; 0x78
 8004b90:	9702      	str	r7, [sp, #8]
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	4a8f      	ldr	r2, [pc, #572]	; (8004dd4 <_strtod_l+0x2a4>)
 8004b96:	ab1f      	add	r3, sp, #124	; 0x7c
 8004b98:	a91d      	add	r1, sp, #116	; 0x74
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	f001 fd40 	bl	8006620 <__gethex>
 8004ba0:	f010 0707 	ands.w	r7, r0, #7
 8004ba4:	4605      	mov	r5, r0
 8004ba6:	d005      	beq.n	8004bb4 <_strtod_l+0x84>
 8004ba8:	2f06      	cmp	r7, #6
 8004baa:	d12a      	bne.n	8004c02 <_strtod_l+0xd2>
 8004bac:	3601      	adds	r6, #1
 8004bae:	2300      	movs	r3, #0
 8004bb0:	961d      	str	r6, [sp, #116]	; 0x74
 8004bb2:	930e      	str	r3, [sp, #56]	; 0x38
 8004bb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f040 8596 	bne.w	80056e8 <_strtod_l+0xbb8>
 8004bbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bbe:	b1db      	cbz	r3, 8004bf8 <_strtod_l+0xc8>
 8004bc0:	4652      	mov	r2, sl
 8004bc2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004bc6:	ec43 2b10 	vmov	d0, r2, r3
 8004bca:	b023      	add	sp, #140	; 0x8c
 8004bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bd0:	2a20      	cmp	r2, #32
 8004bd2:	d1ce      	bne.n	8004b72 <_strtod_l+0x42>
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	931d      	str	r3, [sp, #116]	; 0x74
 8004bd8:	e7c0      	b.n	8004b5c <_strtod_l+0x2c>
 8004bda:	2a2d      	cmp	r2, #45	; 0x2d
 8004bdc:	d1c9      	bne.n	8004b72 <_strtod_l+0x42>
 8004bde:	2201      	movs	r2, #1
 8004be0:	920e      	str	r2, [sp, #56]	; 0x38
 8004be2:	1c5a      	adds	r2, r3, #1
 8004be4:	921d      	str	r2, [sp, #116]	; 0x74
 8004be6:	785b      	ldrb	r3, [r3, #1]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1c4      	bne.n	8004b76 <_strtod_l+0x46>
 8004bec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004bee:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f040 8576 	bne.w	80056e4 <_strtod_l+0xbb4>
 8004bf8:	4652      	mov	r2, sl
 8004bfa:	465b      	mov	r3, fp
 8004bfc:	e7e3      	b.n	8004bc6 <_strtod_l+0x96>
 8004bfe:	2200      	movs	r2, #0
 8004c00:	e7ee      	b.n	8004be0 <_strtod_l+0xb0>
 8004c02:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004c04:	b13a      	cbz	r2, 8004c16 <_strtod_l+0xe6>
 8004c06:	2135      	movs	r1, #53	; 0x35
 8004c08:	a820      	add	r0, sp, #128	; 0x80
 8004c0a:	f002 fca6 	bl	800755a <__copybits>
 8004c0e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004c10:	4620      	mov	r0, r4
 8004c12:	f002 f86b 	bl	8006cec <_Bfree>
 8004c16:	3f01      	subs	r7, #1
 8004c18:	2f05      	cmp	r7, #5
 8004c1a:	d807      	bhi.n	8004c2c <_strtod_l+0xfc>
 8004c1c:	e8df f007 	tbb	[pc, r7]
 8004c20:	1d180b0e 	.word	0x1d180b0e
 8004c24:	030e      	.short	0x030e
 8004c26:	f04f 0b00 	mov.w	fp, #0
 8004c2a:	46da      	mov	sl, fp
 8004c2c:	0728      	lsls	r0, r5, #28
 8004c2e:	d5c1      	bpl.n	8004bb4 <_strtod_l+0x84>
 8004c30:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004c34:	e7be      	b.n	8004bb4 <_strtod_l+0x84>
 8004c36:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8004c3a:	e7f7      	b.n	8004c2c <_strtod_l+0xfc>
 8004c3c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8004c40:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8004c42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004c46:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004c4a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004c4e:	e7ed      	b.n	8004c2c <_strtod_l+0xfc>
 8004c50:	f8df b184 	ldr.w	fp, [pc, #388]	; 8004dd8 <_strtod_l+0x2a8>
 8004c54:	f04f 0a00 	mov.w	sl, #0
 8004c58:	e7e8      	b.n	8004c2c <_strtod_l+0xfc>
 8004c5a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004c5e:	f04f 3aff 	mov.w	sl, #4294967295
 8004c62:	e7e3      	b.n	8004c2c <_strtod_l+0xfc>
 8004c64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	921d      	str	r2, [sp, #116]	; 0x74
 8004c6a:	785b      	ldrb	r3, [r3, #1]
 8004c6c:	2b30      	cmp	r3, #48	; 0x30
 8004c6e:	d0f9      	beq.n	8004c64 <_strtod_l+0x134>
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d09f      	beq.n	8004bb4 <_strtod_l+0x84>
 8004c74:	2301      	movs	r3, #1
 8004c76:	f04f 0900 	mov.w	r9, #0
 8004c7a:	9304      	str	r3, [sp, #16]
 8004c7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004c7e:	930a      	str	r3, [sp, #40]	; 0x28
 8004c80:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004c84:	464f      	mov	r7, r9
 8004c86:	220a      	movs	r2, #10
 8004c88:	981d      	ldr	r0, [sp, #116]	; 0x74
 8004c8a:	7806      	ldrb	r6, [r0, #0]
 8004c8c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004c90:	b2d9      	uxtb	r1, r3
 8004c92:	2909      	cmp	r1, #9
 8004c94:	d92a      	bls.n	8004cec <_strtod_l+0x1bc>
 8004c96:	9907      	ldr	r1, [sp, #28]
 8004c98:	462a      	mov	r2, r5
 8004c9a:	f002 fed1 	bl	8007a40 <strncmp>
 8004c9e:	b398      	cbz	r0, 8004d08 <_strtod_l+0x1d8>
 8004ca0:	2000      	movs	r0, #0
 8004ca2:	4633      	mov	r3, r6
 8004ca4:	463d      	mov	r5, r7
 8004ca6:	9007      	str	r0, [sp, #28]
 8004ca8:	4602      	mov	r2, r0
 8004caa:	2b65      	cmp	r3, #101	; 0x65
 8004cac:	d001      	beq.n	8004cb2 <_strtod_l+0x182>
 8004cae:	2b45      	cmp	r3, #69	; 0x45
 8004cb0:	d118      	bne.n	8004ce4 <_strtod_l+0x1b4>
 8004cb2:	b91d      	cbnz	r5, 8004cbc <_strtod_l+0x18c>
 8004cb4:	9b04      	ldr	r3, [sp, #16]
 8004cb6:	4303      	orrs	r3, r0
 8004cb8:	d098      	beq.n	8004bec <_strtod_l+0xbc>
 8004cba:	2500      	movs	r5, #0
 8004cbc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8004cc0:	f108 0301 	add.w	r3, r8, #1
 8004cc4:	931d      	str	r3, [sp, #116]	; 0x74
 8004cc6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004cca:	2b2b      	cmp	r3, #43	; 0x2b
 8004ccc:	d075      	beq.n	8004dba <_strtod_l+0x28a>
 8004cce:	2b2d      	cmp	r3, #45	; 0x2d
 8004cd0:	d07b      	beq.n	8004dca <_strtod_l+0x29a>
 8004cd2:	f04f 0c00 	mov.w	ip, #0
 8004cd6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004cda:	2909      	cmp	r1, #9
 8004cdc:	f240 8082 	bls.w	8004de4 <_strtod_l+0x2b4>
 8004ce0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8004ce4:	2600      	movs	r6, #0
 8004ce6:	e09d      	b.n	8004e24 <_strtod_l+0x2f4>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	e7c4      	b.n	8004c76 <_strtod_l+0x146>
 8004cec:	2f08      	cmp	r7, #8
 8004cee:	bfd8      	it	le
 8004cf0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8004cf2:	f100 0001 	add.w	r0, r0, #1
 8004cf6:	bfda      	itte	le
 8004cf8:	fb02 3301 	mlale	r3, r2, r1, r3
 8004cfc:	9309      	strle	r3, [sp, #36]	; 0x24
 8004cfe:	fb02 3909 	mlagt	r9, r2, r9, r3
 8004d02:	3701      	adds	r7, #1
 8004d04:	901d      	str	r0, [sp, #116]	; 0x74
 8004d06:	e7bf      	b.n	8004c88 <_strtod_l+0x158>
 8004d08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004d0a:	195a      	adds	r2, r3, r5
 8004d0c:	921d      	str	r2, [sp, #116]	; 0x74
 8004d0e:	5d5b      	ldrb	r3, [r3, r5]
 8004d10:	2f00      	cmp	r7, #0
 8004d12:	d037      	beq.n	8004d84 <_strtod_l+0x254>
 8004d14:	9007      	str	r0, [sp, #28]
 8004d16:	463d      	mov	r5, r7
 8004d18:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004d1c:	2a09      	cmp	r2, #9
 8004d1e:	d912      	bls.n	8004d46 <_strtod_l+0x216>
 8004d20:	2201      	movs	r2, #1
 8004d22:	e7c2      	b.n	8004caa <_strtod_l+0x17a>
 8004d24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004d26:	1c5a      	adds	r2, r3, #1
 8004d28:	921d      	str	r2, [sp, #116]	; 0x74
 8004d2a:	785b      	ldrb	r3, [r3, #1]
 8004d2c:	3001      	adds	r0, #1
 8004d2e:	2b30      	cmp	r3, #48	; 0x30
 8004d30:	d0f8      	beq.n	8004d24 <_strtod_l+0x1f4>
 8004d32:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004d36:	2a08      	cmp	r2, #8
 8004d38:	f200 84db 	bhi.w	80056f2 <_strtod_l+0xbc2>
 8004d3c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004d3e:	9007      	str	r0, [sp, #28]
 8004d40:	2000      	movs	r0, #0
 8004d42:	920a      	str	r2, [sp, #40]	; 0x28
 8004d44:	4605      	mov	r5, r0
 8004d46:	3b30      	subs	r3, #48	; 0x30
 8004d48:	f100 0201 	add.w	r2, r0, #1
 8004d4c:	d014      	beq.n	8004d78 <_strtod_l+0x248>
 8004d4e:	9907      	ldr	r1, [sp, #28]
 8004d50:	4411      	add	r1, r2
 8004d52:	9107      	str	r1, [sp, #28]
 8004d54:	462a      	mov	r2, r5
 8004d56:	eb00 0e05 	add.w	lr, r0, r5
 8004d5a:	210a      	movs	r1, #10
 8004d5c:	4572      	cmp	r2, lr
 8004d5e:	d113      	bne.n	8004d88 <_strtod_l+0x258>
 8004d60:	182a      	adds	r2, r5, r0
 8004d62:	2a08      	cmp	r2, #8
 8004d64:	f105 0501 	add.w	r5, r5, #1
 8004d68:	4405      	add	r5, r0
 8004d6a:	dc1c      	bgt.n	8004da6 <_strtod_l+0x276>
 8004d6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d6e:	220a      	movs	r2, #10
 8004d70:	fb02 3301 	mla	r3, r2, r1, r3
 8004d74:	9309      	str	r3, [sp, #36]	; 0x24
 8004d76:	2200      	movs	r2, #0
 8004d78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004d7a:	1c59      	adds	r1, r3, #1
 8004d7c:	911d      	str	r1, [sp, #116]	; 0x74
 8004d7e:	785b      	ldrb	r3, [r3, #1]
 8004d80:	4610      	mov	r0, r2
 8004d82:	e7c9      	b.n	8004d18 <_strtod_l+0x1e8>
 8004d84:	4638      	mov	r0, r7
 8004d86:	e7d2      	b.n	8004d2e <_strtod_l+0x1fe>
 8004d88:	2a08      	cmp	r2, #8
 8004d8a:	dc04      	bgt.n	8004d96 <_strtod_l+0x266>
 8004d8c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004d8e:	434e      	muls	r6, r1
 8004d90:	9609      	str	r6, [sp, #36]	; 0x24
 8004d92:	3201      	adds	r2, #1
 8004d94:	e7e2      	b.n	8004d5c <_strtod_l+0x22c>
 8004d96:	f102 0c01 	add.w	ip, r2, #1
 8004d9a:	f1bc 0f10 	cmp.w	ip, #16
 8004d9e:	bfd8      	it	le
 8004da0:	fb01 f909 	mulle.w	r9, r1, r9
 8004da4:	e7f5      	b.n	8004d92 <_strtod_l+0x262>
 8004da6:	2d10      	cmp	r5, #16
 8004da8:	bfdc      	itt	le
 8004daa:	220a      	movle	r2, #10
 8004dac:	fb02 3909 	mlale	r9, r2, r9, r3
 8004db0:	e7e1      	b.n	8004d76 <_strtod_l+0x246>
 8004db2:	2300      	movs	r3, #0
 8004db4:	9307      	str	r3, [sp, #28]
 8004db6:	2201      	movs	r2, #1
 8004db8:	e77c      	b.n	8004cb4 <_strtod_l+0x184>
 8004dba:	f04f 0c00 	mov.w	ip, #0
 8004dbe:	f108 0302 	add.w	r3, r8, #2
 8004dc2:	931d      	str	r3, [sp, #116]	; 0x74
 8004dc4:	f898 3002 	ldrb.w	r3, [r8, #2]
 8004dc8:	e785      	b.n	8004cd6 <_strtod_l+0x1a6>
 8004dca:	f04f 0c01 	mov.w	ip, #1
 8004dce:	e7f6      	b.n	8004dbe <_strtod_l+0x28e>
 8004dd0:	080088e8 	.word	0x080088e8
 8004dd4:	08008694 	.word	0x08008694
 8004dd8:	7ff00000 	.word	0x7ff00000
 8004ddc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004dde:	1c59      	adds	r1, r3, #1
 8004de0:	911d      	str	r1, [sp, #116]	; 0x74
 8004de2:	785b      	ldrb	r3, [r3, #1]
 8004de4:	2b30      	cmp	r3, #48	; 0x30
 8004de6:	d0f9      	beq.n	8004ddc <_strtod_l+0x2ac>
 8004de8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8004dec:	2908      	cmp	r1, #8
 8004dee:	f63f af79 	bhi.w	8004ce4 <_strtod_l+0x1b4>
 8004df2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004df6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004df8:	9308      	str	r3, [sp, #32]
 8004dfa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004dfc:	1c59      	adds	r1, r3, #1
 8004dfe:	911d      	str	r1, [sp, #116]	; 0x74
 8004e00:	785b      	ldrb	r3, [r3, #1]
 8004e02:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8004e06:	2e09      	cmp	r6, #9
 8004e08:	d937      	bls.n	8004e7a <_strtod_l+0x34a>
 8004e0a:	9e08      	ldr	r6, [sp, #32]
 8004e0c:	1b89      	subs	r1, r1, r6
 8004e0e:	2908      	cmp	r1, #8
 8004e10:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8004e14:	dc02      	bgt.n	8004e1c <_strtod_l+0x2ec>
 8004e16:	4576      	cmp	r6, lr
 8004e18:	bfa8      	it	ge
 8004e1a:	4676      	movge	r6, lr
 8004e1c:	f1bc 0f00 	cmp.w	ip, #0
 8004e20:	d000      	beq.n	8004e24 <_strtod_l+0x2f4>
 8004e22:	4276      	negs	r6, r6
 8004e24:	2d00      	cmp	r5, #0
 8004e26:	d14f      	bne.n	8004ec8 <_strtod_l+0x398>
 8004e28:	9904      	ldr	r1, [sp, #16]
 8004e2a:	4301      	orrs	r1, r0
 8004e2c:	f47f aec2 	bne.w	8004bb4 <_strtod_l+0x84>
 8004e30:	2a00      	cmp	r2, #0
 8004e32:	f47f aedb 	bne.w	8004bec <_strtod_l+0xbc>
 8004e36:	2b69      	cmp	r3, #105	; 0x69
 8004e38:	d027      	beq.n	8004e8a <_strtod_l+0x35a>
 8004e3a:	dc24      	bgt.n	8004e86 <_strtod_l+0x356>
 8004e3c:	2b49      	cmp	r3, #73	; 0x49
 8004e3e:	d024      	beq.n	8004e8a <_strtod_l+0x35a>
 8004e40:	2b4e      	cmp	r3, #78	; 0x4e
 8004e42:	f47f aed3 	bne.w	8004bec <_strtod_l+0xbc>
 8004e46:	499e      	ldr	r1, [pc, #632]	; (80050c0 <_strtod_l+0x590>)
 8004e48:	a81d      	add	r0, sp, #116	; 0x74
 8004e4a:	f001 fe41 	bl	8006ad0 <__match>
 8004e4e:	2800      	cmp	r0, #0
 8004e50:	f43f aecc 	beq.w	8004bec <_strtod_l+0xbc>
 8004e54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	2b28      	cmp	r3, #40	; 0x28
 8004e5a:	d12d      	bne.n	8004eb8 <_strtod_l+0x388>
 8004e5c:	4999      	ldr	r1, [pc, #612]	; (80050c4 <_strtod_l+0x594>)
 8004e5e:	aa20      	add	r2, sp, #128	; 0x80
 8004e60:	a81d      	add	r0, sp, #116	; 0x74
 8004e62:	f001 fe49 	bl	8006af8 <__hexnan>
 8004e66:	2805      	cmp	r0, #5
 8004e68:	d126      	bne.n	8004eb8 <_strtod_l+0x388>
 8004e6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e6c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8004e70:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004e74:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004e78:	e69c      	b.n	8004bb4 <_strtod_l+0x84>
 8004e7a:	210a      	movs	r1, #10
 8004e7c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8004e80:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004e84:	e7b9      	b.n	8004dfa <_strtod_l+0x2ca>
 8004e86:	2b6e      	cmp	r3, #110	; 0x6e
 8004e88:	e7db      	b.n	8004e42 <_strtod_l+0x312>
 8004e8a:	498f      	ldr	r1, [pc, #572]	; (80050c8 <_strtod_l+0x598>)
 8004e8c:	a81d      	add	r0, sp, #116	; 0x74
 8004e8e:	f001 fe1f 	bl	8006ad0 <__match>
 8004e92:	2800      	cmp	r0, #0
 8004e94:	f43f aeaa 	beq.w	8004bec <_strtod_l+0xbc>
 8004e98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004e9a:	498c      	ldr	r1, [pc, #560]	; (80050cc <_strtod_l+0x59c>)
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	a81d      	add	r0, sp, #116	; 0x74
 8004ea0:	931d      	str	r3, [sp, #116]	; 0x74
 8004ea2:	f001 fe15 	bl	8006ad0 <__match>
 8004ea6:	b910      	cbnz	r0, 8004eae <_strtod_l+0x37e>
 8004ea8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004eaa:	3301      	adds	r3, #1
 8004eac:	931d      	str	r3, [sp, #116]	; 0x74
 8004eae:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80050dc <_strtod_l+0x5ac>
 8004eb2:	f04f 0a00 	mov.w	sl, #0
 8004eb6:	e67d      	b.n	8004bb4 <_strtod_l+0x84>
 8004eb8:	4885      	ldr	r0, [pc, #532]	; (80050d0 <_strtod_l+0x5a0>)
 8004eba:	f002 fda9 	bl	8007a10 <nan>
 8004ebe:	ed8d 0b04 	vstr	d0, [sp, #16]
 8004ec2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8004ec6:	e675      	b.n	8004bb4 <_strtod_l+0x84>
 8004ec8:	9b07      	ldr	r3, [sp, #28]
 8004eca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ecc:	1af3      	subs	r3, r6, r3
 8004ece:	2f00      	cmp	r7, #0
 8004ed0:	bf08      	it	eq
 8004ed2:	462f      	moveq	r7, r5
 8004ed4:	2d10      	cmp	r5, #16
 8004ed6:	9308      	str	r3, [sp, #32]
 8004ed8:	46a8      	mov	r8, r5
 8004eda:	bfa8      	it	ge
 8004edc:	f04f 0810 	movge.w	r8, #16
 8004ee0:	f7fb fb18 	bl	8000514 <__aeabi_ui2d>
 8004ee4:	2d09      	cmp	r5, #9
 8004ee6:	4682      	mov	sl, r0
 8004ee8:	468b      	mov	fp, r1
 8004eea:	dd13      	ble.n	8004f14 <_strtod_l+0x3e4>
 8004eec:	4b79      	ldr	r3, [pc, #484]	; (80050d4 <_strtod_l+0x5a4>)
 8004eee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004ef2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004ef6:	f7fb fb87 	bl	8000608 <__aeabi_dmul>
 8004efa:	4682      	mov	sl, r0
 8004efc:	4648      	mov	r0, r9
 8004efe:	468b      	mov	fp, r1
 8004f00:	f7fb fb08 	bl	8000514 <__aeabi_ui2d>
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	4650      	mov	r0, sl
 8004f0a:	4659      	mov	r1, fp
 8004f0c:	f7fb f9c6 	bl	800029c <__adddf3>
 8004f10:	4682      	mov	sl, r0
 8004f12:	468b      	mov	fp, r1
 8004f14:	2d0f      	cmp	r5, #15
 8004f16:	dc38      	bgt.n	8004f8a <_strtod_l+0x45a>
 8004f18:	9b08      	ldr	r3, [sp, #32]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f43f ae4a 	beq.w	8004bb4 <_strtod_l+0x84>
 8004f20:	dd24      	ble.n	8004f6c <_strtod_l+0x43c>
 8004f22:	2b16      	cmp	r3, #22
 8004f24:	dc0b      	bgt.n	8004f3e <_strtod_l+0x40e>
 8004f26:	4d6b      	ldr	r5, [pc, #428]	; (80050d4 <_strtod_l+0x5a4>)
 8004f28:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8004f2c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004f30:	4652      	mov	r2, sl
 8004f32:	465b      	mov	r3, fp
 8004f34:	f7fb fb68 	bl	8000608 <__aeabi_dmul>
 8004f38:	4682      	mov	sl, r0
 8004f3a:	468b      	mov	fp, r1
 8004f3c:	e63a      	b.n	8004bb4 <_strtod_l+0x84>
 8004f3e:	9a08      	ldr	r2, [sp, #32]
 8004f40:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8004f44:	4293      	cmp	r3, r2
 8004f46:	db20      	blt.n	8004f8a <_strtod_l+0x45a>
 8004f48:	4c62      	ldr	r4, [pc, #392]	; (80050d4 <_strtod_l+0x5a4>)
 8004f4a:	f1c5 050f 	rsb	r5, r5, #15
 8004f4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004f52:	4652      	mov	r2, sl
 8004f54:	465b      	mov	r3, fp
 8004f56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f5a:	f7fb fb55 	bl	8000608 <__aeabi_dmul>
 8004f5e:	9b08      	ldr	r3, [sp, #32]
 8004f60:	1b5d      	subs	r5, r3, r5
 8004f62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004f66:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004f6a:	e7e3      	b.n	8004f34 <_strtod_l+0x404>
 8004f6c:	9b08      	ldr	r3, [sp, #32]
 8004f6e:	3316      	adds	r3, #22
 8004f70:	db0b      	blt.n	8004f8a <_strtod_l+0x45a>
 8004f72:	9b07      	ldr	r3, [sp, #28]
 8004f74:	4a57      	ldr	r2, [pc, #348]	; (80050d4 <_strtod_l+0x5a4>)
 8004f76:	1b9e      	subs	r6, r3, r6
 8004f78:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8004f7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004f80:	4650      	mov	r0, sl
 8004f82:	4659      	mov	r1, fp
 8004f84:	f7fb fc6a 	bl	800085c <__aeabi_ddiv>
 8004f88:	e7d6      	b.n	8004f38 <_strtod_l+0x408>
 8004f8a:	9b08      	ldr	r3, [sp, #32]
 8004f8c:	eba5 0808 	sub.w	r8, r5, r8
 8004f90:	4498      	add	r8, r3
 8004f92:	f1b8 0f00 	cmp.w	r8, #0
 8004f96:	dd71      	ble.n	800507c <_strtod_l+0x54c>
 8004f98:	f018 030f 	ands.w	r3, r8, #15
 8004f9c:	d00a      	beq.n	8004fb4 <_strtod_l+0x484>
 8004f9e:	494d      	ldr	r1, [pc, #308]	; (80050d4 <_strtod_l+0x5a4>)
 8004fa0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004fa4:	4652      	mov	r2, sl
 8004fa6:	465b      	mov	r3, fp
 8004fa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004fac:	f7fb fb2c 	bl	8000608 <__aeabi_dmul>
 8004fb0:	4682      	mov	sl, r0
 8004fb2:	468b      	mov	fp, r1
 8004fb4:	f038 080f 	bics.w	r8, r8, #15
 8004fb8:	d04d      	beq.n	8005056 <_strtod_l+0x526>
 8004fba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004fbe:	dd22      	ble.n	8005006 <_strtod_l+0x4d6>
 8004fc0:	2500      	movs	r5, #0
 8004fc2:	462e      	mov	r6, r5
 8004fc4:	9509      	str	r5, [sp, #36]	; 0x24
 8004fc6:	9507      	str	r5, [sp, #28]
 8004fc8:	2322      	movs	r3, #34	; 0x22
 8004fca:	f8df b110 	ldr.w	fp, [pc, #272]	; 80050dc <_strtod_l+0x5ac>
 8004fce:	6023      	str	r3, [r4, #0]
 8004fd0:	f04f 0a00 	mov.w	sl, #0
 8004fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f43f adec 	beq.w	8004bb4 <_strtod_l+0x84>
 8004fdc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004fde:	4620      	mov	r0, r4
 8004fe0:	f001 fe84 	bl	8006cec <_Bfree>
 8004fe4:	9907      	ldr	r1, [sp, #28]
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	f001 fe80 	bl	8006cec <_Bfree>
 8004fec:	4631      	mov	r1, r6
 8004fee:	4620      	mov	r0, r4
 8004ff0:	f001 fe7c 	bl	8006cec <_Bfree>
 8004ff4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	f001 fe78 	bl	8006cec <_Bfree>
 8004ffc:	4629      	mov	r1, r5
 8004ffe:	4620      	mov	r0, r4
 8005000:	f001 fe74 	bl	8006cec <_Bfree>
 8005004:	e5d6      	b.n	8004bb4 <_strtod_l+0x84>
 8005006:	2300      	movs	r3, #0
 8005008:	ea4f 1828 	mov.w	r8, r8, asr #4
 800500c:	4650      	mov	r0, sl
 800500e:	4659      	mov	r1, fp
 8005010:	4699      	mov	r9, r3
 8005012:	f1b8 0f01 	cmp.w	r8, #1
 8005016:	dc21      	bgt.n	800505c <_strtod_l+0x52c>
 8005018:	b10b      	cbz	r3, 800501e <_strtod_l+0x4ee>
 800501a:	4682      	mov	sl, r0
 800501c:	468b      	mov	fp, r1
 800501e:	4b2e      	ldr	r3, [pc, #184]	; (80050d8 <_strtod_l+0x5a8>)
 8005020:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005024:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005028:	4652      	mov	r2, sl
 800502a:	465b      	mov	r3, fp
 800502c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005030:	f7fb faea 	bl	8000608 <__aeabi_dmul>
 8005034:	4b29      	ldr	r3, [pc, #164]	; (80050dc <_strtod_l+0x5ac>)
 8005036:	460a      	mov	r2, r1
 8005038:	400b      	ands	r3, r1
 800503a:	4929      	ldr	r1, [pc, #164]	; (80050e0 <_strtod_l+0x5b0>)
 800503c:	428b      	cmp	r3, r1
 800503e:	4682      	mov	sl, r0
 8005040:	d8be      	bhi.n	8004fc0 <_strtod_l+0x490>
 8005042:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005046:	428b      	cmp	r3, r1
 8005048:	bf86      	itte	hi
 800504a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80050e4 <_strtod_l+0x5b4>
 800504e:	f04f 3aff 	movhi.w	sl, #4294967295
 8005052:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005056:	2300      	movs	r3, #0
 8005058:	9304      	str	r3, [sp, #16]
 800505a:	e081      	b.n	8005160 <_strtod_l+0x630>
 800505c:	f018 0f01 	tst.w	r8, #1
 8005060:	d007      	beq.n	8005072 <_strtod_l+0x542>
 8005062:	4b1d      	ldr	r3, [pc, #116]	; (80050d8 <_strtod_l+0x5a8>)
 8005064:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506c:	f7fb facc 	bl	8000608 <__aeabi_dmul>
 8005070:	2301      	movs	r3, #1
 8005072:	f109 0901 	add.w	r9, r9, #1
 8005076:	ea4f 0868 	mov.w	r8, r8, asr #1
 800507a:	e7ca      	b.n	8005012 <_strtod_l+0x4e2>
 800507c:	d0eb      	beq.n	8005056 <_strtod_l+0x526>
 800507e:	f1c8 0800 	rsb	r8, r8, #0
 8005082:	f018 020f 	ands.w	r2, r8, #15
 8005086:	d00a      	beq.n	800509e <_strtod_l+0x56e>
 8005088:	4b12      	ldr	r3, [pc, #72]	; (80050d4 <_strtod_l+0x5a4>)
 800508a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800508e:	4650      	mov	r0, sl
 8005090:	4659      	mov	r1, fp
 8005092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005096:	f7fb fbe1 	bl	800085c <__aeabi_ddiv>
 800509a:	4682      	mov	sl, r0
 800509c:	468b      	mov	fp, r1
 800509e:	ea5f 1828 	movs.w	r8, r8, asr #4
 80050a2:	d0d8      	beq.n	8005056 <_strtod_l+0x526>
 80050a4:	f1b8 0f1f 	cmp.w	r8, #31
 80050a8:	dd1e      	ble.n	80050e8 <_strtod_l+0x5b8>
 80050aa:	2500      	movs	r5, #0
 80050ac:	462e      	mov	r6, r5
 80050ae:	9509      	str	r5, [sp, #36]	; 0x24
 80050b0:	9507      	str	r5, [sp, #28]
 80050b2:	2322      	movs	r3, #34	; 0x22
 80050b4:	f04f 0a00 	mov.w	sl, #0
 80050b8:	f04f 0b00 	mov.w	fp, #0
 80050bc:	6023      	str	r3, [r4, #0]
 80050be:	e789      	b.n	8004fd4 <_strtod_l+0x4a4>
 80050c0:	08008665 	.word	0x08008665
 80050c4:	080086a8 	.word	0x080086a8
 80050c8:	0800865d 	.word	0x0800865d
 80050cc:	080087ec 	.word	0x080087ec
 80050d0:	08008aa8 	.word	0x08008aa8
 80050d4:	08008988 	.word	0x08008988
 80050d8:	08008960 	.word	0x08008960
 80050dc:	7ff00000 	.word	0x7ff00000
 80050e0:	7ca00000 	.word	0x7ca00000
 80050e4:	7fefffff 	.word	0x7fefffff
 80050e8:	f018 0310 	ands.w	r3, r8, #16
 80050ec:	bf18      	it	ne
 80050ee:	236a      	movne	r3, #106	; 0x6a
 80050f0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80054a8 <_strtod_l+0x978>
 80050f4:	9304      	str	r3, [sp, #16]
 80050f6:	4650      	mov	r0, sl
 80050f8:	4659      	mov	r1, fp
 80050fa:	2300      	movs	r3, #0
 80050fc:	f018 0f01 	tst.w	r8, #1
 8005100:	d004      	beq.n	800510c <_strtod_l+0x5dc>
 8005102:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005106:	f7fb fa7f 	bl	8000608 <__aeabi_dmul>
 800510a:	2301      	movs	r3, #1
 800510c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005110:	f109 0908 	add.w	r9, r9, #8
 8005114:	d1f2      	bne.n	80050fc <_strtod_l+0x5cc>
 8005116:	b10b      	cbz	r3, 800511c <_strtod_l+0x5ec>
 8005118:	4682      	mov	sl, r0
 800511a:	468b      	mov	fp, r1
 800511c:	9b04      	ldr	r3, [sp, #16]
 800511e:	b1bb      	cbz	r3, 8005150 <_strtod_l+0x620>
 8005120:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005124:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005128:	2b00      	cmp	r3, #0
 800512a:	4659      	mov	r1, fp
 800512c:	dd10      	ble.n	8005150 <_strtod_l+0x620>
 800512e:	2b1f      	cmp	r3, #31
 8005130:	f340 8128 	ble.w	8005384 <_strtod_l+0x854>
 8005134:	2b34      	cmp	r3, #52	; 0x34
 8005136:	bfde      	ittt	le
 8005138:	3b20      	suble	r3, #32
 800513a:	f04f 32ff 	movle.w	r2, #4294967295
 800513e:	fa02 f303 	lslle.w	r3, r2, r3
 8005142:	f04f 0a00 	mov.w	sl, #0
 8005146:	bfcc      	ite	gt
 8005148:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800514c:	ea03 0b01 	andle.w	fp, r3, r1
 8005150:	2200      	movs	r2, #0
 8005152:	2300      	movs	r3, #0
 8005154:	4650      	mov	r0, sl
 8005156:	4659      	mov	r1, fp
 8005158:	f7fb fcbe 	bl	8000ad8 <__aeabi_dcmpeq>
 800515c:	2800      	cmp	r0, #0
 800515e:	d1a4      	bne.n	80050aa <_strtod_l+0x57a>
 8005160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005166:	462b      	mov	r3, r5
 8005168:	463a      	mov	r2, r7
 800516a:	4620      	mov	r0, r4
 800516c:	f001 fe2a 	bl	8006dc4 <__s2b>
 8005170:	9009      	str	r0, [sp, #36]	; 0x24
 8005172:	2800      	cmp	r0, #0
 8005174:	f43f af24 	beq.w	8004fc0 <_strtod_l+0x490>
 8005178:	9b07      	ldr	r3, [sp, #28]
 800517a:	1b9e      	subs	r6, r3, r6
 800517c:	9b08      	ldr	r3, [sp, #32]
 800517e:	2b00      	cmp	r3, #0
 8005180:	bfb4      	ite	lt
 8005182:	4633      	movlt	r3, r6
 8005184:	2300      	movge	r3, #0
 8005186:	9310      	str	r3, [sp, #64]	; 0x40
 8005188:	9b08      	ldr	r3, [sp, #32]
 800518a:	2500      	movs	r5, #0
 800518c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005190:	9318      	str	r3, [sp, #96]	; 0x60
 8005192:	462e      	mov	r6, r5
 8005194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005196:	4620      	mov	r0, r4
 8005198:	6859      	ldr	r1, [r3, #4]
 800519a:	f001 fd67 	bl	8006c6c <_Balloc>
 800519e:	9007      	str	r0, [sp, #28]
 80051a0:	2800      	cmp	r0, #0
 80051a2:	f43f af11 	beq.w	8004fc8 <_strtod_l+0x498>
 80051a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051a8:	691a      	ldr	r2, [r3, #16]
 80051aa:	3202      	adds	r2, #2
 80051ac:	f103 010c 	add.w	r1, r3, #12
 80051b0:	0092      	lsls	r2, r2, #2
 80051b2:	300c      	adds	r0, #12
 80051b4:	f7fe fdea 	bl	8003d8c <memcpy>
 80051b8:	ec4b ab10 	vmov	d0, sl, fp
 80051bc:	aa20      	add	r2, sp, #128	; 0x80
 80051be:	a91f      	add	r1, sp, #124	; 0x7c
 80051c0:	4620      	mov	r0, r4
 80051c2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80051c6:	f002 f939 	bl	800743c <__d2b>
 80051ca:	901e      	str	r0, [sp, #120]	; 0x78
 80051cc:	2800      	cmp	r0, #0
 80051ce:	f43f aefb 	beq.w	8004fc8 <_strtod_l+0x498>
 80051d2:	2101      	movs	r1, #1
 80051d4:	4620      	mov	r0, r4
 80051d6:	f001 fe8f 	bl	8006ef8 <__i2b>
 80051da:	4606      	mov	r6, r0
 80051dc:	2800      	cmp	r0, #0
 80051de:	f43f aef3 	beq.w	8004fc8 <_strtod_l+0x498>
 80051e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80051e4:	9904      	ldr	r1, [sp, #16]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	bfab      	itete	ge
 80051ea:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80051ec:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80051ee:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80051f0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80051f4:	bfac      	ite	ge
 80051f6:	eb03 0902 	addge.w	r9, r3, r2
 80051fa:	1ad7      	sublt	r7, r2, r3
 80051fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80051fe:	eba3 0801 	sub.w	r8, r3, r1
 8005202:	4490      	add	r8, r2
 8005204:	4ba3      	ldr	r3, [pc, #652]	; (8005494 <_strtod_l+0x964>)
 8005206:	f108 38ff 	add.w	r8, r8, #4294967295
 800520a:	4598      	cmp	r8, r3
 800520c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005210:	f280 80cc 	bge.w	80053ac <_strtod_l+0x87c>
 8005214:	eba3 0308 	sub.w	r3, r3, r8
 8005218:	2b1f      	cmp	r3, #31
 800521a:	eba2 0203 	sub.w	r2, r2, r3
 800521e:	f04f 0101 	mov.w	r1, #1
 8005222:	f300 80b6 	bgt.w	8005392 <_strtod_l+0x862>
 8005226:	fa01 f303 	lsl.w	r3, r1, r3
 800522a:	9311      	str	r3, [sp, #68]	; 0x44
 800522c:	2300      	movs	r3, #0
 800522e:	930c      	str	r3, [sp, #48]	; 0x30
 8005230:	eb09 0802 	add.w	r8, r9, r2
 8005234:	9b04      	ldr	r3, [sp, #16]
 8005236:	45c1      	cmp	r9, r8
 8005238:	4417      	add	r7, r2
 800523a:	441f      	add	r7, r3
 800523c:	464b      	mov	r3, r9
 800523e:	bfa8      	it	ge
 8005240:	4643      	movge	r3, r8
 8005242:	42bb      	cmp	r3, r7
 8005244:	bfa8      	it	ge
 8005246:	463b      	movge	r3, r7
 8005248:	2b00      	cmp	r3, #0
 800524a:	bfc2      	ittt	gt
 800524c:	eba8 0803 	subgt.w	r8, r8, r3
 8005250:	1aff      	subgt	r7, r7, r3
 8005252:	eba9 0903 	subgt.w	r9, r9, r3
 8005256:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005258:	2b00      	cmp	r3, #0
 800525a:	dd17      	ble.n	800528c <_strtod_l+0x75c>
 800525c:	4631      	mov	r1, r6
 800525e:	461a      	mov	r2, r3
 8005260:	4620      	mov	r0, r4
 8005262:	f001 ff05 	bl	8007070 <__pow5mult>
 8005266:	4606      	mov	r6, r0
 8005268:	2800      	cmp	r0, #0
 800526a:	f43f aead 	beq.w	8004fc8 <_strtod_l+0x498>
 800526e:	4601      	mov	r1, r0
 8005270:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005272:	4620      	mov	r0, r4
 8005274:	f001 fe56 	bl	8006f24 <__multiply>
 8005278:	900f      	str	r0, [sp, #60]	; 0x3c
 800527a:	2800      	cmp	r0, #0
 800527c:	f43f aea4 	beq.w	8004fc8 <_strtod_l+0x498>
 8005280:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005282:	4620      	mov	r0, r4
 8005284:	f001 fd32 	bl	8006cec <_Bfree>
 8005288:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800528a:	931e      	str	r3, [sp, #120]	; 0x78
 800528c:	f1b8 0f00 	cmp.w	r8, #0
 8005290:	f300 8091 	bgt.w	80053b6 <_strtod_l+0x886>
 8005294:	9b08      	ldr	r3, [sp, #32]
 8005296:	2b00      	cmp	r3, #0
 8005298:	dd08      	ble.n	80052ac <_strtod_l+0x77c>
 800529a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800529c:	9907      	ldr	r1, [sp, #28]
 800529e:	4620      	mov	r0, r4
 80052a0:	f001 fee6 	bl	8007070 <__pow5mult>
 80052a4:	9007      	str	r0, [sp, #28]
 80052a6:	2800      	cmp	r0, #0
 80052a8:	f43f ae8e 	beq.w	8004fc8 <_strtod_l+0x498>
 80052ac:	2f00      	cmp	r7, #0
 80052ae:	dd08      	ble.n	80052c2 <_strtod_l+0x792>
 80052b0:	9907      	ldr	r1, [sp, #28]
 80052b2:	463a      	mov	r2, r7
 80052b4:	4620      	mov	r0, r4
 80052b6:	f001 ff35 	bl	8007124 <__lshift>
 80052ba:	9007      	str	r0, [sp, #28]
 80052bc:	2800      	cmp	r0, #0
 80052be:	f43f ae83 	beq.w	8004fc8 <_strtod_l+0x498>
 80052c2:	f1b9 0f00 	cmp.w	r9, #0
 80052c6:	dd08      	ble.n	80052da <_strtod_l+0x7aa>
 80052c8:	4631      	mov	r1, r6
 80052ca:	464a      	mov	r2, r9
 80052cc:	4620      	mov	r0, r4
 80052ce:	f001 ff29 	bl	8007124 <__lshift>
 80052d2:	4606      	mov	r6, r0
 80052d4:	2800      	cmp	r0, #0
 80052d6:	f43f ae77 	beq.w	8004fc8 <_strtod_l+0x498>
 80052da:	9a07      	ldr	r2, [sp, #28]
 80052dc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80052de:	4620      	mov	r0, r4
 80052e0:	f001 ffa8 	bl	8007234 <__mdiff>
 80052e4:	4605      	mov	r5, r0
 80052e6:	2800      	cmp	r0, #0
 80052e8:	f43f ae6e 	beq.w	8004fc8 <_strtod_l+0x498>
 80052ec:	68c3      	ldr	r3, [r0, #12]
 80052ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80052f0:	2300      	movs	r3, #0
 80052f2:	60c3      	str	r3, [r0, #12]
 80052f4:	4631      	mov	r1, r6
 80052f6:	f001 ff81 	bl	80071fc <__mcmp>
 80052fa:	2800      	cmp	r0, #0
 80052fc:	da65      	bge.n	80053ca <_strtod_l+0x89a>
 80052fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005300:	ea53 030a 	orrs.w	r3, r3, sl
 8005304:	f040 8087 	bne.w	8005416 <_strtod_l+0x8e6>
 8005308:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800530c:	2b00      	cmp	r3, #0
 800530e:	f040 8082 	bne.w	8005416 <_strtod_l+0x8e6>
 8005312:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005316:	0d1b      	lsrs	r3, r3, #20
 8005318:	051b      	lsls	r3, r3, #20
 800531a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800531e:	d97a      	bls.n	8005416 <_strtod_l+0x8e6>
 8005320:	696b      	ldr	r3, [r5, #20]
 8005322:	b913      	cbnz	r3, 800532a <_strtod_l+0x7fa>
 8005324:	692b      	ldr	r3, [r5, #16]
 8005326:	2b01      	cmp	r3, #1
 8005328:	dd75      	ble.n	8005416 <_strtod_l+0x8e6>
 800532a:	4629      	mov	r1, r5
 800532c:	2201      	movs	r2, #1
 800532e:	4620      	mov	r0, r4
 8005330:	f001 fef8 	bl	8007124 <__lshift>
 8005334:	4631      	mov	r1, r6
 8005336:	4605      	mov	r5, r0
 8005338:	f001 ff60 	bl	80071fc <__mcmp>
 800533c:	2800      	cmp	r0, #0
 800533e:	dd6a      	ble.n	8005416 <_strtod_l+0x8e6>
 8005340:	9904      	ldr	r1, [sp, #16]
 8005342:	4a55      	ldr	r2, [pc, #340]	; (8005498 <_strtod_l+0x968>)
 8005344:	465b      	mov	r3, fp
 8005346:	2900      	cmp	r1, #0
 8005348:	f000 8085 	beq.w	8005456 <_strtod_l+0x926>
 800534c:	ea02 010b 	and.w	r1, r2, fp
 8005350:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005354:	dc7f      	bgt.n	8005456 <_strtod_l+0x926>
 8005356:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800535a:	f77f aeaa 	ble.w	80050b2 <_strtod_l+0x582>
 800535e:	4a4f      	ldr	r2, [pc, #316]	; (800549c <_strtod_l+0x96c>)
 8005360:	2300      	movs	r3, #0
 8005362:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8005366:	4650      	mov	r0, sl
 8005368:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800536c:	4659      	mov	r1, fp
 800536e:	f7fb f94b 	bl	8000608 <__aeabi_dmul>
 8005372:	460b      	mov	r3, r1
 8005374:	4303      	orrs	r3, r0
 8005376:	bf08      	it	eq
 8005378:	2322      	moveq	r3, #34	; 0x22
 800537a:	4682      	mov	sl, r0
 800537c:	468b      	mov	fp, r1
 800537e:	bf08      	it	eq
 8005380:	6023      	streq	r3, [r4, #0]
 8005382:	e62b      	b.n	8004fdc <_strtod_l+0x4ac>
 8005384:	f04f 32ff 	mov.w	r2, #4294967295
 8005388:	fa02 f303 	lsl.w	r3, r2, r3
 800538c:	ea03 0a0a 	and.w	sl, r3, sl
 8005390:	e6de      	b.n	8005150 <_strtod_l+0x620>
 8005392:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005396:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800539a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800539e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80053a2:	fa01 f308 	lsl.w	r3, r1, r8
 80053a6:	930c      	str	r3, [sp, #48]	; 0x30
 80053a8:	9111      	str	r1, [sp, #68]	; 0x44
 80053aa:	e741      	b.n	8005230 <_strtod_l+0x700>
 80053ac:	2300      	movs	r3, #0
 80053ae:	930c      	str	r3, [sp, #48]	; 0x30
 80053b0:	2301      	movs	r3, #1
 80053b2:	9311      	str	r3, [sp, #68]	; 0x44
 80053b4:	e73c      	b.n	8005230 <_strtod_l+0x700>
 80053b6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80053b8:	4642      	mov	r2, r8
 80053ba:	4620      	mov	r0, r4
 80053bc:	f001 feb2 	bl	8007124 <__lshift>
 80053c0:	901e      	str	r0, [sp, #120]	; 0x78
 80053c2:	2800      	cmp	r0, #0
 80053c4:	f47f af66 	bne.w	8005294 <_strtod_l+0x764>
 80053c8:	e5fe      	b.n	8004fc8 <_strtod_l+0x498>
 80053ca:	465f      	mov	r7, fp
 80053cc:	d16e      	bne.n	80054ac <_strtod_l+0x97c>
 80053ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80053d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80053d4:	b342      	cbz	r2, 8005428 <_strtod_l+0x8f8>
 80053d6:	4a32      	ldr	r2, [pc, #200]	; (80054a0 <_strtod_l+0x970>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d128      	bne.n	800542e <_strtod_l+0x8fe>
 80053dc:	9b04      	ldr	r3, [sp, #16]
 80053de:	4650      	mov	r0, sl
 80053e0:	b1eb      	cbz	r3, 800541e <_strtod_l+0x8ee>
 80053e2:	4a2d      	ldr	r2, [pc, #180]	; (8005498 <_strtod_l+0x968>)
 80053e4:	403a      	ands	r2, r7
 80053e6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80053ea:	f04f 31ff 	mov.w	r1, #4294967295
 80053ee:	d819      	bhi.n	8005424 <_strtod_l+0x8f4>
 80053f0:	0d12      	lsrs	r2, r2, #20
 80053f2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80053f6:	fa01 f303 	lsl.w	r3, r1, r3
 80053fa:	4298      	cmp	r0, r3
 80053fc:	d117      	bne.n	800542e <_strtod_l+0x8fe>
 80053fe:	4b29      	ldr	r3, [pc, #164]	; (80054a4 <_strtod_l+0x974>)
 8005400:	429f      	cmp	r7, r3
 8005402:	d102      	bne.n	800540a <_strtod_l+0x8da>
 8005404:	3001      	adds	r0, #1
 8005406:	f43f addf 	beq.w	8004fc8 <_strtod_l+0x498>
 800540a:	4b23      	ldr	r3, [pc, #140]	; (8005498 <_strtod_l+0x968>)
 800540c:	403b      	ands	r3, r7
 800540e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005412:	f04f 0a00 	mov.w	sl, #0
 8005416:	9b04      	ldr	r3, [sp, #16]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1a0      	bne.n	800535e <_strtod_l+0x82e>
 800541c:	e5de      	b.n	8004fdc <_strtod_l+0x4ac>
 800541e:	f04f 33ff 	mov.w	r3, #4294967295
 8005422:	e7ea      	b.n	80053fa <_strtod_l+0x8ca>
 8005424:	460b      	mov	r3, r1
 8005426:	e7e8      	b.n	80053fa <_strtod_l+0x8ca>
 8005428:	ea53 030a 	orrs.w	r3, r3, sl
 800542c:	d088      	beq.n	8005340 <_strtod_l+0x810>
 800542e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005430:	b1db      	cbz	r3, 800546a <_strtod_l+0x93a>
 8005432:	423b      	tst	r3, r7
 8005434:	d0ef      	beq.n	8005416 <_strtod_l+0x8e6>
 8005436:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005438:	9a04      	ldr	r2, [sp, #16]
 800543a:	4650      	mov	r0, sl
 800543c:	4659      	mov	r1, fp
 800543e:	b1c3      	cbz	r3, 8005472 <_strtod_l+0x942>
 8005440:	f7ff fb5a 	bl	8004af8 <sulp>
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800544c:	f7fa ff26 	bl	800029c <__adddf3>
 8005450:	4682      	mov	sl, r0
 8005452:	468b      	mov	fp, r1
 8005454:	e7df      	b.n	8005416 <_strtod_l+0x8e6>
 8005456:	4013      	ands	r3, r2
 8005458:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800545c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005460:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005464:	f04f 3aff 	mov.w	sl, #4294967295
 8005468:	e7d5      	b.n	8005416 <_strtod_l+0x8e6>
 800546a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800546c:	ea13 0f0a 	tst.w	r3, sl
 8005470:	e7e0      	b.n	8005434 <_strtod_l+0x904>
 8005472:	f7ff fb41 	bl	8004af8 <sulp>
 8005476:	4602      	mov	r2, r0
 8005478:	460b      	mov	r3, r1
 800547a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800547e:	f7fa ff0b 	bl	8000298 <__aeabi_dsub>
 8005482:	2200      	movs	r2, #0
 8005484:	2300      	movs	r3, #0
 8005486:	4682      	mov	sl, r0
 8005488:	468b      	mov	fp, r1
 800548a:	f7fb fb25 	bl	8000ad8 <__aeabi_dcmpeq>
 800548e:	2800      	cmp	r0, #0
 8005490:	d0c1      	beq.n	8005416 <_strtod_l+0x8e6>
 8005492:	e60e      	b.n	80050b2 <_strtod_l+0x582>
 8005494:	fffffc02 	.word	0xfffffc02
 8005498:	7ff00000 	.word	0x7ff00000
 800549c:	39500000 	.word	0x39500000
 80054a0:	000fffff 	.word	0x000fffff
 80054a4:	7fefffff 	.word	0x7fefffff
 80054a8:	080086c0 	.word	0x080086c0
 80054ac:	4631      	mov	r1, r6
 80054ae:	4628      	mov	r0, r5
 80054b0:	f002 f820 	bl	80074f4 <__ratio>
 80054b4:	ec59 8b10 	vmov	r8, r9, d0
 80054b8:	ee10 0a10 	vmov	r0, s0
 80054bc:	2200      	movs	r2, #0
 80054be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80054c2:	4649      	mov	r1, r9
 80054c4:	f7fb fb1c 	bl	8000b00 <__aeabi_dcmple>
 80054c8:	2800      	cmp	r0, #0
 80054ca:	d07c      	beq.n	80055c6 <_strtod_l+0xa96>
 80054cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d04c      	beq.n	800556c <_strtod_l+0xa3c>
 80054d2:	4b95      	ldr	r3, [pc, #596]	; (8005728 <_strtod_l+0xbf8>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80054da:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005728 <_strtod_l+0xbf8>
 80054de:	f04f 0800 	mov.w	r8, #0
 80054e2:	4b92      	ldr	r3, [pc, #584]	; (800572c <_strtod_l+0xbfc>)
 80054e4:	403b      	ands	r3, r7
 80054e6:	9311      	str	r3, [sp, #68]	; 0x44
 80054e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80054ea:	4b91      	ldr	r3, [pc, #580]	; (8005730 <_strtod_l+0xc00>)
 80054ec:	429a      	cmp	r2, r3
 80054ee:	f040 80b2 	bne.w	8005656 <_strtod_l+0xb26>
 80054f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80054f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80054fa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80054fe:	ec4b ab10 	vmov	d0, sl, fp
 8005502:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8005506:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800550a:	f001 ff1b 	bl	8007344 <__ulp>
 800550e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005512:	ec53 2b10 	vmov	r2, r3, d0
 8005516:	f7fb f877 	bl	8000608 <__aeabi_dmul>
 800551a:	4652      	mov	r2, sl
 800551c:	465b      	mov	r3, fp
 800551e:	f7fa febd 	bl	800029c <__adddf3>
 8005522:	460b      	mov	r3, r1
 8005524:	4981      	ldr	r1, [pc, #516]	; (800572c <_strtod_l+0xbfc>)
 8005526:	4a83      	ldr	r2, [pc, #524]	; (8005734 <_strtod_l+0xc04>)
 8005528:	4019      	ands	r1, r3
 800552a:	4291      	cmp	r1, r2
 800552c:	4682      	mov	sl, r0
 800552e:	d95e      	bls.n	80055ee <_strtod_l+0xabe>
 8005530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005532:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005536:	4293      	cmp	r3, r2
 8005538:	d103      	bne.n	8005542 <_strtod_l+0xa12>
 800553a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800553c:	3301      	adds	r3, #1
 800553e:	f43f ad43 	beq.w	8004fc8 <_strtod_l+0x498>
 8005542:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8005740 <_strtod_l+0xc10>
 8005546:	f04f 3aff 	mov.w	sl, #4294967295
 800554a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800554c:	4620      	mov	r0, r4
 800554e:	f001 fbcd 	bl	8006cec <_Bfree>
 8005552:	9907      	ldr	r1, [sp, #28]
 8005554:	4620      	mov	r0, r4
 8005556:	f001 fbc9 	bl	8006cec <_Bfree>
 800555a:	4631      	mov	r1, r6
 800555c:	4620      	mov	r0, r4
 800555e:	f001 fbc5 	bl	8006cec <_Bfree>
 8005562:	4629      	mov	r1, r5
 8005564:	4620      	mov	r0, r4
 8005566:	f001 fbc1 	bl	8006cec <_Bfree>
 800556a:	e613      	b.n	8005194 <_strtod_l+0x664>
 800556c:	f1ba 0f00 	cmp.w	sl, #0
 8005570:	d11b      	bne.n	80055aa <_strtod_l+0xa7a>
 8005572:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005576:	b9f3      	cbnz	r3, 80055b6 <_strtod_l+0xa86>
 8005578:	4b6b      	ldr	r3, [pc, #428]	; (8005728 <_strtod_l+0xbf8>)
 800557a:	2200      	movs	r2, #0
 800557c:	4640      	mov	r0, r8
 800557e:	4649      	mov	r1, r9
 8005580:	f7fb fab4 	bl	8000aec <__aeabi_dcmplt>
 8005584:	b9d0      	cbnz	r0, 80055bc <_strtod_l+0xa8c>
 8005586:	4640      	mov	r0, r8
 8005588:	4649      	mov	r1, r9
 800558a:	4b6b      	ldr	r3, [pc, #428]	; (8005738 <_strtod_l+0xc08>)
 800558c:	2200      	movs	r2, #0
 800558e:	f7fb f83b 	bl	8000608 <__aeabi_dmul>
 8005592:	4680      	mov	r8, r0
 8005594:	4689      	mov	r9, r1
 8005596:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800559a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800559e:	931b      	str	r3, [sp, #108]	; 0x6c
 80055a0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80055a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80055a8:	e79b      	b.n	80054e2 <_strtod_l+0x9b2>
 80055aa:	f1ba 0f01 	cmp.w	sl, #1
 80055ae:	d102      	bne.n	80055b6 <_strtod_l+0xa86>
 80055b0:	2f00      	cmp	r7, #0
 80055b2:	f43f ad7e 	beq.w	80050b2 <_strtod_l+0x582>
 80055b6:	4b61      	ldr	r3, [pc, #388]	; (800573c <_strtod_l+0xc0c>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	e78c      	b.n	80054d6 <_strtod_l+0x9a6>
 80055bc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005738 <_strtod_l+0xc08>
 80055c0:	f04f 0800 	mov.w	r8, #0
 80055c4:	e7e7      	b.n	8005596 <_strtod_l+0xa66>
 80055c6:	4b5c      	ldr	r3, [pc, #368]	; (8005738 <_strtod_l+0xc08>)
 80055c8:	4640      	mov	r0, r8
 80055ca:	4649      	mov	r1, r9
 80055cc:	2200      	movs	r2, #0
 80055ce:	f7fb f81b 	bl	8000608 <__aeabi_dmul>
 80055d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80055d4:	4680      	mov	r8, r0
 80055d6:	4689      	mov	r9, r1
 80055d8:	b933      	cbnz	r3, 80055e8 <_strtod_l+0xab8>
 80055da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80055de:	9012      	str	r0, [sp, #72]	; 0x48
 80055e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80055e2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80055e6:	e7dd      	b.n	80055a4 <_strtod_l+0xa74>
 80055e8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80055ec:	e7f9      	b.n	80055e2 <_strtod_l+0xab2>
 80055ee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80055f2:	9b04      	ldr	r3, [sp, #16]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1a8      	bne.n	800554a <_strtod_l+0xa1a>
 80055f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80055fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80055fe:	0d1b      	lsrs	r3, r3, #20
 8005600:	051b      	lsls	r3, r3, #20
 8005602:	429a      	cmp	r2, r3
 8005604:	d1a1      	bne.n	800554a <_strtod_l+0xa1a>
 8005606:	4640      	mov	r0, r8
 8005608:	4649      	mov	r1, r9
 800560a:	f7fb fb5d 	bl	8000cc8 <__aeabi_d2lz>
 800560e:	f7fa ffcd 	bl	80005ac <__aeabi_l2d>
 8005612:	4602      	mov	r2, r0
 8005614:	460b      	mov	r3, r1
 8005616:	4640      	mov	r0, r8
 8005618:	4649      	mov	r1, r9
 800561a:	f7fa fe3d 	bl	8000298 <__aeabi_dsub>
 800561e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005620:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005624:	ea43 030a 	orr.w	r3, r3, sl
 8005628:	4313      	orrs	r3, r2
 800562a:	4680      	mov	r8, r0
 800562c:	4689      	mov	r9, r1
 800562e:	d053      	beq.n	80056d8 <_strtod_l+0xba8>
 8005630:	a335      	add	r3, pc, #212	; (adr r3, 8005708 <_strtod_l+0xbd8>)
 8005632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005636:	f7fb fa59 	bl	8000aec <__aeabi_dcmplt>
 800563a:	2800      	cmp	r0, #0
 800563c:	f47f acce 	bne.w	8004fdc <_strtod_l+0x4ac>
 8005640:	a333      	add	r3, pc, #204	; (adr r3, 8005710 <_strtod_l+0xbe0>)
 8005642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005646:	4640      	mov	r0, r8
 8005648:	4649      	mov	r1, r9
 800564a:	f7fb fa6d 	bl	8000b28 <__aeabi_dcmpgt>
 800564e:	2800      	cmp	r0, #0
 8005650:	f43f af7b 	beq.w	800554a <_strtod_l+0xa1a>
 8005654:	e4c2      	b.n	8004fdc <_strtod_l+0x4ac>
 8005656:	9b04      	ldr	r3, [sp, #16]
 8005658:	b333      	cbz	r3, 80056a8 <_strtod_l+0xb78>
 800565a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800565c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005660:	d822      	bhi.n	80056a8 <_strtod_l+0xb78>
 8005662:	a32d      	add	r3, pc, #180	; (adr r3, 8005718 <_strtod_l+0xbe8>)
 8005664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005668:	4640      	mov	r0, r8
 800566a:	4649      	mov	r1, r9
 800566c:	f7fb fa48 	bl	8000b00 <__aeabi_dcmple>
 8005670:	b1a0      	cbz	r0, 800569c <_strtod_l+0xb6c>
 8005672:	4649      	mov	r1, r9
 8005674:	4640      	mov	r0, r8
 8005676:	f7fb fa9f 	bl	8000bb8 <__aeabi_d2uiz>
 800567a:	2801      	cmp	r0, #1
 800567c:	bf38      	it	cc
 800567e:	2001      	movcc	r0, #1
 8005680:	f7fa ff48 	bl	8000514 <__aeabi_ui2d>
 8005684:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005686:	4680      	mov	r8, r0
 8005688:	4689      	mov	r9, r1
 800568a:	bb13      	cbnz	r3, 80056d2 <_strtod_l+0xba2>
 800568c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005690:	9014      	str	r0, [sp, #80]	; 0x50
 8005692:	9315      	str	r3, [sp, #84]	; 0x54
 8005694:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005698:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800569c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800569e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80056a0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80056a4:	1a9b      	subs	r3, r3, r2
 80056a6:	930d      	str	r3, [sp, #52]	; 0x34
 80056a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80056ac:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80056b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80056b4:	f001 fe46 	bl	8007344 <__ulp>
 80056b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80056bc:	ec53 2b10 	vmov	r2, r3, d0
 80056c0:	f7fa ffa2 	bl	8000608 <__aeabi_dmul>
 80056c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80056c8:	f7fa fde8 	bl	800029c <__adddf3>
 80056cc:	4682      	mov	sl, r0
 80056ce:	468b      	mov	fp, r1
 80056d0:	e78f      	b.n	80055f2 <_strtod_l+0xac2>
 80056d2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80056d6:	e7dd      	b.n	8005694 <_strtod_l+0xb64>
 80056d8:	a311      	add	r3, pc, #68	; (adr r3, 8005720 <_strtod_l+0xbf0>)
 80056da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056de:	f7fb fa05 	bl	8000aec <__aeabi_dcmplt>
 80056e2:	e7b4      	b.n	800564e <_strtod_l+0xb1e>
 80056e4:	2300      	movs	r3, #0
 80056e6:	930e      	str	r3, [sp, #56]	; 0x38
 80056e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80056ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80056ec:	6013      	str	r3, [r2, #0]
 80056ee:	f7ff ba65 	b.w	8004bbc <_strtod_l+0x8c>
 80056f2:	2b65      	cmp	r3, #101	; 0x65
 80056f4:	f43f ab5d 	beq.w	8004db2 <_strtod_l+0x282>
 80056f8:	2b45      	cmp	r3, #69	; 0x45
 80056fa:	f43f ab5a 	beq.w	8004db2 <_strtod_l+0x282>
 80056fe:	2201      	movs	r2, #1
 8005700:	f7ff bb92 	b.w	8004e28 <_strtod_l+0x2f8>
 8005704:	f3af 8000 	nop.w
 8005708:	94a03595 	.word	0x94a03595
 800570c:	3fdfffff 	.word	0x3fdfffff
 8005710:	35afe535 	.word	0x35afe535
 8005714:	3fe00000 	.word	0x3fe00000
 8005718:	ffc00000 	.word	0xffc00000
 800571c:	41dfffff 	.word	0x41dfffff
 8005720:	94a03595 	.word	0x94a03595
 8005724:	3fcfffff 	.word	0x3fcfffff
 8005728:	3ff00000 	.word	0x3ff00000
 800572c:	7ff00000 	.word	0x7ff00000
 8005730:	7fe00000 	.word	0x7fe00000
 8005734:	7c9fffff 	.word	0x7c9fffff
 8005738:	3fe00000 	.word	0x3fe00000
 800573c:	bff00000 	.word	0xbff00000
 8005740:	7fefffff 	.word	0x7fefffff

08005744 <_strtod_r>:
 8005744:	4b01      	ldr	r3, [pc, #4]	; (800574c <_strtod_r+0x8>)
 8005746:	f7ff b9f3 	b.w	8004b30 <_strtod_l>
 800574a:	bf00      	nop
 800574c:	20000088 	.word	0x20000088

08005750 <_strtol_l.isra.0>:
 8005750:	2b01      	cmp	r3, #1
 8005752:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005756:	d001      	beq.n	800575c <_strtol_l.isra.0+0xc>
 8005758:	2b24      	cmp	r3, #36	; 0x24
 800575a:	d906      	bls.n	800576a <_strtol_l.isra.0+0x1a>
 800575c:	f7fe faec 	bl	8003d38 <__errno>
 8005760:	2316      	movs	r3, #22
 8005762:	6003      	str	r3, [r0, #0]
 8005764:	2000      	movs	r0, #0
 8005766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800576a:	4f3a      	ldr	r7, [pc, #232]	; (8005854 <_strtol_l.isra.0+0x104>)
 800576c:	468e      	mov	lr, r1
 800576e:	4676      	mov	r6, lr
 8005770:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005774:	5de5      	ldrb	r5, [r4, r7]
 8005776:	f015 0508 	ands.w	r5, r5, #8
 800577a:	d1f8      	bne.n	800576e <_strtol_l.isra.0+0x1e>
 800577c:	2c2d      	cmp	r4, #45	; 0x2d
 800577e:	d134      	bne.n	80057ea <_strtol_l.isra.0+0x9a>
 8005780:	f89e 4000 	ldrb.w	r4, [lr]
 8005784:	f04f 0801 	mov.w	r8, #1
 8005788:	f106 0e02 	add.w	lr, r6, #2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d05c      	beq.n	800584a <_strtol_l.isra.0+0xfa>
 8005790:	2b10      	cmp	r3, #16
 8005792:	d10c      	bne.n	80057ae <_strtol_l.isra.0+0x5e>
 8005794:	2c30      	cmp	r4, #48	; 0x30
 8005796:	d10a      	bne.n	80057ae <_strtol_l.isra.0+0x5e>
 8005798:	f89e 4000 	ldrb.w	r4, [lr]
 800579c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80057a0:	2c58      	cmp	r4, #88	; 0x58
 80057a2:	d14d      	bne.n	8005840 <_strtol_l.isra.0+0xf0>
 80057a4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80057a8:	2310      	movs	r3, #16
 80057aa:	f10e 0e02 	add.w	lr, lr, #2
 80057ae:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80057b2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80057b6:	2600      	movs	r6, #0
 80057b8:	fbbc f9f3 	udiv	r9, ip, r3
 80057bc:	4635      	mov	r5, r6
 80057be:	fb03 ca19 	mls	sl, r3, r9, ip
 80057c2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80057c6:	2f09      	cmp	r7, #9
 80057c8:	d818      	bhi.n	80057fc <_strtol_l.isra.0+0xac>
 80057ca:	463c      	mov	r4, r7
 80057cc:	42a3      	cmp	r3, r4
 80057ce:	dd24      	ble.n	800581a <_strtol_l.isra.0+0xca>
 80057d0:	2e00      	cmp	r6, #0
 80057d2:	db1f      	blt.n	8005814 <_strtol_l.isra.0+0xc4>
 80057d4:	45a9      	cmp	r9, r5
 80057d6:	d31d      	bcc.n	8005814 <_strtol_l.isra.0+0xc4>
 80057d8:	d101      	bne.n	80057de <_strtol_l.isra.0+0x8e>
 80057da:	45a2      	cmp	sl, r4
 80057dc:	db1a      	blt.n	8005814 <_strtol_l.isra.0+0xc4>
 80057de:	fb05 4503 	mla	r5, r5, r3, r4
 80057e2:	2601      	movs	r6, #1
 80057e4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80057e8:	e7eb      	b.n	80057c2 <_strtol_l.isra.0+0x72>
 80057ea:	2c2b      	cmp	r4, #43	; 0x2b
 80057ec:	bf08      	it	eq
 80057ee:	f89e 4000 	ldrbeq.w	r4, [lr]
 80057f2:	46a8      	mov	r8, r5
 80057f4:	bf08      	it	eq
 80057f6:	f106 0e02 	addeq.w	lr, r6, #2
 80057fa:	e7c7      	b.n	800578c <_strtol_l.isra.0+0x3c>
 80057fc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005800:	2f19      	cmp	r7, #25
 8005802:	d801      	bhi.n	8005808 <_strtol_l.isra.0+0xb8>
 8005804:	3c37      	subs	r4, #55	; 0x37
 8005806:	e7e1      	b.n	80057cc <_strtol_l.isra.0+0x7c>
 8005808:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800580c:	2f19      	cmp	r7, #25
 800580e:	d804      	bhi.n	800581a <_strtol_l.isra.0+0xca>
 8005810:	3c57      	subs	r4, #87	; 0x57
 8005812:	e7db      	b.n	80057cc <_strtol_l.isra.0+0x7c>
 8005814:	f04f 36ff 	mov.w	r6, #4294967295
 8005818:	e7e4      	b.n	80057e4 <_strtol_l.isra.0+0x94>
 800581a:	2e00      	cmp	r6, #0
 800581c:	da05      	bge.n	800582a <_strtol_l.isra.0+0xda>
 800581e:	2322      	movs	r3, #34	; 0x22
 8005820:	6003      	str	r3, [r0, #0]
 8005822:	4665      	mov	r5, ip
 8005824:	b942      	cbnz	r2, 8005838 <_strtol_l.isra.0+0xe8>
 8005826:	4628      	mov	r0, r5
 8005828:	e79d      	b.n	8005766 <_strtol_l.isra.0+0x16>
 800582a:	f1b8 0f00 	cmp.w	r8, #0
 800582e:	d000      	beq.n	8005832 <_strtol_l.isra.0+0xe2>
 8005830:	426d      	negs	r5, r5
 8005832:	2a00      	cmp	r2, #0
 8005834:	d0f7      	beq.n	8005826 <_strtol_l.isra.0+0xd6>
 8005836:	b10e      	cbz	r6, 800583c <_strtol_l.isra.0+0xec>
 8005838:	f10e 31ff 	add.w	r1, lr, #4294967295
 800583c:	6011      	str	r1, [r2, #0]
 800583e:	e7f2      	b.n	8005826 <_strtol_l.isra.0+0xd6>
 8005840:	2430      	movs	r4, #48	; 0x30
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1b3      	bne.n	80057ae <_strtol_l.isra.0+0x5e>
 8005846:	2308      	movs	r3, #8
 8005848:	e7b1      	b.n	80057ae <_strtol_l.isra.0+0x5e>
 800584a:	2c30      	cmp	r4, #48	; 0x30
 800584c:	d0a4      	beq.n	8005798 <_strtol_l.isra.0+0x48>
 800584e:	230a      	movs	r3, #10
 8005850:	e7ad      	b.n	80057ae <_strtol_l.isra.0+0x5e>
 8005852:	bf00      	nop
 8005854:	080086e9 	.word	0x080086e9

08005858 <_strtol_r>:
 8005858:	f7ff bf7a 	b.w	8005750 <_strtol_l.isra.0>

0800585c <quorem>:
 800585c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005860:	6903      	ldr	r3, [r0, #16]
 8005862:	690c      	ldr	r4, [r1, #16]
 8005864:	42a3      	cmp	r3, r4
 8005866:	4607      	mov	r7, r0
 8005868:	f2c0 8081 	blt.w	800596e <quorem+0x112>
 800586c:	3c01      	subs	r4, #1
 800586e:	f101 0814 	add.w	r8, r1, #20
 8005872:	f100 0514 	add.w	r5, r0, #20
 8005876:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800587a:	9301      	str	r3, [sp, #4]
 800587c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005880:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005884:	3301      	adds	r3, #1
 8005886:	429a      	cmp	r2, r3
 8005888:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800588c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005890:	fbb2 f6f3 	udiv	r6, r2, r3
 8005894:	d331      	bcc.n	80058fa <quorem+0x9e>
 8005896:	f04f 0e00 	mov.w	lr, #0
 800589a:	4640      	mov	r0, r8
 800589c:	46ac      	mov	ip, r5
 800589e:	46f2      	mov	sl, lr
 80058a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80058a4:	b293      	uxth	r3, r2
 80058a6:	fb06 e303 	mla	r3, r6, r3, lr
 80058aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	ebaa 0303 	sub.w	r3, sl, r3
 80058b4:	0c12      	lsrs	r2, r2, #16
 80058b6:	f8dc a000 	ldr.w	sl, [ip]
 80058ba:	fb06 e202 	mla	r2, r6, r2, lr
 80058be:	fa13 f38a 	uxtah	r3, r3, sl
 80058c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80058c6:	fa1f fa82 	uxth.w	sl, r2
 80058ca:	f8dc 2000 	ldr.w	r2, [ip]
 80058ce:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80058d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058dc:	4581      	cmp	r9, r0
 80058de:	f84c 3b04 	str.w	r3, [ip], #4
 80058e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80058e6:	d2db      	bcs.n	80058a0 <quorem+0x44>
 80058e8:	f855 300b 	ldr.w	r3, [r5, fp]
 80058ec:	b92b      	cbnz	r3, 80058fa <quorem+0x9e>
 80058ee:	9b01      	ldr	r3, [sp, #4]
 80058f0:	3b04      	subs	r3, #4
 80058f2:	429d      	cmp	r5, r3
 80058f4:	461a      	mov	r2, r3
 80058f6:	d32e      	bcc.n	8005956 <quorem+0xfa>
 80058f8:	613c      	str	r4, [r7, #16]
 80058fa:	4638      	mov	r0, r7
 80058fc:	f001 fc7e 	bl	80071fc <__mcmp>
 8005900:	2800      	cmp	r0, #0
 8005902:	db24      	blt.n	800594e <quorem+0xf2>
 8005904:	3601      	adds	r6, #1
 8005906:	4628      	mov	r0, r5
 8005908:	f04f 0c00 	mov.w	ip, #0
 800590c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005910:	f8d0 e000 	ldr.w	lr, [r0]
 8005914:	b293      	uxth	r3, r2
 8005916:	ebac 0303 	sub.w	r3, ip, r3
 800591a:	0c12      	lsrs	r2, r2, #16
 800591c:	fa13 f38e 	uxtah	r3, r3, lr
 8005920:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005924:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005928:	b29b      	uxth	r3, r3
 800592a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800592e:	45c1      	cmp	r9, r8
 8005930:	f840 3b04 	str.w	r3, [r0], #4
 8005934:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005938:	d2e8      	bcs.n	800590c <quorem+0xb0>
 800593a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800593e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005942:	b922      	cbnz	r2, 800594e <quorem+0xf2>
 8005944:	3b04      	subs	r3, #4
 8005946:	429d      	cmp	r5, r3
 8005948:	461a      	mov	r2, r3
 800594a:	d30a      	bcc.n	8005962 <quorem+0x106>
 800594c:	613c      	str	r4, [r7, #16]
 800594e:	4630      	mov	r0, r6
 8005950:	b003      	add	sp, #12
 8005952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005956:	6812      	ldr	r2, [r2, #0]
 8005958:	3b04      	subs	r3, #4
 800595a:	2a00      	cmp	r2, #0
 800595c:	d1cc      	bne.n	80058f8 <quorem+0x9c>
 800595e:	3c01      	subs	r4, #1
 8005960:	e7c7      	b.n	80058f2 <quorem+0x96>
 8005962:	6812      	ldr	r2, [r2, #0]
 8005964:	3b04      	subs	r3, #4
 8005966:	2a00      	cmp	r2, #0
 8005968:	d1f0      	bne.n	800594c <quorem+0xf0>
 800596a:	3c01      	subs	r4, #1
 800596c:	e7eb      	b.n	8005946 <quorem+0xea>
 800596e:	2000      	movs	r0, #0
 8005970:	e7ee      	b.n	8005950 <quorem+0xf4>
 8005972:	0000      	movs	r0, r0
 8005974:	0000      	movs	r0, r0
	...

08005978 <_dtoa_r>:
 8005978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800597c:	ed2d 8b02 	vpush	{d8}
 8005980:	ec57 6b10 	vmov	r6, r7, d0
 8005984:	b095      	sub	sp, #84	; 0x54
 8005986:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005988:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800598c:	9105      	str	r1, [sp, #20]
 800598e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005992:	4604      	mov	r4, r0
 8005994:	9209      	str	r2, [sp, #36]	; 0x24
 8005996:	930f      	str	r3, [sp, #60]	; 0x3c
 8005998:	b975      	cbnz	r5, 80059b8 <_dtoa_r+0x40>
 800599a:	2010      	movs	r0, #16
 800599c:	f001 f94c 	bl	8006c38 <malloc>
 80059a0:	4602      	mov	r2, r0
 80059a2:	6260      	str	r0, [r4, #36]	; 0x24
 80059a4:	b920      	cbnz	r0, 80059b0 <_dtoa_r+0x38>
 80059a6:	4bb2      	ldr	r3, [pc, #712]	; (8005c70 <_dtoa_r+0x2f8>)
 80059a8:	21ea      	movs	r1, #234	; 0xea
 80059aa:	48b2      	ldr	r0, [pc, #712]	; (8005c74 <_dtoa_r+0x2fc>)
 80059ac:	f002 f868 	bl	8007a80 <__assert_func>
 80059b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80059b4:	6005      	str	r5, [r0, #0]
 80059b6:	60c5      	str	r5, [r0, #12]
 80059b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059ba:	6819      	ldr	r1, [r3, #0]
 80059bc:	b151      	cbz	r1, 80059d4 <_dtoa_r+0x5c>
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	604a      	str	r2, [r1, #4]
 80059c2:	2301      	movs	r3, #1
 80059c4:	4093      	lsls	r3, r2
 80059c6:	608b      	str	r3, [r1, #8]
 80059c8:	4620      	mov	r0, r4
 80059ca:	f001 f98f 	bl	8006cec <_Bfree>
 80059ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059d0:	2200      	movs	r2, #0
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	1e3b      	subs	r3, r7, #0
 80059d6:	bfb9      	ittee	lt
 80059d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80059dc:	9303      	strlt	r3, [sp, #12]
 80059de:	2300      	movge	r3, #0
 80059e0:	f8c8 3000 	strge.w	r3, [r8]
 80059e4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80059e8:	4ba3      	ldr	r3, [pc, #652]	; (8005c78 <_dtoa_r+0x300>)
 80059ea:	bfbc      	itt	lt
 80059ec:	2201      	movlt	r2, #1
 80059ee:	f8c8 2000 	strlt.w	r2, [r8]
 80059f2:	ea33 0309 	bics.w	r3, r3, r9
 80059f6:	d11b      	bne.n	8005a30 <_dtoa_r+0xb8>
 80059f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80059fa:	f242 730f 	movw	r3, #9999	; 0x270f
 80059fe:	6013      	str	r3, [r2, #0]
 8005a00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a04:	4333      	orrs	r3, r6
 8005a06:	f000 857a 	beq.w	80064fe <_dtoa_r+0xb86>
 8005a0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a0c:	b963      	cbnz	r3, 8005a28 <_dtoa_r+0xb0>
 8005a0e:	4b9b      	ldr	r3, [pc, #620]	; (8005c7c <_dtoa_r+0x304>)
 8005a10:	e024      	b.n	8005a5c <_dtoa_r+0xe4>
 8005a12:	4b9b      	ldr	r3, [pc, #620]	; (8005c80 <_dtoa_r+0x308>)
 8005a14:	9300      	str	r3, [sp, #0]
 8005a16:	3308      	adds	r3, #8
 8005a18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005a1a:	6013      	str	r3, [r2, #0]
 8005a1c:	9800      	ldr	r0, [sp, #0]
 8005a1e:	b015      	add	sp, #84	; 0x54
 8005a20:	ecbd 8b02 	vpop	{d8}
 8005a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a28:	4b94      	ldr	r3, [pc, #592]	; (8005c7c <_dtoa_r+0x304>)
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	3303      	adds	r3, #3
 8005a2e:	e7f3      	b.n	8005a18 <_dtoa_r+0xa0>
 8005a30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005a34:	2200      	movs	r2, #0
 8005a36:	ec51 0b17 	vmov	r0, r1, d7
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005a40:	f7fb f84a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a44:	4680      	mov	r8, r0
 8005a46:	b158      	cbz	r0, 8005a60 <_dtoa_r+0xe8>
 8005a48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	6013      	str	r3, [r2, #0]
 8005a4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 8551 	beq.w	80064f8 <_dtoa_r+0xb80>
 8005a56:	488b      	ldr	r0, [pc, #556]	; (8005c84 <_dtoa_r+0x30c>)
 8005a58:	6018      	str	r0, [r3, #0]
 8005a5a:	1e43      	subs	r3, r0, #1
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	e7dd      	b.n	8005a1c <_dtoa_r+0xa4>
 8005a60:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005a64:	aa12      	add	r2, sp, #72	; 0x48
 8005a66:	a913      	add	r1, sp, #76	; 0x4c
 8005a68:	4620      	mov	r0, r4
 8005a6a:	f001 fce7 	bl	800743c <__d2b>
 8005a6e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005a72:	4683      	mov	fp, r0
 8005a74:	2d00      	cmp	r5, #0
 8005a76:	d07c      	beq.n	8005b72 <_dtoa_r+0x1fa>
 8005a78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a7a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005a7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a82:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005a86:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005a8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005a8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005a92:	4b7d      	ldr	r3, [pc, #500]	; (8005c88 <_dtoa_r+0x310>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	4630      	mov	r0, r6
 8005a98:	4639      	mov	r1, r7
 8005a9a:	f7fa fbfd 	bl	8000298 <__aeabi_dsub>
 8005a9e:	a36e      	add	r3, pc, #440	; (adr r3, 8005c58 <_dtoa_r+0x2e0>)
 8005aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa4:	f7fa fdb0 	bl	8000608 <__aeabi_dmul>
 8005aa8:	a36d      	add	r3, pc, #436	; (adr r3, 8005c60 <_dtoa_r+0x2e8>)
 8005aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aae:	f7fa fbf5 	bl	800029c <__adddf3>
 8005ab2:	4606      	mov	r6, r0
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	460f      	mov	r7, r1
 8005ab8:	f7fa fd3c 	bl	8000534 <__aeabi_i2d>
 8005abc:	a36a      	add	r3, pc, #424	; (adr r3, 8005c68 <_dtoa_r+0x2f0>)
 8005abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac2:	f7fa fda1 	bl	8000608 <__aeabi_dmul>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	460b      	mov	r3, r1
 8005aca:	4630      	mov	r0, r6
 8005acc:	4639      	mov	r1, r7
 8005ace:	f7fa fbe5 	bl	800029c <__adddf3>
 8005ad2:	4606      	mov	r6, r0
 8005ad4:	460f      	mov	r7, r1
 8005ad6:	f7fb f847 	bl	8000b68 <__aeabi_d2iz>
 8005ada:	2200      	movs	r2, #0
 8005adc:	4682      	mov	sl, r0
 8005ade:	2300      	movs	r3, #0
 8005ae0:	4630      	mov	r0, r6
 8005ae2:	4639      	mov	r1, r7
 8005ae4:	f7fb f802 	bl	8000aec <__aeabi_dcmplt>
 8005ae8:	b148      	cbz	r0, 8005afe <_dtoa_r+0x186>
 8005aea:	4650      	mov	r0, sl
 8005aec:	f7fa fd22 	bl	8000534 <__aeabi_i2d>
 8005af0:	4632      	mov	r2, r6
 8005af2:	463b      	mov	r3, r7
 8005af4:	f7fa fff0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005af8:	b908      	cbnz	r0, 8005afe <_dtoa_r+0x186>
 8005afa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005afe:	f1ba 0f16 	cmp.w	sl, #22
 8005b02:	d854      	bhi.n	8005bae <_dtoa_r+0x236>
 8005b04:	4b61      	ldr	r3, [pc, #388]	; (8005c8c <_dtoa_r+0x314>)
 8005b06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b12:	f7fa ffeb 	bl	8000aec <__aeabi_dcmplt>
 8005b16:	2800      	cmp	r0, #0
 8005b18:	d04b      	beq.n	8005bb2 <_dtoa_r+0x23a>
 8005b1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b1e:	2300      	movs	r3, #0
 8005b20:	930e      	str	r3, [sp, #56]	; 0x38
 8005b22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b24:	1b5d      	subs	r5, r3, r5
 8005b26:	1e6b      	subs	r3, r5, #1
 8005b28:	9304      	str	r3, [sp, #16]
 8005b2a:	bf43      	ittte	mi
 8005b2c:	2300      	movmi	r3, #0
 8005b2e:	f1c5 0801 	rsbmi	r8, r5, #1
 8005b32:	9304      	strmi	r3, [sp, #16]
 8005b34:	f04f 0800 	movpl.w	r8, #0
 8005b38:	f1ba 0f00 	cmp.w	sl, #0
 8005b3c:	db3b      	blt.n	8005bb6 <_dtoa_r+0x23e>
 8005b3e:	9b04      	ldr	r3, [sp, #16]
 8005b40:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005b44:	4453      	add	r3, sl
 8005b46:	9304      	str	r3, [sp, #16]
 8005b48:	2300      	movs	r3, #0
 8005b4a:	9306      	str	r3, [sp, #24]
 8005b4c:	9b05      	ldr	r3, [sp, #20]
 8005b4e:	2b09      	cmp	r3, #9
 8005b50:	d869      	bhi.n	8005c26 <_dtoa_r+0x2ae>
 8005b52:	2b05      	cmp	r3, #5
 8005b54:	bfc4      	itt	gt
 8005b56:	3b04      	subgt	r3, #4
 8005b58:	9305      	strgt	r3, [sp, #20]
 8005b5a:	9b05      	ldr	r3, [sp, #20]
 8005b5c:	f1a3 0302 	sub.w	r3, r3, #2
 8005b60:	bfcc      	ite	gt
 8005b62:	2500      	movgt	r5, #0
 8005b64:	2501      	movle	r5, #1
 8005b66:	2b03      	cmp	r3, #3
 8005b68:	d869      	bhi.n	8005c3e <_dtoa_r+0x2c6>
 8005b6a:	e8df f003 	tbb	[pc, r3]
 8005b6e:	4e2c      	.short	0x4e2c
 8005b70:	5a4c      	.short	0x5a4c
 8005b72:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005b76:	441d      	add	r5, r3
 8005b78:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005b7c:	2b20      	cmp	r3, #32
 8005b7e:	bfc1      	itttt	gt
 8005b80:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005b84:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005b88:	fa09 f303 	lslgt.w	r3, r9, r3
 8005b8c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005b90:	bfda      	itte	le
 8005b92:	f1c3 0320 	rsble	r3, r3, #32
 8005b96:	fa06 f003 	lslle.w	r0, r6, r3
 8005b9a:	4318      	orrgt	r0, r3
 8005b9c:	f7fa fcba 	bl	8000514 <__aeabi_ui2d>
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	4606      	mov	r6, r0
 8005ba4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005ba8:	3d01      	subs	r5, #1
 8005baa:	9310      	str	r3, [sp, #64]	; 0x40
 8005bac:	e771      	b.n	8005a92 <_dtoa_r+0x11a>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e7b6      	b.n	8005b20 <_dtoa_r+0x1a8>
 8005bb2:	900e      	str	r0, [sp, #56]	; 0x38
 8005bb4:	e7b5      	b.n	8005b22 <_dtoa_r+0x1aa>
 8005bb6:	f1ca 0300 	rsb	r3, sl, #0
 8005bba:	9306      	str	r3, [sp, #24]
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	eba8 080a 	sub.w	r8, r8, sl
 8005bc2:	930d      	str	r3, [sp, #52]	; 0x34
 8005bc4:	e7c2      	b.n	8005b4c <_dtoa_r+0x1d4>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	9308      	str	r3, [sp, #32]
 8005bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	dc39      	bgt.n	8005c44 <_dtoa_r+0x2cc>
 8005bd0:	f04f 0901 	mov.w	r9, #1
 8005bd4:	f8cd 9004 	str.w	r9, [sp, #4]
 8005bd8:	464b      	mov	r3, r9
 8005bda:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005bde:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005be0:	2200      	movs	r2, #0
 8005be2:	6042      	str	r2, [r0, #4]
 8005be4:	2204      	movs	r2, #4
 8005be6:	f102 0614 	add.w	r6, r2, #20
 8005bea:	429e      	cmp	r6, r3
 8005bec:	6841      	ldr	r1, [r0, #4]
 8005bee:	d92f      	bls.n	8005c50 <_dtoa_r+0x2d8>
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	f001 f83b 	bl	8006c6c <_Balloc>
 8005bf6:	9000      	str	r0, [sp, #0]
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	d14b      	bne.n	8005c94 <_dtoa_r+0x31c>
 8005bfc:	4b24      	ldr	r3, [pc, #144]	; (8005c90 <_dtoa_r+0x318>)
 8005bfe:	4602      	mov	r2, r0
 8005c00:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005c04:	e6d1      	b.n	80059aa <_dtoa_r+0x32>
 8005c06:	2301      	movs	r3, #1
 8005c08:	e7de      	b.n	8005bc8 <_dtoa_r+0x250>
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	9308      	str	r3, [sp, #32]
 8005c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c10:	eb0a 0903 	add.w	r9, sl, r3
 8005c14:	f109 0301 	add.w	r3, r9, #1
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	9301      	str	r3, [sp, #4]
 8005c1c:	bfb8      	it	lt
 8005c1e:	2301      	movlt	r3, #1
 8005c20:	e7dd      	b.n	8005bde <_dtoa_r+0x266>
 8005c22:	2301      	movs	r3, #1
 8005c24:	e7f2      	b.n	8005c0c <_dtoa_r+0x294>
 8005c26:	2501      	movs	r5, #1
 8005c28:	2300      	movs	r3, #0
 8005c2a:	9305      	str	r3, [sp, #20]
 8005c2c:	9508      	str	r5, [sp, #32]
 8005c2e:	f04f 39ff 	mov.w	r9, #4294967295
 8005c32:	2200      	movs	r2, #0
 8005c34:	f8cd 9004 	str.w	r9, [sp, #4]
 8005c38:	2312      	movs	r3, #18
 8005c3a:	9209      	str	r2, [sp, #36]	; 0x24
 8005c3c:	e7cf      	b.n	8005bde <_dtoa_r+0x266>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	9308      	str	r3, [sp, #32]
 8005c42:	e7f4      	b.n	8005c2e <_dtoa_r+0x2b6>
 8005c44:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005c48:	f8cd 9004 	str.w	r9, [sp, #4]
 8005c4c:	464b      	mov	r3, r9
 8005c4e:	e7c6      	b.n	8005bde <_dtoa_r+0x266>
 8005c50:	3101      	adds	r1, #1
 8005c52:	6041      	str	r1, [r0, #4]
 8005c54:	0052      	lsls	r2, r2, #1
 8005c56:	e7c6      	b.n	8005be6 <_dtoa_r+0x26e>
 8005c58:	636f4361 	.word	0x636f4361
 8005c5c:	3fd287a7 	.word	0x3fd287a7
 8005c60:	8b60c8b3 	.word	0x8b60c8b3
 8005c64:	3fc68a28 	.word	0x3fc68a28
 8005c68:	509f79fb 	.word	0x509f79fb
 8005c6c:	3fd34413 	.word	0x3fd34413
 8005c70:	080087f6 	.word	0x080087f6
 8005c74:	0800880d 	.word	0x0800880d
 8005c78:	7ff00000 	.word	0x7ff00000
 8005c7c:	080087f2 	.word	0x080087f2
 8005c80:	080087e9 	.word	0x080087e9
 8005c84:	08008669 	.word	0x08008669
 8005c88:	3ff80000 	.word	0x3ff80000
 8005c8c:	08008988 	.word	0x08008988
 8005c90:	0800886c 	.word	0x0800886c
 8005c94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c96:	9a00      	ldr	r2, [sp, #0]
 8005c98:	601a      	str	r2, [r3, #0]
 8005c9a:	9b01      	ldr	r3, [sp, #4]
 8005c9c:	2b0e      	cmp	r3, #14
 8005c9e:	f200 80ad 	bhi.w	8005dfc <_dtoa_r+0x484>
 8005ca2:	2d00      	cmp	r5, #0
 8005ca4:	f000 80aa 	beq.w	8005dfc <_dtoa_r+0x484>
 8005ca8:	f1ba 0f00 	cmp.w	sl, #0
 8005cac:	dd36      	ble.n	8005d1c <_dtoa_r+0x3a4>
 8005cae:	4ac3      	ldr	r2, [pc, #780]	; (8005fbc <_dtoa_r+0x644>)
 8005cb0:	f00a 030f 	and.w	r3, sl, #15
 8005cb4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005cb8:	ed93 7b00 	vldr	d7, [r3]
 8005cbc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005cc0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005cc4:	eeb0 8a47 	vmov.f32	s16, s14
 8005cc8:	eef0 8a67 	vmov.f32	s17, s15
 8005ccc:	d016      	beq.n	8005cfc <_dtoa_r+0x384>
 8005cce:	4bbc      	ldr	r3, [pc, #752]	; (8005fc0 <_dtoa_r+0x648>)
 8005cd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005cd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005cd8:	f7fa fdc0 	bl	800085c <__aeabi_ddiv>
 8005cdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ce0:	f007 070f 	and.w	r7, r7, #15
 8005ce4:	2503      	movs	r5, #3
 8005ce6:	4eb6      	ldr	r6, [pc, #728]	; (8005fc0 <_dtoa_r+0x648>)
 8005ce8:	b957      	cbnz	r7, 8005d00 <_dtoa_r+0x388>
 8005cea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cee:	ec53 2b18 	vmov	r2, r3, d8
 8005cf2:	f7fa fdb3 	bl	800085c <__aeabi_ddiv>
 8005cf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cfa:	e029      	b.n	8005d50 <_dtoa_r+0x3d8>
 8005cfc:	2502      	movs	r5, #2
 8005cfe:	e7f2      	b.n	8005ce6 <_dtoa_r+0x36e>
 8005d00:	07f9      	lsls	r1, r7, #31
 8005d02:	d508      	bpl.n	8005d16 <_dtoa_r+0x39e>
 8005d04:	ec51 0b18 	vmov	r0, r1, d8
 8005d08:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005d0c:	f7fa fc7c 	bl	8000608 <__aeabi_dmul>
 8005d10:	ec41 0b18 	vmov	d8, r0, r1
 8005d14:	3501      	adds	r5, #1
 8005d16:	107f      	asrs	r7, r7, #1
 8005d18:	3608      	adds	r6, #8
 8005d1a:	e7e5      	b.n	8005ce8 <_dtoa_r+0x370>
 8005d1c:	f000 80a6 	beq.w	8005e6c <_dtoa_r+0x4f4>
 8005d20:	f1ca 0600 	rsb	r6, sl, #0
 8005d24:	4ba5      	ldr	r3, [pc, #660]	; (8005fbc <_dtoa_r+0x644>)
 8005d26:	4fa6      	ldr	r7, [pc, #664]	; (8005fc0 <_dtoa_r+0x648>)
 8005d28:	f006 020f 	and.w	r2, r6, #15
 8005d2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d34:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d38:	f7fa fc66 	bl	8000608 <__aeabi_dmul>
 8005d3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d40:	1136      	asrs	r6, r6, #4
 8005d42:	2300      	movs	r3, #0
 8005d44:	2502      	movs	r5, #2
 8005d46:	2e00      	cmp	r6, #0
 8005d48:	f040 8085 	bne.w	8005e56 <_dtoa_r+0x4de>
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1d2      	bne.n	8005cf6 <_dtoa_r+0x37e>
 8005d50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f000 808c 	beq.w	8005e70 <_dtoa_r+0x4f8>
 8005d58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005d5c:	4b99      	ldr	r3, [pc, #612]	; (8005fc4 <_dtoa_r+0x64c>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	4630      	mov	r0, r6
 8005d62:	4639      	mov	r1, r7
 8005d64:	f7fa fec2 	bl	8000aec <__aeabi_dcmplt>
 8005d68:	2800      	cmp	r0, #0
 8005d6a:	f000 8081 	beq.w	8005e70 <_dtoa_r+0x4f8>
 8005d6e:	9b01      	ldr	r3, [sp, #4]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d07d      	beq.n	8005e70 <_dtoa_r+0x4f8>
 8005d74:	f1b9 0f00 	cmp.w	r9, #0
 8005d78:	dd3c      	ble.n	8005df4 <_dtoa_r+0x47c>
 8005d7a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005d7e:	9307      	str	r3, [sp, #28]
 8005d80:	2200      	movs	r2, #0
 8005d82:	4b91      	ldr	r3, [pc, #580]	; (8005fc8 <_dtoa_r+0x650>)
 8005d84:	4630      	mov	r0, r6
 8005d86:	4639      	mov	r1, r7
 8005d88:	f7fa fc3e 	bl	8000608 <__aeabi_dmul>
 8005d8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d90:	3501      	adds	r5, #1
 8005d92:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005d96:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	f7fa fbca 	bl	8000534 <__aeabi_i2d>
 8005da0:	4632      	mov	r2, r6
 8005da2:	463b      	mov	r3, r7
 8005da4:	f7fa fc30 	bl	8000608 <__aeabi_dmul>
 8005da8:	4b88      	ldr	r3, [pc, #544]	; (8005fcc <_dtoa_r+0x654>)
 8005daa:	2200      	movs	r2, #0
 8005dac:	f7fa fa76 	bl	800029c <__adddf3>
 8005db0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005db4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005db8:	9303      	str	r3, [sp, #12]
 8005dba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d15c      	bne.n	8005e7a <_dtoa_r+0x502>
 8005dc0:	4b83      	ldr	r3, [pc, #524]	; (8005fd0 <_dtoa_r+0x658>)
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	4630      	mov	r0, r6
 8005dc6:	4639      	mov	r1, r7
 8005dc8:	f7fa fa66 	bl	8000298 <__aeabi_dsub>
 8005dcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dd0:	4606      	mov	r6, r0
 8005dd2:	460f      	mov	r7, r1
 8005dd4:	f7fa fea8 	bl	8000b28 <__aeabi_dcmpgt>
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	f040 8296 	bne.w	800630a <_dtoa_r+0x992>
 8005dde:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005de2:	4630      	mov	r0, r6
 8005de4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005de8:	4639      	mov	r1, r7
 8005dea:	f7fa fe7f 	bl	8000aec <__aeabi_dcmplt>
 8005dee:	2800      	cmp	r0, #0
 8005df0:	f040 8288 	bne.w	8006304 <_dtoa_r+0x98c>
 8005df4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005df8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005dfc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f2c0 8158 	blt.w	80060b4 <_dtoa_r+0x73c>
 8005e04:	f1ba 0f0e 	cmp.w	sl, #14
 8005e08:	f300 8154 	bgt.w	80060b4 <_dtoa_r+0x73c>
 8005e0c:	4b6b      	ldr	r3, [pc, #428]	; (8005fbc <_dtoa_r+0x644>)
 8005e0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005e12:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f280 80e3 	bge.w	8005fe4 <_dtoa_r+0x66c>
 8005e1e:	9b01      	ldr	r3, [sp, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f300 80df 	bgt.w	8005fe4 <_dtoa_r+0x66c>
 8005e26:	f040 826d 	bne.w	8006304 <_dtoa_r+0x98c>
 8005e2a:	4b69      	ldr	r3, [pc, #420]	; (8005fd0 <_dtoa_r+0x658>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	4640      	mov	r0, r8
 8005e30:	4649      	mov	r1, r9
 8005e32:	f7fa fbe9 	bl	8000608 <__aeabi_dmul>
 8005e36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e3a:	f7fa fe6b 	bl	8000b14 <__aeabi_dcmpge>
 8005e3e:	9e01      	ldr	r6, [sp, #4]
 8005e40:	4637      	mov	r7, r6
 8005e42:	2800      	cmp	r0, #0
 8005e44:	f040 8243 	bne.w	80062ce <_dtoa_r+0x956>
 8005e48:	9d00      	ldr	r5, [sp, #0]
 8005e4a:	2331      	movs	r3, #49	; 0x31
 8005e4c:	f805 3b01 	strb.w	r3, [r5], #1
 8005e50:	f10a 0a01 	add.w	sl, sl, #1
 8005e54:	e23f      	b.n	80062d6 <_dtoa_r+0x95e>
 8005e56:	07f2      	lsls	r2, r6, #31
 8005e58:	d505      	bpl.n	8005e66 <_dtoa_r+0x4ee>
 8005e5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e5e:	f7fa fbd3 	bl	8000608 <__aeabi_dmul>
 8005e62:	3501      	adds	r5, #1
 8005e64:	2301      	movs	r3, #1
 8005e66:	1076      	asrs	r6, r6, #1
 8005e68:	3708      	adds	r7, #8
 8005e6a:	e76c      	b.n	8005d46 <_dtoa_r+0x3ce>
 8005e6c:	2502      	movs	r5, #2
 8005e6e:	e76f      	b.n	8005d50 <_dtoa_r+0x3d8>
 8005e70:	9b01      	ldr	r3, [sp, #4]
 8005e72:	f8cd a01c 	str.w	sl, [sp, #28]
 8005e76:	930c      	str	r3, [sp, #48]	; 0x30
 8005e78:	e78d      	b.n	8005d96 <_dtoa_r+0x41e>
 8005e7a:	9900      	ldr	r1, [sp, #0]
 8005e7c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005e7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e80:	4b4e      	ldr	r3, [pc, #312]	; (8005fbc <_dtoa_r+0x644>)
 8005e82:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e86:	4401      	add	r1, r0
 8005e88:	9102      	str	r1, [sp, #8]
 8005e8a:	9908      	ldr	r1, [sp, #32]
 8005e8c:	eeb0 8a47 	vmov.f32	s16, s14
 8005e90:	eef0 8a67 	vmov.f32	s17, s15
 8005e94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e98:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005e9c:	2900      	cmp	r1, #0
 8005e9e:	d045      	beq.n	8005f2c <_dtoa_r+0x5b4>
 8005ea0:	494c      	ldr	r1, [pc, #304]	; (8005fd4 <_dtoa_r+0x65c>)
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	f7fa fcda 	bl	800085c <__aeabi_ddiv>
 8005ea8:	ec53 2b18 	vmov	r2, r3, d8
 8005eac:	f7fa f9f4 	bl	8000298 <__aeabi_dsub>
 8005eb0:	9d00      	ldr	r5, [sp, #0]
 8005eb2:	ec41 0b18 	vmov	d8, r0, r1
 8005eb6:	4639      	mov	r1, r7
 8005eb8:	4630      	mov	r0, r6
 8005eba:	f7fa fe55 	bl	8000b68 <__aeabi_d2iz>
 8005ebe:	900c      	str	r0, [sp, #48]	; 0x30
 8005ec0:	f7fa fb38 	bl	8000534 <__aeabi_i2d>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	4630      	mov	r0, r6
 8005eca:	4639      	mov	r1, r7
 8005ecc:	f7fa f9e4 	bl	8000298 <__aeabi_dsub>
 8005ed0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ed2:	3330      	adds	r3, #48	; 0x30
 8005ed4:	f805 3b01 	strb.w	r3, [r5], #1
 8005ed8:	ec53 2b18 	vmov	r2, r3, d8
 8005edc:	4606      	mov	r6, r0
 8005ede:	460f      	mov	r7, r1
 8005ee0:	f7fa fe04 	bl	8000aec <__aeabi_dcmplt>
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	d165      	bne.n	8005fb4 <_dtoa_r+0x63c>
 8005ee8:	4632      	mov	r2, r6
 8005eea:	463b      	mov	r3, r7
 8005eec:	4935      	ldr	r1, [pc, #212]	; (8005fc4 <_dtoa_r+0x64c>)
 8005eee:	2000      	movs	r0, #0
 8005ef0:	f7fa f9d2 	bl	8000298 <__aeabi_dsub>
 8005ef4:	ec53 2b18 	vmov	r2, r3, d8
 8005ef8:	f7fa fdf8 	bl	8000aec <__aeabi_dcmplt>
 8005efc:	2800      	cmp	r0, #0
 8005efe:	f040 80b9 	bne.w	8006074 <_dtoa_r+0x6fc>
 8005f02:	9b02      	ldr	r3, [sp, #8]
 8005f04:	429d      	cmp	r5, r3
 8005f06:	f43f af75 	beq.w	8005df4 <_dtoa_r+0x47c>
 8005f0a:	4b2f      	ldr	r3, [pc, #188]	; (8005fc8 <_dtoa_r+0x650>)
 8005f0c:	ec51 0b18 	vmov	r0, r1, d8
 8005f10:	2200      	movs	r2, #0
 8005f12:	f7fa fb79 	bl	8000608 <__aeabi_dmul>
 8005f16:	4b2c      	ldr	r3, [pc, #176]	; (8005fc8 <_dtoa_r+0x650>)
 8005f18:	ec41 0b18 	vmov	d8, r0, r1
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	4630      	mov	r0, r6
 8005f20:	4639      	mov	r1, r7
 8005f22:	f7fa fb71 	bl	8000608 <__aeabi_dmul>
 8005f26:	4606      	mov	r6, r0
 8005f28:	460f      	mov	r7, r1
 8005f2a:	e7c4      	b.n	8005eb6 <_dtoa_r+0x53e>
 8005f2c:	ec51 0b17 	vmov	r0, r1, d7
 8005f30:	f7fa fb6a 	bl	8000608 <__aeabi_dmul>
 8005f34:	9b02      	ldr	r3, [sp, #8]
 8005f36:	9d00      	ldr	r5, [sp, #0]
 8005f38:	930c      	str	r3, [sp, #48]	; 0x30
 8005f3a:	ec41 0b18 	vmov	d8, r0, r1
 8005f3e:	4639      	mov	r1, r7
 8005f40:	4630      	mov	r0, r6
 8005f42:	f7fa fe11 	bl	8000b68 <__aeabi_d2iz>
 8005f46:	9011      	str	r0, [sp, #68]	; 0x44
 8005f48:	f7fa faf4 	bl	8000534 <__aeabi_i2d>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	460b      	mov	r3, r1
 8005f50:	4630      	mov	r0, r6
 8005f52:	4639      	mov	r1, r7
 8005f54:	f7fa f9a0 	bl	8000298 <__aeabi_dsub>
 8005f58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f5a:	3330      	adds	r3, #48	; 0x30
 8005f5c:	f805 3b01 	strb.w	r3, [r5], #1
 8005f60:	9b02      	ldr	r3, [sp, #8]
 8005f62:	429d      	cmp	r5, r3
 8005f64:	4606      	mov	r6, r0
 8005f66:	460f      	mov	r7, r1
 8005f68:	f04f 0200 	mov.w	r2, #0
 8005f6c:	d134      	bne.n	8005fd8 <_dtoa_r+0x660>
 8005f6e:	4b19      	ldr	r3, [pc, #100]	; (8005fd4 <_dtoa_r+0x65c>)
 8005f70:	ec51 0b18 	vmov	r0, r1, d8
 8005f74:	f7fa f992 	bl	800029c <__adddf3>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4630      	mov	r0, r6
 8005f7e:	4639      	mov	r1, r7
 8005f80:	f7fa fdd2 	bl	8000b28 <__aeabi_dcmpgt>
 8005f84:	2800      	cmp	r0, #0
 8005f86:	d175      	bne.n	8006074 <_dtoa_r+0x6fc>
 8005f88:	ec53 2b18 	vmov	r2, r3, d8
 8005f8c:	4911      	ldr	r1, [pc, #68]	; (8005fd4 <_dtoa_r+0x65c>)
 8005f8e:	2000      	movs	r0, #0
 8005f90:	f7fa f982 	bl	8000298 <__aeabi_dsub>
 8005f94:	4602      	mov	r2, r0
 8005f96:	460b      	mov	r3, r1
 8005f98:	4630      	mov	r0, r6
 8005f9a:	4639      	mov	r1, r7
 8005f9c:	f7fa fda6 	bl	8000aec <__aeabi_dcmplt>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	f43f af27 	beq.w	8005df4 <_dtoa_r+0x47c>
 8005fa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005fa8:	1e6b      	subs	r3, r5, #1
 8005faa:	930c      	str	r3, [sp, #48]	; 0x30
 8005fac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005fb0:	2b30      	cmp	r3, #48	; 0x30
 8005fb2:	d0f8      	beq.n	8005fa6 <_dtoa_r+0x62e>
 8005fb4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005fb8:	e04a      	b.n	8006050 <_dtoa_r+0x6d8>
 8005fba:	bf00      	nop
 8005fbc:	08008988 	.word	0x08008988
 8005fc0:	08008960 	.word	0x08008960
 8005fc4:	3ff00000 	.word	0x3ff00000
 8005fc8:	40240000 	.word	0x40240000
 8005fcc:	401c0000 	.word	0x401c0000
 8005fd0:	40140000 	.word	0x40140000
 8005fd4:	3fe00000 	.word	0x3fe00000
 8005fd8:	4baf      	ldr	r3, [pc, #700]	; (8006298 <_dtoa_r+0x920>)
 8005fda:	f7fa fb15 	bl	8000608 <__aeabi_dmul>
 8005fde:	4606      	mov	r6, r0
 8005fe0:	460f      	mov	r7, r1
 8005fe2:	e7ac      	b.n	8005f3e <_dtoa_r+0x5c6>
 8005fe4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005fe8:	9d00      	ldr	r5, [sp, #0]
 8005fea:	4642      	mov	r2, r8
 8005fec:	464b      	mov	r3, r9
 8005fee:	4630      	mov	r0, r6
 8005ff0:	4639      	mov	r1, r7
 8005ff2:	f7fa fc33 	bl	800085c <__aeabi_ddiv>
 8005ff6:	f7fa fdb7 	bl	8000b68 <__aeabi_d2iz>
 8005ffa:	9002      	str	r0, [sp, #8]
 8005ffc:	f7fa fa9a 	bl	8000534 <__aeabi_i2d>
 8006000:	4642      	mov	r2, r8
 8006002:	464b      	mov	r3, r9
 8006004:	f7fa fb00 	bl	8000608 <__aeabi_dmul>
 8006008:	4602      	mov	r2, r0
 800600a:	460b      	mov	r3, r1
 800600c:	4630      	mov	r0, r6
 800600e:	4639      	mov	r1, r7
 8006010:	f7fa f942 	bl	8000298 <__aeabi_dsub>
 8006014:	9e02      	ldr	r6, [sp, #8]
 8006016:	9f01      	ldr	r7, [sp, #4]
 8006018:	3630      	adds	r6, #48	; 0x30
 800601a:	f805 6b01 	strb.w	r6, [r5], #1
 800601e:	9e00      	ldr	r6, [sp, #0]
 8006020:	1bae      	subs	r6, r5, r6
 8006022:	42b7      	cmp	r7, r6
 8006024:	4602      	mov	r2, r0
 8006026:	460b      	mov	r3, r1
 8006028:	d137      	bne.n	800609a <_dtoa_r+0x722>
 800602a:	f7fa f937 	bl	800029c <__adddf3>
 800602e:	4642      	mov	r2, r8
 8006030:	464b      	mov	r3, r9
 8006032:	4606      	mov	r6, r0
 8006034:	460f      	mov	r7, r1
 8006036:	f7fa fd77 	bl	8000b28 <__aeabi_dcmpgt>
 800603a:	b9c8      	cbnz	r0, 8006070 <_dtoa_r+0x6f8>
 800603c:	4642      	mov	r2, r8
 800603e:	464b      	mov	r3, r9
 8006040:	4630      	mov	r0, r6
 8006042:	4639      	mov	r1, r7
 8006044:	f7fa fd48 	bl	8000ad8 <__aeabi_dcmpeq>
 8006048:	b110      	cbz	r0, 8006050 <_dtoa_r+0x6d8>
 800604a:	9b02      	ldr	r3, [sp, #8]
 800604c:	07d9      	lsls	r1, r3, #31
 800604e:	d40f      	bmi.n	8006070 <_dtoa_r+0x6f8>
 8006050:	4620      	mov	r0, r4
 8006052:	4659      	mov	r1, fp
 8006054:	f000 fe4a 	bl	8006cec <_Bfree>
 8006058:	2300      	movs	r3, #0
 800605a:	702b      	strb	r3, [r5, #0]
 800605c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800605e:	f10a 0001 	add.w	r0, sl, #1
 8006062:	6018      	str	r0, [r3, #0]
 8006064:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006066:	2b00      	cmp	r3, #0
 8006068:	f43f acd8 	beq.w	8005a1c <_dtoa_r+0xa4>
 800606c:	601d      	str	r5, [r3, #0]
 800606e:	e4d5      	b.n	8005a1c <_dtoa_r+0xa4>
 8006070:	f8cd a01c 	str.w	sl, [sp, #28]
 8006074:	462b      	mov	r3, r5
 8006076:	461d      	mov	r5, r3
 8006078:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800607c:	2a39      	cmp	r2, #57	; 0x39
 800607e:	d108      	bne.n	8006092 <_dtoa_r+0x71a>
 8006080:	9a00      	ldr	r2, [sp, #0]
 8006082:	429a      	cmp	r2, r3
 8006084:	d1f7      	bne.n	8006076 <_dtoa_r+0x6fe>
 8006086:	9a07      	ldr	r2, [sp, #28]
 8006088:	9900      	ldr	r1, [sp, #0]
 800608a:	3201      	adds	r2, #1
 800608c:	9207      	str	r2, [sp, #28]
 800608e:	2230      	movs	r2, #48	; 0x30
 8006090:	700a      	strb	r2, [r1, #0]
 8006092:	781a      	ldrb	r2, [r3, #0]
 8006094:	3201      	adds	r2, #1
 8006096:	701a      	strb	r2, [r3, #0]
 8006098:	e78c      	b.n	8005fb4 <_dtoa_r+0x63c>
 800609a:	4b7f      	ldr	r3, [pc, #508]	; (8006298 <_dtoa_r+0x920>)
 800609c:	2200      	movs	r2, #0
 800609e:	f7fa fab3 	bl	8000608 <__aeabi_dmul>
 80060a2:	2200      	movs	r2, #0
 80060a4:	2300      	movs	r3, #0
 80060a6:	4606      	mov	r6, r0
 80060a8:	460f      	mov	r7, r1
 80060aa:	f7fa fd15 	bl	8000ad8 <__aeabi_dcmpeq>
 80060ae:	2800      	cmp	r0, #0
 80060b0:	d09b      	beq.n	8005fea <_dtoa_r+0x672>
 80060b2:	e7cd      	b.n	8006050 <_dtoa_r+0x6d8>
 80060b4:	9a08      	ldr	r2, [sp, #32]
 80060b6:	2a00      	cmp	r2, #0
 80060b8:	f000 80c4 	beq.w	8006244 <_dtoa_r+0x8cc>
 80060bc:	9a05      	ldr	r2, [sp, #20]
 80060be:	2a01      	cmp	r2, #1
 80060c0:	f300 80a8 	bgt.w	8006214 <_dtoa_r+0x89c>
 80060c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80060c6:	2a00      	cmp	r2, #0
 80060c8:	f000 80a0 	beq.w	800620c <_dtoa_r+0x894>
 80060cc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80060d0:	9e06      	ldr	r6, [sp, #24]
 80060d2:	4645      	mov	r5, r8
 80060d4:	9a04      	ldr	r2, [sp, #16]
 80060d6:	2101      	movs	r1, #1
 80060d8:	441a      	add	r2, r3
 80060da:	4620      	mov	r0, r4
 80060dc:	4498      	add	r8, r3
 80060de:	9204      	str	r2, [sp, #16]
 80060e0:	f000 ff0a 	bl	8006ef8 <__i2b>
 80060e4:	4607      	mov	r7, r0
 80060e6:	2d00      	cmp	r5, #0
 80060e8:	dd0b      	ble.n	8006102 <_dtoa_r+0x78a>
 80060ea:	9b04      	ldr	r3, [sp, #16]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	dd08      	ble.n	8006102 <_dtoa_r+0x78a>
 80060f0:	42ab      	cmp	r3, r5
 80060f2:	9a04      	ldr	r2, [sp, #16]
 80060f4:	bfa8      	it	ge
 80060f6:	462b      	movge	r3, r5
 80060f8:	eba8 0803 	sub.w	r8, r8, r3
 80060fc:	1aed      	subs	r5, r5, r3
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	9304      	str	r3, [sp, #16]
 8006102:	9b06      	ldr	r3, [sp, #24]
 8006104:	b1fb      	cbz	r3, 8006146 <_dtoa_r+0x7ce>
 8006106:	9b08      	ldr	r3, [sp, #32]
 8006108:	2b00      	cmp	r3, #0
 800610a:	f000 809f 	beq.w	800624c <_dtoa_r+0x8d4>
 800610e:	2e00      	cmp	r6, #0
 8006110:	dd11      	ble.n	8006136 <_dtoa_r+0x7be>
 8006112:	4639      	mov	r1, r7
 8006114:	4632      	mov	r2, r6
 8006116:	4620      	mov	r0, r4
 8006118:	f000 ffaa 	bl	8007070 <__pow5mult>
 800611c:	465a      	mov	r2, fp
 800611e:	4601      	mov	r1, r0
 8006120:	4607      	mov	r7, r0
 8006122:	4620      	mov	r0, r4
 8006124:	f000 fefe 	bl	8006f24 <__multiply>
 8006128:	4659      	mov	r1, fp
 800612a:	9007      	str	r0, [sp, #28]
 800612c:	4620      	mov	r0, r4
 800612e:	f000 fddd 	bl	8006cec <_Bfree>
 8006132:	9b07      	ldr	r3, [sp, #28]
 8006134:	469b      	mov	fp, r3
 8006136:	9b06      	ldr	r3, [sp, #24]
 8006138:	1b9a      	subs	r2, r3, r6
 800613a:	d004      	beq.n	8006146 <_dtoa_r+0x7ce>
 800613c:	4659      	mov	r1, fp
 800613e:	4620      	mov	r0, r4
 8006140:	f000 ff96 	bl	8007070 <__pow5mult>
 8006144:	4683      	mov	fp, r0
 8006146:	2101      	movs	r1, #1
 8006148:	4620      	mov	r0, r4
 800614a:	f000 fed5 	bl	8006ef8 <__i2b>
 800614e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006150:	2b00      	cmp	r3, #0
 8006152:	4606      	mov	r6, r0
 8006154:	dd7c      	ble.n	8006250 <_dtoa_r+0x8d8>
 8006156:	461a      	mov	r2, r3
 8006158:	4601      	mov	r1, r0
 800615a:	4620      	mov	r0, r4
 800615c:	f000 ff88 	bl	8007070 <__pow5mult>
 8006160:	9b05      	ldr	r3, [sp, #20]
 8006162:	2b01      	cmp	r3, #1
 8006164:	4606      	mov	r6, r0
 8006166:	dd76      	ble.n	8006256 <_dtoa_r+0x8de>
 8006168:	2300      	movs	r3, #0
 800616a:	9306      	str	r3, [sp, #24]
 800616c:	6933      	ldr	r3, [r6, #16]
 800616e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006172:	6918      	ldr	r0, [r3, #16]
 8006174:	f000 fe70 	bl	8006e58 <__hi0bits>
 8006178:	f1c0 0020 	rsb	r0, r0, #32
 800617c:	9b04      	ldr	r3, [sp, #16]
 800617e:	4418      	add	r0, r3
 8006180:	f010 001f 	ands.w	r0, r0, #31
 8006184:	f000 8086 	beq.w	8006294 <_dtoa_r+0x91c>
 8006188:	f1c0 0320 	rsb	r3, r0, #32
 800618c:	2b04      	cmp	r3, #4
 800618e:	dd7f      	ble.n	8006290 <_dtoa_r+0x918>
 8006190:	f1c0 001c 	rsb	r0, r0, #28
 8006194:	9b04      	ldr	r3, [sp, #16]
 8006196:	4403      	add	r3, r0
 8006198:	4480      	add	r8, r0
 800619a:	4405      	add	r5, r0
 800619c:	9304      	str	r3, [sp, #16]
 800619e:	f1b8 0f00 	cmp.w	r8, #0
 80061a2:	dd05      	ble.n	80061b0 <_dtoa_r+0x838>
 80061a4:	4659      	mov	r1, fp
 80061a6:	4642      	mov	r2, r8
 80061a8:	4620      	mov	r0, r4
 80061aa:	f000 ffbb 	bl	8007124 <__lshift>
 80061ae:	4683      	mov	fp, r0
 80061b0:	9b04      	ldr	r3, [sp, #16]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	dd05      	ble.n	80061c2 <_dtoa_r+0x84a>
 80061b6:	4631      	mov	r1, r6
 80061b8:	461a      	mov	r2, r3
 80061ba:	4620      	mov	r0, r4
 80061bc:	f000 ffb2 	bl	8007124 <__lshift>
 80061c0:	4606      	mov	r6, r0
 80061c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d069      	beq.n	800629c <_dtoa_r+0x924>
 80061c8:	4631      	mov	r1, r6
 80061ca:	4658      	mov	r0, fp
 80061cc:	f001 f816 	bl	80071fc <__mcmp>
 80061d0:	2800      	cmp	r0, #0
 80061d2:	da63      	bge.n	800629c <_dtoa_r+0x924>
 80061d4:	2300      	movs	r3, #0
 80061d6:	4659      	mov	r1, fp
 80061d8:	220a      	movs	r2, #10
 80061da:	4620      	mov	r0, r4
 80061dc:	f000 fda8 	bl	8006d30 <__multadd>
 80061e0:	9b08      	ldr	r3, [sp, #32]
 80061e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061e6:	4683      	mov	fp, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	f000 818f 	beq.w	800650c <_dtoa_r+0xb94>
 80061ee:	4639      	mov	r1, r7
 80061f0:	2300      	movs	r3, #0
 80061f2:	220a      	movs	r2, #10
 80061f4:	4620      	mov	r0, r4
 80061f6:	f000 fd9b 	bl	8006d30 <__multadd>
 80061fa:	f1b9 0f00 	cmp.w	r9, #0
 80061fe:	4607      	mov	r7, r0
 8006200:	f300 808e 	bgt.w	8006320 <_dtoa_r+0x9a8>
 8006204:	9b05      	ldr	r3, [sp, #20]
 8006206:	2b02      	cmp	r3, #2
 8006208:	dc50      	bgt.n	80062ac <_dtoa_r+0x934>
 800620a:	e089      	b.n	8006320 <_dtoa_r+0x9a8>
 800620c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800620e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006212:	e75d      	b.n	80060d0 <_dtoa_r+0x758>
 8006214:	9b01      	ldr	r3, [sp, #4]
 8006216:	1e5e      	subs	r6, r3, #1
 8006218:	9b06      	ldr	r3, [sp, #24]
 800621a:	42b3      	cmp	r3, r6
 800621c:	bfbf      	itttt	lt
 800621e:	9b06      	ldrlt	r3, [sp, #24]
 8006220:	9606      	strlt	r6, [sp, #24]
 8006222:	1af2      	sublt	r2, r6, r3
 8006224:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006226:	bfb6      	itet	lt
 8006228:	189b      	addlt	r3, r3, r2
 800622a:	1b9e      	subge	r6, r3, r6
 800622c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800622e:	9b01      	ldr	r3, [sp, #4]
 8006230:	bfb8      	it	lt
 8006232:	2600      	movlt	r6, #0
 8006234:	2b00      	cmp	r3, #0
 8006236:	bfb5      	itete	lt
 8006238:	eba8 0503 	sublt.w	r5, r8, r3
 800623c:	9b01      	ldrge	r3, [sp, #4]
 800623e:	2300      	movlt	r3, #0
 8006240:	4645      	movge	r5, r8
 8006242:	e747      	b.n	80060d4 <_dtoa_r+0x75c>
 8006244:	9e06      	ldr	r6, [sp, #24]
 8006246:	9f08      	ldr	r7, [sp, #32]
 8006248:	4645      	mov	r5, r8
 800624a:	e74c      	b.n	80060e6 <_dtoa_r+0x76e>
 800624c:	9a06      	ldr	r2, [sp, #24]
 800624e:	e775      	b.n	800613c <_dtoa_r+0x7c4>
 8006250:	9b05      	ldr	r3, [sp, #20]
 8006252:	2b01      	cmp	r3, #1
 8006254:	dc18      	bgt.n	8006288 <_dtoa_r+0x910>
 8006256:	9b02      	ldr	r3, [sp, #8]
 8006258:	b9b3      	cbnz	r3, 8006288 <_dtoa_r+0x910>
 800625a:	9b03      	ldr	r3, [sp, #12]
 800625c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006260:	b9a3      	cbnz	r3, 800628c <_dtoa_r+0x914>
 8006262:	9b03      	ldr	r3, [sp, #12]
 8006264:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006268:	0d1b      	lsrs	r3, r3, #20
 800626a:	051b      	lsls	r3, r3, #20
 800626c:	b12b      	cbz	r3, 800627a <_dtoa_r+0x902>
 800626e:	9b04      	ldr	r3, [sp, #16]
 8006270:	3301      	adds	r3, #1
 8006272:	9304      	str	r3, [sp, #16]
 8006274:	f108 0801 	add.w	r8, r8, #1
 8006278:	2301      	movs	r3, #1
 800627a:	9306      	str	r3, [sp, #24]
 800627c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800627e:	2b00      	cmp	r3, #0
 8006280:	f47f af74 	bne.w	800616c <_dtoa_r+0x7f4>
 8006284:	2001      	movs	r0, #1
 8006286:	e779      	b.n	800617c <_dtoa_r+0x804>
 8006288:	2300      	movs	r3, #0
 800628a:	e7f6      	b.n	800627a <_dtoa_r+0x902>
 800628c:	9b02      	ldr	r3, [sp, #8]
 800628e:	e7f4      	b.n	800627a <_dtoa_r+0x902>
 8006290:	d085      	beq.n	800619e <_dtoa_r+0x826>
 8006292:	4618      	mov	r0, r3
 8006294:	301c      	adds	r0, #28
 8006296:	e77d      	b.n	8006194 <_dtoa_r+0x81c>
 8006298:	40240000 	.word	0x40240000
 800629c:	9b01      	ldr	r3, [sp, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	dc38      	bgt.n	8006314 <_dtoa_r+0x99c>
 80062a2:	9b05      	ldr	r3, [sp, #20]
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	dd35      	ble.n	8006314 <_dtoa_r+0x99c>
 80062a8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80062ac:	f1b9 0f00 	cmp.w	r9, #0
 80062b0:	d10d      	bne.n	80062ce <_dtoa_r+0x956>
 80062b2:	4631      	mov	r1, r6
 80062b4:	464b      	mov	r3, r9
 80062b6:	2205      	movs	r2, #5
 80062b8:	4620      	mov	r0, r4
 80062ba:	f000 fd39 	bl	8006d30 <__multadd>
 80062be:	4601      	mov	r1, r0
 80062c0:	4606      	mov	r6, r0
 80062c2:	4658      	mov	r0, fp
 80062c4:	f000 ff9a 	bl	80071fc <__mcmp>
 80062c8:	2800      	cmp	r0, #0
 80062ca:	f73f adbd 	bgt.w	8005e48 <_dtoa_r+0x4d0>
 80062ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062d0:	9d00      	ldr	r5, [sp, #0]
 80062d2:	ea6f 0a03 	mvn.w	sl, r3
 80062d6:	f04f 0800 	mov.w	r8, #0
 80062da:	4631      	mov	r1, r6
 80062dc:	4620      	mov	r0, r4
 80062de:	f000 fd05 	bl	8006cec <_Bfree>
 80062e2:	2f00      	cmp	r7, #0
 80062e4:	f43f aeb4 	beq.w	8006050 <_dtoa_r+0x6d8>
 80062e8:	f1b8 0f00 	cmp.w	r8, #0
 80062ec:	d005      	beq.n	80062fa <_dtoa_r+0x982>
 80062ee:	45b8      	cmp	r8, r7
 80062f0:	d003      	beq.n	80062fa <_dtoa_r+0x982>
 80062f2:	4641      	mov	r1, r8
 80062f4:	4620      	mov	r0, r4
 80062f6:	f000 fcf9 	bl	8006cec <_Bfree>
 80062fa:	4639      	mov	r1, r7
 80062fc:	4620      	mov	r0, r4
 80062fe:	f000 fcf5 	bl	8006cec <_Bfree>
 8006302:	e6a5      	b.n	8006050 <_dtoa_r+0x6d8>
 8006304:	2600      	movs	r6, #0
 8006306:	4637      	mov	r7, r6
 8006308:	e7e1      	b.n	80062ce <_dtoa_r+0x956>
 800630a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800630c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006310:	4637      	mov	r7, r6
 8006312:	e599      	b.n	8005e48 <_dtoa_r+0x4d0>
 8006314:	9b08      	ldr	r3, [sp, #32]
 8006316:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	f000 80fd 	beq.w	800651a <_dtoa_r+0xba2>
 8006320:	2d00      	cmp	r5, #0
 8006322:	dd05      	ble.n	8006330 <_dtoa_r+0x9b8>
 8006324:	4639      	mov	r1, r7
 8006326:	462a      	mov	r2, r5
 8006328:	4620      	mov	r0, r4
 800632a:	f000 fefb 	bl	8007124 <__lshift>
 800632e:	4607      	mov	r7, r0
 8006330:	9b06      	ldr	r3, [sp, #24]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d05c      	beq.n	80063f0 <_dtoa_r+0xa78>
 8006336:	6879      	ldr	r1, [r7, #4]
 8006338:	4620      	mov	r0, r4
 800633a:	f000 fc97 	bl	8006c6c <_Balloc>
 800633e:	4605      	mov	r5, r0
 8006340:	b928      	cbnz	r0, 800634e <_dtoa_r+0x9d6>
 8006342:	4b80      	ldr	r3, [pc, #512]	; (8006544 <_dtoa_r+0xbcc>)
 8006344:	4602      	mov	r2, r0
 8006346:	f240 21ea 	movw	r1, #746	; 0x2ea
 800634a:	f7ff bb2e 	b.w	80059aa <_dtoa_r+0x32>
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	3202      	adds	r2, #2
 8006352:	0092      	lsls	r2, r2, #2
 8006354:	f107 010c 	add.w	r1, r7, #12
 8006358:	300c      	adds	r0, #12
 800635a:	f7fd fd17 	bl	8003d8c <memcpy>
 800635e:	2201      	movs	r2, #1
 8006360:	4629      	mov	r1, r5
 8006362:	4620      	mov	r0, r4
 8006364:	f000 fede 	bl	8007124 <__lshift>
 8006368:	9b00      	ldr	r3, [sp, #0]
 800636a:	3301      	adds	r3, #1
 800636c:	9301      	str	r3, [sp, #4]
 800636e:	9b00      	ldr	r3, [sp, #0]
 8006370:	444b      	add	r3, r9
 8006372:	9307      	str	r3, [sp, #28]
 8006374:	9b02      	ldr	r3, [sp, #8]
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	46b8      	mov	r8, r7
 800637c:	9306      	str	r3, [sp, #24]
 800637e:	4607      	mov	r7, r0
 8006380:	9b01      	ldr	r3, [sp, #4]
 8006382:	4631      	mov	r1, r6
 8006384:	3b01      	subs	r3, #1
 8006386:	4658      	mov	r0, fp
 8006388:	9302      	str	r3, [sp, #8]
 800638a:	f7ff fa67 	bl	800585c <quorem>
 800638e:	4603      	mov	r3, r0
 8006390:	3330      	adds	r3, #48	; 0x30
 8006392:	9004      	str	r0, [sp, #16]
 8006394:	4641      	mov	r1, r8
 8006396:	4658      	mov	r0, fp
 8006398:	9308      	str	r3, [sp, #32]
 800639a:	f000 ff2f 	bl	80071fc <__mcmp>
 800639e:	463a      	mov	r2, r7
 80063a0:	4681      	mov	r9, r0
 80063a2:	4631      	mov	r1, r6
 80063a4:	4620      	mov	r0, r4
 80063a6:	f000 ff45 	bl	8007234 <__mdiff>
 80063aa:	68c2      	ldr	r2, [r0, #12]
 80063ac:	9b08      	ldr	r3, [sp, #32]
 80063ae:	4605      	mov	r5, r0
 80063b0:	bb02      	cbnz	r2, 80063f4 <_dtoa_r+0xa7c>
 80063b2:	4601      	mov	r1, r0
 80063b4:	4658      	mov	r0, fp
 80063b6:	f000 ff21 	bl	80071fc <__mcmp>
 80063ba:	9b08      	ldr	r3, [sp, #32]
 80063bc:	4602      	mov	r2, r0
 80063be:	4629      	mov	r1, r5
 80063c0:	4620      	mov	r0, r4
 80063c2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80063c6:	f000 fc91 	bl	8006cec <_Bfree>
 80063ca:	9b05      	ldr	r3, [sp, #20]
 80063cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063ce:	9d01      	ldr	r5, [sp, #4]
 80063d0:	ea43 0102 	orr.w	r1, r3, r2
 80063d4:	9b06      	ldr	r3, [sp, #24]
 80063d6:	430b      	orrs	r3, r1
 80063d8:	9b08      	ldr	r3, [sp, #32]
 80063da:	d10d      	bne.n	80063f8 <_dtoa_r+0xa80>
 80063dc:	2b39      	cmp	r3, #57	; 0x39
 80063de:	d029      	beq.n	8006434 <_dtoa_r+0xabc>
 80063e0:	f1b9 0f00 	cmp.w	r9, #0
 80063e4:	dd01      	ble.n	80063ea <_dtoa_r+0xa72>
 80063e6:	9b04      	ldr	r3, [sp, #16]
 80063e8:	3331      	adds	r3, #49	; 0x31
 80063ea:	9a02      	ldr	r2, [sp, #8]
 80063ec:	7013      	strb	r3, [r2, #0]
 80063ee:	e774      	b.n	80062da <_dtoa_r+0x962>
 80063f0:	4638      	mov	r0, r7
 80063f2:	e7b9      	b.n	8006368 <_dtoa_r+0x9f0>
 80063f4:	2201      	movs	r2, #1
 80063f6:	e7e2      	b.n	80063be <_dtoa_r+0xa46>
 80063f8:	f1b9 0f00 	cmp.w	r9, #0
 80063fc:	db06      	blt.n	800640c <_dtoa_r+0xa94>
 80063fe:	9905      	ldr	r1, [sp, #20]
 8006400:	ea41 0909 	orr.w	r9, r1, r9
 8006404:	9906      	ldr	r1, [sp, #24]
 8006406:	ea59 0101 	orrs.w	r1, r9, r1
 800640a:	d120      	bne.n	800644e <_dtoa_r+0xad6>
 800640c:	2a00      	cmp	r2, #0
 800640e:	ddec      	ble.n	80063ea <_dtoa_r+0xa72>
 8006410:	4659      	mov	r1, fp
 8006412:	2201      	movs	r2, #1
 8006414:	4620      	mov	r0, r4
 8006416:	9301      	str	r3, [sp, #4]
 8006418:	f000 fe84 	bl	8007124 <__lshift>
 800641c:	4631      	mov	r1, r6
 800641e:	4683      	mov	fp, r0
 8006420:	f000 feec 	bl	80071fc <__mcmp>
 8006424:	2800      	cmp	r0, #0
 8006426:	9b01      	ldr	r3, [sp, #4]
 8006428:	dc02      	bgt.n	8006430 <_dtoa_r+0xab8>
 800642a:	d1de      	bne.n	80063ea <_dtoa_r+0xa72>
 800642c:	07da      	lsls	r2, r3, #31
 800642e:	d5dc      	bpl.n	80063ea <_dtoa_r+0xa72>
 8006430:	2b39      	cmp	r3, #57	; 0x39
 8006432:	d1d8      	bne.n	80063e6 <_dtoa_r+0xa6e>
 8006434:	9a02      	ldr	r2, [sp, #8]
 8006436:	2339      	movs	r3, #57	; 0x39
 8006438:	7013      	strb	r3, [r2, #0]
 800643a:	462b      	mov	r3, r5
 800643c:	461d      	mov	r5, r3
 800643e:	3b01      	subs	r3, #1
 8006440:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006444:	2a39      	cmp	r2, #57	; 0x39
 8006446:	d050      	beq.n	80064ea <_dtoa_r+0xb72>
 8006448:	3201      	adds	r2, #1
 800644a:	701a      	strb	r2, [r3, #0]
 800644c:	e745      	b.n	80062da <_dtoa_r+0x962>
 800644e:	2a00      	cmp	r2, #0
 8006450:	dd03      	ble.n	800645a <_dtoa_r+0xae2>
 8006452:	2b39      	cmp	r3, #57	; 0x39
 8006454:	d0ee      	beq.n	8006434 <_dtoa_r+0xabc>
 8006456:	3301      	adds	r3, #1
 8006458:	e7c7      	b.n	80063ea <_dtoa_r+0xa72>
 800645a:	9a01      	ldr	r2, [sp, #4]
 800645c:	9907      	ldr	r1, [sp, #28]
 800645e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006462:	428a      	cmp	r2, r1
 8006464:	d02a      	beq.n	80064bc <_dtoa_r+0xb44>
 8006466:	4659      	mov	r1, fp
 8006468:	2300      	movs	r3, #0
 800646a:	220a      	movs	r2, #10
 800646c:	4620      	mov	r0, r4
 800646e:	f000 fc5f 	bl	8006d30 <__multadd>
 8006472:	45b8      	cmp	r8, r7
 8006474:	4683      	mov	fp, r0
 8006476:	f04f 0300 	mov.w	r3, #0
 800647a:	f04f 020a 	mov.w	r2, #10
 800647e:	4641      	mov	r1, r8
 8006480:	4620      	mov	r0, r4
 8006482:	d107      	bne.n	8006494 <_dtoa_r+0xb1c>
 8006484:	f000 fc54 	bl	8006d30 <__multadd>
 8006488:	4680      	mov	r8, r0
 800648a:	4607      	mov	r7, r0
 800648c:	9b01      	ldr	r3, [sp, #4]
 800648e:	3301      	adds	r3, #1
 8006490:	9301      	str	r3, [sp, #4]
 8006492:	e775      	b.n	8006380 <_dtoa_r+0xa08>
 8006494:	f000 fc4c 	bl	8006d30 <__multadd>
 8006498:	4639      	mov	r1, r7
 800649a:	4680      	mov	r8, r0
 800649c:	2300      	movs	r3, #0
 800649e:	220a      	movs	r2, #10
 80064a0:	4620      	mov	r0, r4
 80064a2:	f000 fc45 	bl	8006d30 <__multadd>
 80064a6:	4607      	mov	r7, r0
 80064a8:	e7f0      	b.n	800648c <_dtoa_r+0xb14>
 80064aa:	f1b9 0f00 	cmp.w	r9, #0
 80064ae:	9a00      	ldr	r2, [sp, #0]
 80064b0:	bfcc      	ite	gt
 80064b2:	464d      	movgt	r5, r9
 80064b4:	2501      	movle	r5, #1
 80064b6:	4415      	add	r5, r2
 80064b8:	f04f 0800 	mov.w	r8, #0
 80064bc:	4659      	mov	r1, fp
 80064be:	2201      	movs	r2, #1
 80064c0:	4620      	mov	r0, r4
 80064c2:	9301      	str	r3, [sp, #4]
 80064c4:	f000 fe2e 	bl	8007124 <__lshift>
 80064c8:	4631      	mov	r1, r6
 80064ca:	4683      	mov	fp, r0
 80064cc:	f000 fe96 	bl	80071fc <__mcmp>
 80064d0:	2800      	cmp	r0, #0
 80064d2:	dcb2      	bgt.n	800643a <_dtoa_r+0xac2>
 80064d4:	d102      	bne.n	80064dc <_dtoa_r+0xb64>
 80064d6:	9b01      	ldr	r3, [sp, #4]
 80064d8:	07db      	lsls	r3, r3, #31
 80064da:	d4ae      	bmi.n	800643a <_dtoa_r+0xac2>
 80064dc:	462b      	mov	r3, r5
 80064de:	461d      	mov	r5, r3
 80064e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80064e4:	2a30      	cmp	r2, #48	; 0x30
 80064e6:	d0fa      	beq.n	80064de <_dtoa_r+0xb66>
 80064e8:	e6f7      	b.n	80062da <_dtoa_r+0x962>
 80064ea:	9a00      	ldr	r2, [sp, #0]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d1a5      	bne.n	800643c <_dtoa_r+0xac4>
 80064f0:	f10a 0a01 	add.w	sl, sl, #1
 80064f4:	2331      	movs	r3, #49	; 0x31
 80064f6:	e779      	b.n	80063ec <_dtoa_r+0xa74>
 80064f8:	4b13      	ldr	r3, [pc, #76]	; (8006548 <_dtoa_r+0xbd0>)
 80064fa:	f7ff baaf 	b.w	8005a5c <_dtoa_r+0xe4>
 80064fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006500:	2b00      	cmp	r3, #0
 8006502:	f47f aa86 	bne.w	8005a12 <_dtoa_r+0x9a>
 8006506:	4b11      	ldr	r3, [pc, #68]	; (800654c <_dtoa_r+0xbd4>)
 8006508:	f7ff baa8 	b.w	8005a5c <_dtoa_r+0xe4>
 800650c:	f1b9 0f00 	cmp.w	r9, #0
 8006510:	dc03      	bgt.n	800651a <_dtoa_r+0xba2>
 8006512:	9b05      	ldr	r3, [sp, #20]
 8006514:	2b02      	cmp	r3, #2
 8006516:	f73f aec9 	bgt.w	80062ac <_dtoa_r+0x934>
 800651a:	9d00      	ldr	r5, [sp, #0]
 800651c:	4631      	mov	r1, r6
 800651e:	4658      	mov	r0, fp
 8006520:	f7ff f99c 	bl	800585c <quorem>
 8006524:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006528:	f805 3b01 	strb.w	r3, [r5], #1
 800652c:	9a00      	ldr	r2, [sp, #0]
 800652e:	1aaa      	subs	r2, r5, r2
 8006530:	4591      	cmp	r9, r2
 8006532:	ddba      	ble.n	80064aa <_dtoa_r+0xb32>
 8006534:	4659      	mov	r1, fp
 8006536:	2300      	movs	r3, #0
 8006538:	220a      	movs	r2, #10
 800653a:	4620      	mov	r0, r4
 800653c:	f000 fbf8 	bl	8006d30 <__multadd>
 8006540:	4683      	mov	fp, r0
 8006542:	e7eb      	b.n	800651c <_dtoa_r+0xba4>
 8006544:	0800886c 	.word	0x0800886c
 8006548:	08008668 	.word	0x08008668
 800654c:	080087e9 	.word	0x080087e9

08006550 <rshift>:
 8006550:	6903      	ldr	r3, [r0, #16]
 8006552:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006556:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800655a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800655e:	f100 0414 	add.w	r4, r0, #20
 8006562:	dd45      	ble.n	80065f0 <rshift+0xa0>
 8006564:	f011 011f 	ands.w	r1, r1, #31
 8006568:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800656c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006570:	d10c      	bne.n	800658c <rshift+0x3c>
 8006572:	f100 0710 	add.w	r7, r0, #16
 8006576:	4629      	mov	r1, r5
 8006578:	42b1      	cmp	r1, r6
 800657a:	d334      	bcc.n	80065e6 <rshift+0x96>
 800657c:	1a9b      	subs	r3, r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	1eea      	subs	r2, r5, #3
 8006582:	4296      	cmp	r6, r2
 8006584:	bf38      	it	cc
 8006586:	2300      	movcc	r3, #0
 8006588:	4423      	add	r3, r4
 800658a:	e015      	b.n	80065b8 <rshift+0x68>
 800658c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006590:	f1c1 0820 	rsb	r8, r1, #32
 8006594:	40cf      	lsrs	r7, r1
 8006596:	f105 0e04 	add.w	lr, r5, #4
 800659a:	46a1      	mov	r9, r4
 800659c:	4576      	cmp	r6, lr
 800659e:	46f4      	mov	ip, lr
 80065a0:	d815      	bhi.n	80065ce <rshift+0x7e>
 80065a2:	1a9b      	subs	r3, r3, r2
 80065a4:	009a      	lsls	r2, r3, #2
 80065a6:	3a04      	subs	r2, #4
 80065a8:	3501      	adds	r5, #1
 80065aa:	42ae      	cmp	r6, r5
 80065ac:	bf38      	it	cc
 80065ae:	2200      	movcc	r2, #0
 80065b0:	18a3      	adds	r3, r4, r2
 80065b2:	50a7      	str	r7, [r4, r2]
 80065b4:	b107      	cbz	r7, 80065b8 <rshift+0x68>
 80065b6:	3304      	adds	r3, #4
 80065b8:	1b1a      	subs	r2, r3, r4
 80065ba:	42a3      	cmp	r3, r4
 80065bc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80065c0:	bf08      	it	eq
 80065c2:	2300      	moveq	r3, #0
 80065c4:	6102      	str	r2, [r0, #16]
 80065c6:	bf08      	it	eq
 80065c8:	6143      	streq	r3, [r0, #20]
 80065ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065ce:	f8dc c000 	ldr.w	ip, [ip]
 80065d2:	fa0c fc08 	lsl.w	ip, ip, r8
 80065d6:	ea4c 0707 	orr.w	r7, ip, r7
 80065da:	f849 7b04 	str.w	r7, [r9], #4
 80065de:	f85e 7b04 	ldr.w	r7, [lr], #4
 80065e2:	40cf      	lsrs	r7, r1
 80065e4:	e7da      	b.n	800659c <rshift+0x4c>
 80065e6:	f851 cb04 	ldr.w	ip, [r1], #4
 80065ea:	f847 cf04 	str.w	ip, [r7, #4]!
 80065ee:	e7c3      	b.n	8006578 <rshift+0x28>
 80065f0:	4623      	mov	r3, r4
 80065f2:	e7e1      	b.n	80065b8 <rshift+0x68>

080065f4 <__hexdig_fun>:
 80065f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80065f8:	2b09      	cmp	r3, #9
 80065fa:	d802      	bhi.n	8006602 <__hexdig_fun+0xe>
 80065fc:	3820      	subs	r0, #32
 80065fe:	b2c0      	uxtb	r0, r0
 8006600:	4770      	bx	lr
 8006602:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006606:	2b05      	cmp	r3, #5
 8006608:	d801      	bhi.n	800660e <__hexdig_fun+0x1a>
 800660a:	3847      	subs	r0, #71	; 0x47
 800660c:	e7f7      	b.n	80065fe <__hexdig_fun+0xa>
 800660e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006612:	2b05      	cmp	r3, #5
 8006614:	d801      	bhi.n	800661a <__hexdig_fun+0x26>
 8006616:	3827      	subs	r0, #39	; 0x27
 8006618:	e7f1      	b.n	80065fe <__hexdig_fun+0xa>
 800661a:	2000      	movs	r0, #0
 800661c:	4770      	bx	lr
	...

08006620 <__gethex>:
 8006620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006624:	ed2d 8b02 	vpush	{d8}
 8006628:	b089      	sub	sp, #36	; 0x24
 800662a:	ee08 0a10 	vmov	s16, r0
 800662e:	9304      	str	r3, [sp, #16]
 8006630:	4bbc      	ldr	r3, [pc, #752]	; (8006924 <__gethex+0x304>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	9301      	str	r3, [sp, #4]
 8006636:	4618      	mov	r0, r3
 8006638:	468b      	mov	fp, r1
 800663a:	4690      	mov	r8, r2
 800663c:	f7f9 fdd0 	bl	80001e0 <strlen>
 8006640:	9b01      	ldr	r3, [sp, #4]
 8006642:	f8db 2000 	ldr.w	r2, [fp]
 8006646:	4403      	add	r3, r0
 8006648:	4682      	mov	sl, r0
 800664a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800664e:	9305      	str	r3, [sp, #20]
 8006650:	1c93      	adds	r3, r2, #2
 8006652:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006656:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800665a:	32fe      	adds	r2, #254	; 0xfe
 800665c:	18d1      	adds	r1, r2, r3
 800665e:	461f      	mov	r7, r3
 8006660:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006664:	9100      	str	r1, [sp, #0]
 8006666:	2830      	cmp	r0, #48	; 0x30
 8006668:	d0f8      	beq.n	800665c <__gethex+0x3c>
 800666a:	f7ff ffc3 	bl	80065f4 <__hexdig_fun>
 800666e:	4604      	mov	r4, r0
 8006670:	2800      	cmp	r0, #0
 8006672:	d13a      	bne.n	80066ea <__gethex+0xca>
 8006674:	9901      	ldr	r1, [sp, #4]
 8006676:	4652      	mov	r2, sl
 8006678:	4638      	mov	r0, r7
 800667a:	f001 f9e1 	bl	8007a40 <strncmp>
 800667e:	4605      	mov	r5, r0
 8006680:	2800      	cmp	r0, #0
 8006682:	d168      	bne.n	8006756 <__gethex+0x136>
 8006684:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006688:	eb07 060a 	add.w	r6, r7, sl
 800668c:	f7ff ffb2 	bl	80065f4 <__hexdig_fun>
 8006690:	2800      	cmp	r0, #0
 8006692:	d062      	beq.n	800675a <__gethex+0x13a>
 8006694:	4633      	mov	r3, r6
 8006696:	7818      	ldrb	r0, [r3, #0]
 8006698:	2830      	cmp	r0, #48	; 0x30
 800669a:	461f      	mov	r7, r3
 800669c:	f103 0301 	add.w	r3, r3, #1
 80066a0:	d0f9      	beq.n	8006696 <__gethex+0x76>
 80066a2:	f7ff ffa7 	bl	80065f4 <__hexdig_fun>
 80066a6:	2301      	movs	r3, #1
 80066a8:	fab0 f480 	clz	r4, r0
 80066ac:	0964      	lsrs	r4, r4, #5
 80066ae:	4635      	mov	r5, r6
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	463a      	mov	r2, r7
 80066b4:	4616      	mov	r6, r2
 80066b6:	3201      	adds	r2, #1
 80066b8:	7830      	ldrb	r0, [r6, #0]
 80066ba:	f7ff ff9b 	bl	80065f4 <__hexdig_fun>
 80066be:	2800      	cmp	r0, #0
 80066c0:	d1f8      	bne.n	80066b4 <__gethex+0x94>
 80066c2:	9901      	ldr	r1, [sp, #4]
 80066c4:	4652      	mov	r2, sl
 80066c6:	4630      	mov	r0, r6
 80066c8:	f001 f9ba 	bl	8007a40 <strncmp>
 80066cc:	b980      	cbnz	r0, 80066f0 <__gethex+0xd0>
 80066ce:	b94d      	cbnz	r5, 80066e4 <__gethex+0xc4>
 80066d0:	eb06 050a 	add.w	r5, r6, sl
 80066d4:	462a      	mov	r2, r5
 80066d6:	4616      	mov	r6, r2
 80066d8:	3201      	adds	r2, #1
 80066da:	7830      	ldrb	r0, [r6, #0]
 80066dc:	f7ff ff8a 	bl	80065f4 <__hexdig_fun>
 80066e0:	2800      	cmp	r0, #0
 80066e2:	d1f8      	bne.n	80066d6 <__gethex+0xb6>
 80066e4:	1bad      	subs	r5, r5, r6
 80066e6:	00ad      	lsls	r5, r5, #2
 80066e8:	e004      	b.n	80066f4 <__gethex+0xd4>
 80066ea:	2400      	movs	r4, #0
 80066ec:	4625      	mov	r5, r4
 80066ee:	e7e0      	b.n	80066b2 <__gethex+0x92>
 80066f0:	2d00      	cmp	r5, #0
 80066f2:	d1f7      	bne.n	80066e4 <__gethex+0xc4>
 80066f4:	7833      	ldrb	r3, [r6, #0]
 80066f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80066fa:	2b50      	cmp	r3, #80	; 0x50
 80066fc:	d13b      	bne.n	8006776 <__gethex+0x156>
 80066fe:	7873      	ldrb	r3, [r6, #1]
 8006700:	2b2b      	cmp	r3, #43	; 0x2b
 8006702:	d02c      	beq.n	800675e <__gethex+0x13e>
 8006704:	2b2d      	cmp	r3, #45	; 0x2d
 8006706:	d02e      	beq.n	8006766 <__gethex+0x146>
 8006708:	1c71      	adds	r1, r6, #1
 800670a:	f04f 0900 	mov.w	r9, #0
 800670e:	7808      	ldrb	r0, [r1, #0]
 8006710:	f7ff ff70 	bl	80065f4 <__hexdig_fun>
 8006714:	1e43      	subs	r3, r0, #1
 8006716:	b2db      	uxtb	r3, r3
 8006718:	2b18      	cmp	r3, #24
 800671a:	d82c      	bhi.n	8006776 <__gethex+0x156>
 800671c:	f1a0 0210 	sub.w	r2, r0, #16
 8006720:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006724:	f7ff ff66 	bl	80065f4 <__hexdig_fun>
 8006728:	1e43      	subs	r3, r0, #1
 800672a:	b2db      	uxtb	r3, r3
 800672c:	2b18      	cmp	r3, #24
 800672e:	d91d      	bls.n	800676c <__gethex+0x14c>
 8006730:	f1b9 0f00 	cmp.w	r9, #0
 8006734:	d000      	beq.n	8006738 <__gethex+0x118>
 8006736:	4252      	negs	r2, r2
 8006738:	4415      	add	r5, r2
 800673a:	f8cb 1000 	str.w	r1, [fp]
 800673e:	b1e4      	cbz	r4, 800677a <__gethex+0x15a>
 8006740:	9b00      	ldr	r3, [sp, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	bf14      	ite	ne
 8006746:	2700      	movne	r7, #0
 8006748:	2706      	moveq	r7, #6
 800674a:	4638      	mov	r0, r7
 800674c:	b009      	add	sp, #36	; 0x24
 800674e:	ecbd 8b02 	vpop	{d8}
 8006752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006756:	463e      	mov	r6, r7
 8006758:	4625      	mov	r5, r4
 800675a:	2401      	movs	r4, #1
 800675c:	e7ca      	b.n	80066f4 <__gethex+0xd4>
 800675e:	f04f 0900 	mov.w	r9, #0
 8006762:	1cb1      	adds	r1, r6, #2
 8006764:	e7d3      	b.n	800670e <__gethex+0xee>
 8006766:	f04f 0901 	mov.w	r9, #1
 800676a:	e7fa      	b.n	8006762 <__gethex+0x142>
 800676c:	230a      	movs	r3, #10
 800676e:	fb03 0202 	mla	r2, r3, r2, r0
 8006772:	3a10      	subs	r2, #16
 8006774:	e7d4      	b.n	8006720 <__gethex+0x100>
 8006776:	4631      	mov	r1, r6
 8006778:	e7df      	b.n	800673a <__gethex+0x11a>
 800677a:	1bf3      	subs	r3, r6, r7
 800677c:	3b01      	subs	r3, #1
 800677e:	4621      	mov	r1, r4
 8006780:	2b07      	cmp	r3, #7
 8006782:	dc0b      	bgt.n	800679c <__gethex+0x17c>
 8006784:	ee18 0a10 	vmov	r0, s16
 8006788:	f000 fa70 	bl	8006c6c <_Balloc>
 800678c:	4604      	mov	r4, r0
 800678e:	b940      	cbnz	r0, 80067a2 <__gethex+0x182>
 8006790:	4b65      	ldr	r3, [pc, #404]	; (8006928 <__gethex+0x308>)
 8006792:	4602      	mov	r2, r0
 8006794:	21de      	movs	r1, #222	; 0xde
 8006796:	4865      	ldr	r0, [pc, #404]	; (800692c <__gethex+0x30c>)
 8006798:	f001 f972 	bl	8007a80 <__assert_func>
 800679c:	3101      	adds	r1, #1
 800679e:	105b      	asrs	r3, r3, #1
 80067a0:	e7ee      	b.n	8006780 <__gethex+0x160>
 80067a2:	f100 0914 	add.w	r9, r0, #20
 80067a6:	f04f 0b00 	mov.w	fp, #0
 80067aa:	f1ca 0301 	rsb	r3, sl, #1
 80067ae:	f8cd 9008 	str.w	r9, [sp, #8]
 80067b2:	f8cd b000 	str.w	fp, [sp]
 80067b6:	9306      	str	r3, [sp, #24]
 80067b8:	42b7      	cmp	r7, r6
 80067ba:	d340      	bcc.n	800683e <__gethex+0x21e>
 80067bc:	9802      	ldr	r0, [sp, #8]
 80067be:	9b00      	ldr	r3, [sp, #0]
 80067c0:	f840 3b04 	str.w	r3, [r0], #4
 80067c4:	eba0 0009 	sub.w	r0, r0, r9
 80067c8:	1080      	asrs	r0, r0, #2
 80067ca:	0146      	lsls	r6, r0, #5
 80067cc:	6120      	str	r0, [r4, #16]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f000 fb42 	bl	8006e58 <__hi0bits>
 80067d4:	1a30      	subs	r0, r6, r0
 80067d6:	f8d8 6000 	ldr.w	r6, [r8]
 80067da:	42b0      	cmp	r0, r6
 80067dc:	dd63      	ble.n	80068a6 <__gethex+0x286>
 80067de:	1b87      	subs	r7, r0, r6
 80067e0:	4639      	mov	r1, r7
 80067e2:	4620      	mov	r0, r4
 80067e4:	f000 fedc 	bl	80075a0 <__any_on>
 80067e8:	4682      	mov	sl, r0
 80067ea:	b1a8      	cbz	r0, 8006818 <__gethex+0x1f8>
 80067ec:	1e7b      	subs	r3, r7, #1
 80067ee:	1159      	asrs	r1, r3, #5
 80067f0:	f003 021f 	and.w	r2, r3, #31
 80067f4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80067f8:	f04f 0a01 	mov.w	sl, #1
 80067fc:	fa0a f202 	lsl.w	r2, sl, r2
 8006800:	420a      	tst	r2, r1
 8006802:	d009      	beq.n	8006818 <__gethex+0x1f8>
 8006804:	4553      	cmp	r3, sl
 8006806:	dd05      	ble.n	8006814 <__gethex+0x1f4>
 8006808:	1eb9      	subs	r1, r7, #2
 800680a:	4620      	mov	r0, r4
 800680c:	f000 fec8 	bl	80075a0 <__any_on>
 8006810:	2800      	cmp	r0, #0
 8006812:	d145      	bne.n	80068a0 <__gethex+0x280>
 8006814:	f04f 0a02 	mov.w	sl, #2
 8006818:	4639      	mov	r1, r7
 800681a:	4620      	mov	r0, r4
 800681c:	f7ff fe98 	bl	8006550 <rshift>
 8006820:	443d      	add	r5, r7
 8006822:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006826:	42ab      	cmp	r3, r5
 8006828:	da4c      	bge.n	80068c4 <__gethex+0x2a4>
 800682a:	ee18 0a10 	vmov	r0, s16
 800682e:	4621      	mov	r1, r4
 8006830:	f000 fa5c 	bl	8006cec <_Bfree>
 8006834:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006836:	2300      	movs	r3, #0
 8006838:	6013      	str	r3, [r2, #0]
 800683a:	27a3      	movs	r7, #163	; 0xa3
 800683c:	e785      	b.n	800674a <__gethex+0x12a>
 800683e:	1e73      	subs	r3, r6, #1
 8006840:	9a05      	ldr	r2, [sp, #20]
 8006842:	9303      	str	r3, [sp, #12]
 8006844:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006848:	4293      	cmp	r3, r2
 800684a:	d019      	beq.n	8006880 <__gethex+0x260>
 800684c:	f1bb 0f20 	cmp.w	fp, #32
 8006850:	d107      	bne.n	8006862 <__gethex+0x242>
 8006852:	9b02      	ldr	r3, [sp, #8]
 8006854:	9a00      	ldr	r2, [sp, #0]
 8006856:	f843 2b04 	str.w	r2, [r3], #4
 800685a:	9302      	str	r3, [sp, #8]
 800685c:	2300      	movs	r3, #0
 800685e:	9300      	str	r3, [sp, #0]
 8006860:	469b      	mov	fp, r3
 8006862:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006866:	f7ff fec5 	bl	80065f4 <__hexdig_fun>
 800686a:	9b00      	ldr	r3, [sp, #0]
 800686c:	f000 000f 	and.w	r0, r0, #15
 8006870:	fa00 f00b 	lsl.w	r0, r0, fp
 8006874:	4303      	orrs	r3, r0
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	f10b 0b04 	add.w	fp, fp, #4
 800687c:	9b03      	ldr	r3, [sp, #12]
 800687e:	e00d      	b.n	800689c <__gethex+0x27c>
 8006880:	9b03      	ldr	r3, [sp, #12]
 8006882:	9a06      	ldr	r2, [sp, #24]
 8006884:	4413      	add	r3, r2
 8006886:	42bb      	cmp	r3, r7
 8006888:	d3e0      	bcc.n	800684c <__gethex+0x22c>
 800688a:	4618      	mov	r0, r3
 800688c:	9901      	ldr	r1, [sp, #4]
 800688e:	9307      	str	r3, [sp, #28]
 8006890:	4652      	mov	r2, sl
 8006892:	f001 f8d5 	bl	8007a40 <strncmp>
 8006896:	9b07      	ldr	r3, [sp, #28]
 8006898:	2800      	cmp	r0, #0
 800689a:	d1d7      	bne.n	800684c <__gethex+0x22c>
 800689c:	461e      	mov	r6, r3
 800689e:	e78b      	b.n	80067b8 <__gethex+0x198>
 80068a0:	f04f 0a03 	mov.w	sl, #3
 80068a4:	e7b8      	b.n	8006818 <__gethex+0x1f8>
 80068a6:	da0a      	bge.n	80068be <__gethex+0x29e>
 80068a8:	1a37      	subs	r7, r6, r0
 80068aa:	4621      	mov	r1, r4
 80068ac:	ee18 0a10 	vmov	r0, s16
 80068b0:	463a      	mov	r2, r7
 80068b2:	f000 fc37 	bl	8007124 <__lshift>
 80068b6:	1bed      	subs	r5, r5, r7
 80068b8:	4604      	mov	r4, r0
 80068ba:	f100 0914 	add.w	r9, r0, #20
 80068be:	f04f 0a00 	mov.w	sl, #0
 80068c2:	e7ae      	b.n	8006822 <__gethex+0x202>
 80068c4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80068c8:	42a8      	cmp	r0, r5
 80068ca:	dd72      	ble.n	80069b2 <__gethex+0x392>
 80068cc:	1b45      	subs	r5, r0, r5
 80068ce:	42ae      	cmp	r6, r5
 80068d0:	dc36      	bgt.n	8006940 <__gethex+0x320>
 80068d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d02a      	beq.n	8006930 <__gethex+0x310>
 80068da:	2b03      	cmp	r3, #3
 80068dc:	d02c      	beq.n	8006938 <__gethex+0x318>
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d115      	bne.n	800690e <__gethex+0x2ee>
 80068e2:	42ae      	cmp	r6, r5
 80068e4:	d113      	bne.n	800690e <__gethex+0x2ee>
 80068e6:	2e01      	cmp	r6, #1
 80068e8:	d10b      	bne.n	8006902 <__gethex+0x2e2>
 80068ea:	9a04      	ldr	r2, [sp, #16]
 80068ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80068f0:	6013      	str	r3, [r2, #0]
 80068f2:	2301      	movs	r3, #1
 80068f4:	6123      	str	r3, [r4, #16]
 80068f6:	f8c9 3000 	str.w	r3, [r9]
 80068fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80068fc:	2762      	movs	r7, #98	; 0x62
 80068fe:	601c      	str	r4, [r3, #0]
 8006900:	e723      	b.n	800674a <__gethex+0x12a>
 8006902:	1e71      	subs	r1, r6, #1
 8006904:	4620      	mov	r0, r4
 8006906:	f000 fe4b 	bl	80075a0 <__any_on>
 800690a:	2800      	cmp	r0, #0
 800690c:	d1ed      	bne.n	80068ea <__gethex+0x2ca>
 800690e:	ee18 0a10 	vmov	r0, s16
 8006912:	4621      	mov	r1, r4
 8006914:	f000 f9ea 	bl	8006cec <_Bfree>
 8006918:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800691a:	2300      	movs	r3, #0
 800691c:	6013      	str	r3, [r2, #0]
 800691e:	2750      	movs	r7, #80	; 0x50
 8006920:	e713      	b.n	800674a <__gethex+0x12a>
 8006922:	bf00      	nop
 8006924:	080088e8 	.word	0x080088e8
 8006928:	0800886c 	.word	0x0800886c
 800692c:	0800887d 	.word	0x0800887d
 8006930:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1eb      	bne.n	800690e <__gethex+0x2ee>
 8006936:	e7d8      	b.n	80068ea <__gethex+0x2ca>
 8006938:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1d5      	bne.n	80068ea <__gethex+0x2ca>
 800693e:	e7e6      	b.n	800690e <__gethex+0x2ee>
 8006940:	1e6f      	subs	r7, r5, #1
 8006942:	f1ba 0f00 	cmp.w	sl, #0
 8006946:	d131      	bne.n	80069ac <__gethex+0x38c>
 8006948:	b127      	cbz	r7, 8006954 <__gethex+0x334>
 800694a:	4639      	mov	r1, r7
 800694c:	4620      	mov	r0, r4
 800694e:	f000 fe27 	bl	80075a0 <__any_on>
 8006952:	4682      	mov	sl, r0
 8006954:	117b      	asrs	r3, r7, #5
 8006956:	2101      	movs	r1, #1
 8006958:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800695c:	f007 071f 	and.w	r7, r7, #31
 8006960:	fa01 f707 	lsl.w	r7, r1, r7
 8006964:	421f      	tst	r7, r3
 8006966:	4629      	mov	r1, r5
 8006968:	4620      	mov	r0, r4
 800696a:	bf18      	it	ne
 800696c:	f04a 0a02 	orrne.w	sl, sl, #2
 8006970:	1b76      	subs	r6, r6, r5
 8006972:	f7ff fded 	bl	8006550 <rshift>
 8006976:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800697a:	2702      	movs	r7, #2
 800697c:	f1ba 0f00 	cmp.w	sl, #0
 8006980:	d048      	beq.n	8006a14 <__gethex+0x3f4>
 8006982:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006986:	2b02      	cmp	r3, #2
 8006988:	d015      	beq.n	80069b6 <__gethex+0x396>
 800698a:	2b03      	cmp	r3, #3
 800698c:	d017      	beq.n	80069be <__gethex+0x39e>
 800698e:	2b01      	cmp	r3, #1
 8006990:	d109      	bne.n	80069a6 <__gethex+0x386>
 8006992:	f01a 0f02 	tst.w	sl, #2
 8006996:	d006      	beq.n	80069a6 <__gethex+0x386>
 8006998:	f8d9 0000 	ldr.w	r0, [r9]
 800699c:	ea4a 0a00 	orr.w	sl, sl, r0
 80069a0:	f01a 0f01 	tst.w	sl, #1
 80069a4:	d10e      	bne.n	80069c4 <__gethex+0x3a4>
 80069a6:	f047 0710 	orr.w	r7, r7, #16
 80069aa:	e033      	b.n	8006a14 <__gethex+0x3f4>
 80069ac:	f04f 0a01 	mov.w	sl, #1
 80069b0:	e7d0      	b.n	8006954 <__gethex+0x334>
 80069b2:	2701      	movs	r7, #1
 80069b4:	e7e2      	b.n	800697c <__gethex+0x35c>
 80069b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80069b8:	f1c3 0301 	rsb	r3, r3, #1
 80069bc:	9315      	str	r3, [sp, #84]	; 0x54
 80069be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d0f0      	beq.n	80069a6 <__gethex+0x386>
 80069c4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80069c8:	f104 0314 	add.w	r3, r4, #20
 80069cc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80069d0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80069d4:	f04f 0c00 	mov.w	ip, #0
 80069d8:	4618      	mov	r0, r3
 80069da:	f853 2b04 	ldr.w	r2, [r3], #4
 80069de:	f1b2 3fff 	cmp.w	r2, #4294967295
 80069e2:	d01c      	beq.n	8006a1e <__gethex+0x3fe>
 80069e4:	3201      	adds	r2, #1
 80069e6:	6002      	str	r2, [r0, #0]
 80069e8:	2f02      	cmp	r7, #2
 80069ea:	f104 0314 	add.w	r3, r4, #20
 80069ee:	d13f      	bne.n	8006a70 <__gethex+0x450>
 80069f0:	f8d8 2000 	ldr.w	r2, [r8]
 80069f4:	3a01      	subs	r2, #1
 80069f6:	42b2      	cmp	r2, r6
 80069f8:	d10a      	bne.n	8006a10 <__gethex+0x3f0>
 80069fa:	1171      	asrs	r1, r6, #5
 80069fc:	2201      	movs	r2, #1
 80069fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006a02:	f006 061f 	and.w	r6, r6, #31
 8006a06:	fa02 f606 	lsl.w	r6, r2, r6
 8006a0a:	421e      	tst	r6, r3
 8006a0c:	bf18      	it	ne
 8006a0e:	4617      	movne	r7, r2
 8006a10:	f047 0720 	orr.w	r7, r7, #32
 8006a14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a16:	601c      	str	r4, [r3, #0]
 8006a18:	9b04      	ldr	r3, [sp, #16]
 8006a1a:	601d      	str	r5, [r3, #0]
 8006a1c:	e695      	b.n	800674a <__gethex+0x12a>
 8006a1e:	4299      	cmp	r1, r3
 8006a20:	f843 cc04 	str.w	ip, [r3, #-4]
 8006a24:	d8d8      	bhi.n	80069d8 <__gethex+0x3b8>
 8006a26:	68a3      	ldr	r3, [r4, #8]
 8006a28:	459b      	cmp	fp, r3
 8006a2a:	db19      	blt.n	8006a60 <__gethex+0x440>
 8006a2c:	6861      	ldr	r1, [r4, #4]
 8006a2e:	ee18 0a10 	vmov	r0, s16
 8006a32:	3101      	adds	r1, #1
 8006a34:	f000 f91a 	bl	8006c6c <_Balloc>
 8006a38:	4681      	mov	r9, r0
 8006a3a:	b918      	cbnz	r0, 8006a44 <__gethex+0x424>
 8006a3c:	4b1a      	ldr	r3, [pc, #104]	; (8006aa8 <__gethex+0x488>)
 8006a3e:	4602      	mov	r2, r0
 8006a40:	2184      	movs	r1, #132	; 0x84
 8006a42:	e6a8      	b.n	8006796 <__gethex+0x176>
 8006a44:	6922      	ldr	r2, [r4, #16]
 8006a46:	3202      	adds	r2, #2
 8006a48:	f104 010c 	add.w	r1, r4, #12
 8006a4c:	0092      	lsls	r2, r2, #2
 8006a4e:	300c      	adds	r0, #12
 8006a50:	f7fd f99c 	bl	8003d8c <memcpy>
 8006a54:	4621      	mov	r1, r4
 8006a56:	ee18 0a10 	vmov	r0, s16
 8006a5a:	f000 f947 	bl	8006cec <_Bfree>
 8006a5e:	464c      	mov	r4, r9
 8006a60:	6923      	ldr	r3, [r4, #16]
 8006a62:	1c5a      	adds	r2, r3, #1
 8006a64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006a68:	6122      	str	r2, [r4, #16]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	615a      	str	r2, [r3, #20]
 8006a6e:	e7bb      	b.n	80069e8 <__gethex+0x3c8>
 8006a70:	6922      	ldr	r2, [r4, #16]
 8006a72:	455a      	cmp	r2, fp
 8006a74:	dd0b      	ble.n	8006a8e <__gethex+0x46e>
 8006a76:	2101      	movs	r1, #1
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f7ff fd69 	bl	8006550 <rshift>
 8006a7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006a82:	3501      	adds	r5, #1
 8006a84:	42ab      	cmp	r3, r5
 8006a86:	f6ff aed0 	blt.w	800682a <__gethex+0x20a>
 8006a8a:	2701      	movs	r7, #1
 8006a8c:	e7c0      	b.n	8006a10 <__gethex+0x3f0>
 8006a8e:	f016 061f 	ands.w	r6, r6, #31
 8006a92:	d0fa      	beq.n	8006a8a <__gethex+0x46a>
 8006a94:	449a      	add	sl, r3
 8006a96:	f1c6 0620 	rsb	r6, r6, #32
 8006a9a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006a9e:	f000 f9db 	bl	8006e58 <__hi0bits>
 8006aa2:	42b0      	cmp	r0, r6
 8006aa4:	dbe7      	blt.n	8006a76 <__gethex+0x456>
 8006aa6:	e7f0      	b.n	8006a8a <__gethex+0x46a>
 8006aa8:	0800886c 	.word	0x0800886c

08006aac <L_shift>:
 8006aac:	f1c2 0208 	rsb	r2, r2, #8
 8006ab0:	0092      	lsls	r2, r2, #2
 8006ab2:	b570      	push	{r4, r5, r6, lr}
 8006ab4:	f1c2 0620 	rsb	r6, r2, #32
 8006ab8:	6843      	ldr	r3, [r0, #4]
 8006aba:	6804      	ldr	r4, [r0, #0]
 8006abc:	fa03 f506 	lsl.w	r5, r3, r6
 8006ac0:	432c      	orrs	r4, r5
 8006ac2:	40d3      	lsrs	r3, r2
 8006ac4:	6004      	str	r4, [r0, #0]
 8006ac6:	f840 3f04 	str.w	r3, [r0, #4]!
 8006aca:	4288      	cmp	r0, r1
 8006acc:	d3f4      	bcc.n	8006ab8 <L_shift+0xc>
 8006ace:	bd70      	pop	{r4, r5, r6, pc}

08006ad0 <__match>:
 8006ad0:	b530      	push	{r4, r5, lr}
 8006ad2:	6803      	ldr	r3, [r0, #0]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ada:	b914      	cbnz	r4, 8006ae2 <__match+0x12>
 8006adc:	6003      	str	r3, [r0, #0]
 8006ade:	2001      	movs	r0, #1
 8006ae0:	bd30      	pop	{r4, r5, pc}
 8006ae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ae6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006aea:	2d19      	cmp	r5, #25
 8006aec:	bf98      	it	ls
 8006aee:	3220      	addls	r2, #32
 8006af0:	42a2      	cmp	r2, r4
 8006af2:	d0f0      	beq.n	8006ad6 <__match+0x6>
 8006af4:	2000      	movs	r0, #0
 8006af6:	e7f3      	b.n	8006ae0 <__match+0x10>

08006af8 <__hexnan>:
 8006af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006afc:	680b      	ldr	r3, [r1, #0]
 8006afe:	6801      	ldr	r1, [r0, #0]
 8006b00:	115e      	asrs	r6, r3, #5
 8006b02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006b06:	f013 031f 	ands.w	r3, r3, #31
 8006b0a:	b087      	sub	sp, #28
 8006b0c:	bf18      	it	ne
 8006b0e:	3604      	addne	r6, #4
 8006b10:	2500      	movs	r5, #0
 8006b12:	1f37      	subs	r7, r6, #4
 8006b14:	4682      	mov	sl, r0
 8006b16:	4690      	mov	r8, r2
 8006b18:	9301      	str	r3, [sp, #4]
 8006b1a:	f846 5c04 	str.w	r5, [r6, #-4]
 8006b1e:	46b9      	mov	r9, r7
 8006b20:	463c      	mov	r4, r7
 8006b22:	9502      	str	r5, [sp, #8]
 8006b24:	46ab      	mov	fp, r5
 8006b26:	784a      	ldrb	r2, [r1, #1]
 8006b28:	1c4b      	adds	r3, r1, #1
 8006b2a:	9303      	str	r3, [sp, #12]
 8006b2c:	b342      	cbz	r2, 8006b80 <__hexnan+0x88>
 8006b2e:	4610      	mov	r0, r2
 8006b30:	9105      	str	r1, [sp, #20]
 8006b32:	9204      	str	r2, [sp, #16]
 8006b34:	f7ff fd5e 	bl	80065f4 <__hexdig_fun>
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	d14f      	bne.n	8006bdc <__hexnan+0xe4>
 8006b3c:	9a04      	ldr	r2, [sp, #16]
 8006b3e:	9905      	ldr	r1, [sp, #20]
 8006b40:	2a20      	cmp	r2, #32
 8006b42:	d818      	bhi.n	8006b76 <__hexnan+0x7e>
 8006b44:	9b02      	ldr	r3, [sp, #8]
 8006b46:	459b      	cmp	fp, r3
 8006b48:	dd13      	ble.n	8006b72 <__hexnan+0x7a>
 8006b4a:	454c      	cmp	r4, r9
 8006b4c:	d206      	bcs.n	8006b5c <__hexnan+0x64>
 8006b4e:	2d07      	cmp	r5, #7
 8006b50:	dc04      	bgt.n	8006b5c <__hexnan+0x64>
 8006b52:	462a      	mov	r2, r5
 8006b54:	4649      	mov	r1, r9
 8006b56:	4620      	mov	r0, r4
 8006b58:	f7ff ffa8 	bl	8006aac <L_shift>
 8006b5c:	4544      	cmp	r4, r8
 8006b5e:	d950      	bls.n	8006c02 <__hexnan+0x10a>
 8006b60:	2300      	movs	r3, #0
 8006b62:	f1a4 0904 	sub.w	r9, r4, #4
 8006b66:	f844 3c04 	str.w	r3, [r4, #-4]
 8006b6a:	f8cd b008 	str.w	fp, [sp, #8]
 8006b6e:	464c      	mov	r4, r9
 8006b70:	461d      	mov	r5, r3
 8006b72:	9903      	ldr	r1, [sp, #12]
 8006b74:	e7d7      	b.n	8006b26 <__hexnan+0x2e>
 8006b76:	2a29      	cmp	r2, #41	; 0x29
 8006b78:	d156      	bne.n	8006c28 <__hexnan+0x130>
 8006b7a:	3102      	adds	r1, #2
 8006b7c:	f8ca 1000 	str.w	r1, [sl]
 8006b80:	f1bb 0f00 	cmp.w	fp, #0
 8006b84:	d050      	beq.n	8006c28 <__hexnan+0x130>
 8006b86:	454c      	cmp	r4, r9
 8006b88:	d206      	bcs.n	8006b98 <__hexnan+0xa0>
 8006b8a:	2d07      	cmp	r5, #7
 8006b8c:	dc04      	bgt.n	8006b98 <__hexnan+0xa0>
 8006b8e:	462a      	mov	r2, r5
 8006b90:	4649      	mov	r1, r9
 8006b92:	4620      	mov	r0, r4
 8006b94:	f7ff ff8a 	bl	8006aac <L_shift>
 8006b98:	4544      	cmp	r4, r8
 8006b9a:	d934      	bls.n	8006c06 <__hexnan+0x10e>
 8006b9c:	f1a8 0204 	sub.w	r2, r8, #4
 8006ba0:	4623      	mov	r3, r4
 8006ba2:	f853 1b04 	ldr.w	r1, [r3], #4
 8006ba6:	f842 1f04 	str.w	r1, [r2, #4]!
 8006baa:	429f      	cmp	r7, r3
 8006bac:	d2f9      	bcs.n	8006ba2 <__hexnan+0xaa>
 8006bae:	1b3b      	subs	r3, r7, r4
 8006bb0:	f023 0303 	bic.w	r3, r3, #3
 8006bb4:	3304      	adds	r3, #4
 8006bb6:	3401      	adds	r4, #1
 8006bb8:	3e03      	subs	r6, #3
 8006bba:	42b4      	cmp	r4, r6
 8006bbc:	bf88      	it	hi
 8006bbe:	2304      	movhi	r3, #4
 8006bc0:	4443      	add	r3, r8
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f843 2b04 	str.w	r2, [r3], #4
 8006bc8:	429f      	cmp	r7, r3
 8006bca:	d2fb      	bcs.n	8006bc4 <__hexnan+0xcc>
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	b91b      	cbnz	r3, 8006bd8 <__hexnan+0xe0>
 8006bd0:	4547      	cmp	r7, r8
 8006bd2:	d127      	bne.n	8006c24 <__hexnan+0x12c>
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	603b      	str	r3, [r7, #0]
 8006bd8:	2005      	movs	r0, #5
 8006bda:	e026      	b.n	8006c2a <__hexnan+0x132>
 8006bdc:	3501      	adds	r5, #1
 8006bde:	2d08      	cmp	r5, #8
 8006be0:	f10b 0b01 	add.w	fp, fp, #1
 8006be4:	dd06      	ble.n	8006bf4 <__hexnan+0xfc>
 8006be6:	4544      	cmp	r4, r8
 8006be8:	d9c3      	bls.n	8006b72 <__hexnan+0x7a>
 8006bea:	2300      	movs	r3, #0
 8006bec:	f844 3c04 	str.w	r3, [r4, #-4]
 8006bf0:	2501      	movs	r5, #1
 8006bf2:	3c04      	subs	r4, #4
 8006bf4:	6822      	ldr	r2, [r4, #0]
 8006bf6:	f000 000f 	and.w	r0, r0, #15
 8006bfa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006bfe:	6022      	str	r2, [r4, #0]
 8006c00:	e7b7      	b.n	8006b72 <__hexnan+0x7a>
 8006c02:	2508      	movs	r5, #8
 8006c04:	e7b5      	b.n	8006b72 <__hexnan+0x7a>
 8006c06:	9b01      	ldr	r3, [sp, #4]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d0df      	beq.n	8006bcc <__hexnan+0xd4>
 8006c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c10:	f1c3 0320 	rsb	r3, r3, #32
 8006c14:	fa22 f303 	lsr.w	r3, r2, r3
 8006c18:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006c1c:	401a      	ands	r2, r3
 8006c1e:	f846 2c04 	str.w	r2, [r6, #-4]
 8006c22:	e7d3      	b.n	8006bcc <__hexnan+0xd4>
 8006c24:	3f04      	subs	r7, #4
 8006c26:	e7d1      	b.n	8006bcc <__hexnan+0xd4>
 8006c28:	2004      	movs	r0, #4
 8006c2a:	b007      	add	sp, #28
 8006c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006c30 <_localeconv_r>:
 8006c30:	4800      	ldr	r0, [pc, #0]	; (8006c34 <_localeconv_r+0x4>)
 8006c32:	4770      	bx	lr
 8006c34:	20000178 	.word	0x20000178

08006c38 <malloc>:
 8006c38:	4b02      	ldr	r3, [pc, #8]	; (8006c44 <malloc+0xc>)
 8006c3a:	4601      	mov	r1, r0
 8006c3c:	6818      	ldr	r0, [r3, #0]
 8006c3e:	f000 bd2f 	b.w	80076a0 <_malloc_r>
 8006c42:	bf00      	nop
 8006c44:	20000020 	.word	0x20000020

08006c48 <__ascii_mbtowc>:
 8006c48:	b082      	sub	sp, #8
 8006c4a:	b901      	cbnz	r1, 8006c4e <__ascii_mbtowc+0x6>
 8006c4c:	a901      	add	r1, sp, #4
 8006c4e:	b142      	cbz	r2, 8006c62 <__ascii_mbtowc+0x1a>
 8006c50:	b14b      	cbz	r3, 8006c66 <__ascii_mbtowc+0x1e>
 8006c52:	7813      	ldrb	r3, [r2, #0]
 8006c54:	600b      	str	r3, [r1, #0]
 8006c56:	7812      	ldrb	r2, [r2, #0]
 8006c58:	1e10      	subs	r0, r2, #0
 8006c5a:	bf18      	it	ne
 8006c5c:	2001      	movne	r0, #1
 8006c5e:	b002      	add	sp, #8
 8006c60:	4770      	bx	lr
 8006c62:	4610      	mov	r0, r2
 8006c64:	e7fb      	b.n	8006c5e <__ascii_mbtowc+0x16>
 8006c66:	f06f 0001 	mvn.w	r0, #1
 8006c6a:	e7f8      	b.n	8006c5e <__ascii_mbtowc+0x16>

08006c6c <_Balloc>:
 8006c6c:	b570      	push	{r4, r5, r6, lr}
 8006c6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006c70:	4604      	mov	r4, r0
 8006c72:	460d      	mov	r5, r1
 8006c74:	b976      	cbnz	r6, 8006c94 <_Balloc+0x28>
 8006c76:	2010      	movs	r0, #16
 8006c78:	f7ff ffde 	bl	8006c38 <malloc>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	6260      	str	r0, [r4, #36]	; 0x24
 8006c80:	b920      	cbnz	r0, 8006c8c <_Balloc+0x20>
 8006c82:	4b18      	ldr	r3, [pc, #96]	; (8006ce4 <_Balloc+0x78>)
 8006c84:	4818      	ldr	r0, [pc, #96]	; (8006ce8 <_Balloc+0x7c>)
 8006c86:	2166      	movs	r1, #102	; 0x66
 8006c88:	f000 fefa 	bl	8007a80 <__assert_func>
 8006c8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c90:	6006      	str	r6, [r0, #0]
 8006c92:	60c6      	str	r6, [r0, #12]
 8006c94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006c96:	68f3      	ldr	r3, [r6, #12]
 8006c98:	b183      	cbz	r3, 8006cbc <_Balloc+0x50>
 8006c9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006ca2:	b9b8      	cbnz	r0, 8006cd4 <_Balloc+0x68>
 8006ca4:	2101      	movs	r1, #1
 8006ca6:	fa01 f605 	lsl.w	r6, r1, r5
 8006caa:	1d72      	adds	r2, r6, #5
 8006cac:	0092      	lsls	r2, r2, #2
 8006cae:	4620      	mov	r0, r4
 8006cb0:	f000 fc97 	bl	80075e2 <_calloc_r>
 8006cb4:	b160      	cbz	r0, 8006cd0 <_Balloc+0x64>
 8006cb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006cba:	e00e      	b.n	8006cda <_Balloc+0x6e>
 8006cbc:	2221      	movs	r2, #33	; 0x21
 8006cbe:	2104      	movs	r1, #4
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	f000 fc8e 	bl	80075e2 <_calloc_r>
 8006cc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cc8:	60f0      	str	r0, [r6, #12]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1e4      	bne.n	8006c9a <_Balloc+0x2e>
 8006cd0:	2000      	movs	r0, #0
 8006cd2:	bd70      	pop	{r4, r5, r6, pc}
 8006cd4:	6802      	ldr	r2, [r0, #0]
 8006cd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006cda:	2300      	movs	r3, #0
 8006cdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ce0:	e7f7      	b.n	8006cd2 <_Balloc+0x66>
 8006ce2:	bf00      	nop
 8006ce4:	080087f6 	.word	0x080087f6
 8006ce8:	080088fc 	.word	0x080088fc

08006cec <_Bfree>:
 8006cec:	b570      	push	{r4, r5, r6, lr}
 8006cee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006cf0:	4605      	mov	r5, r0
 8006cf2:	460c      	mov	r4, r1
 8006cf4:	b976      	cbnz	r6, 8006d14 <_Bfree+0x28>
 8006cf6:	2010      	movs	r0, #16
 8006cf8:	f7ff ff9e 	bl	8006c38 <malloc>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	6268      	str	r0, [r5, #36]	; 0x24
 8006d00:	b920      	cbnz	r0, 8006d0c <_Bfree+0x20>
 8006d02:	4b09      	ldr	r3, [pc, #36]	; (8006d28 <_Bfree+0x3c>)
 8006d04:	4809      	ldr	r0, [pc, #36]	; (8006d2c <_Bfree+0x40>)
 8006d06:	218a      	movs	r1, #138	; 0x8a
 8006d08:	f000 feba 	bl	8007a80 <__assert_func>
 8006d0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d10:	6006      	str	r6, [r0, #0]
 8006d12:	60c6      	str	r6, [r0, #12]
 8006d14:	b13c      	cbz	r4, 8006d26 <_Bfree+0x3a>
 8006d16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006d18:	6862      	ldr	r2, [r4, #4]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d20:	6021      	str	r1, [r4, #0]
 8006d22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006d26:	bd70      	pop	{r4, r5, r6, pc}
 8006d28:	080087f6 	.word	0x080087f6
 8006d2c:	080088fc 	.word	0x080088fc

08006d30 <__multadd>:
 8006d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d34:	690e      	ldr	r6, [r1, #16]
 8006d36:	4607      	mov	r7, r0
 8006d38:	4698      	mov	r8, r3
 8006d3a:	460c      	mov	r4, r1
 8006d3c:	f101 0014 	add.w	r0, r1, #20
 8006d40:	2300      	movs	r3, #0
 8006d42:	6805      	ldr	r5, [r0, #0]
 8006d44:	b2a9      	uxth	r1, r5
 8006d46:	fb02 8101 	mla	r1, r2, r1, r8
 8006d4a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006d4e:	0c2d      	lsrs	r5, r5, #16
 8006d50:	fb02 c505 	mla	r5, r2, r5, ip
 8006d54:	b289      	uxth	r1, r1
 8006d56:	3301      	adds	r3, #1
 8006d58:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006d5c:	429e      	cmp	r6, r3
 8006d5e:	f840 1b04 	str.w	r1, [r0], #4
 8006d62:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006d66:	dcec      	bgt.n	8006d42 <__multadd+0x12>
 8006d68:	f1b8 0f00 	cmp.w	r8, #0
 8006d6c:	d022      	beq.n	8006db4 <__multadd+0x84>
 8006d6e:	68a3      	ldr	r3, [r4, #8]
 8006d70:	42b3      	cmp	r3, r6
 8006d72:	dc19      	bgt.n	8006da8 <__multadd+0x78>
 8006d74:	6861      	ldr	r1, [r4, #4]
 8006d76:	4638      	mov	r0, r7
 8006d78:	3101      	adds	r1, #1
 8006d7a:	f7ff ff77 	bl	8006c6c <_Balloc>
 8006d7e:	4605      	mov	r5, r0
 8006d80:	b928      	cbnz	r0, 8006d8e <__multadd+0x5e>
 8006d82:	4602      	mov	r2, r0
 8006d84:	4b0d      	ldr	r3, [pc, #52]	; (8006dbc <__multadd+0x8c>)
 8006d86:	480e      	ldr	r0, [pc, #56]	; (8006dc0 <__multadd+0x90>)
 8006d88:	21b5      	movs	r1, #181	; 0xb5
 8006d8a:	f000 fe79 	bl	8007a80 <__assert_func>
 8006d8e:	6922      	ldr	r2, [r4, #16]
 8006d90:	3202      	adds	r2, #2
 8006d92:	f104 010c 	add.w	r1, r4, #12
 8006d96:	0092      	lsls	r2, r2, #2
 8006d98:	300c      	adds	r0, #12
 8006d9a:	f7fc fff7 	bl	8003d8c <memcpy>
 8006d9e:	4621      	mov	r1, r4
 8006da0:	4638      	mov	r0, r7
 8006da2:	f7ff ffa3 	bl	8006cec <_Bfree>
 8006da6:	462c      	mov	r4, r5
 8006da8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006dac:	3601      	adds	r6, #1
 8006dae:	f8c3 8014 	str.w	r8, [r3, #20]
 8006db2:	6126      	str	r6, [r4, #16]
 8006db4:	4620      	mov	r0, r4
 8006db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dba:	bf00      	nop
 8006dbc:	0800886c 	.word	0x0800886c
 8006dc0:	080088fc 	.word	0x080088fc

08006dc4 <__s2b>:
 8006dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dc8:	460c      	mov	r4, r1
 8006dca:	4615      	mov	r5, r2
 8006dcc:	461f      	mov	r7, r3
 8006dce:	2209      	movs	r2, #9
 8006dd0:	3308      	adds	r3, #8
 8006dd2:	4606      	mov	r6, r0
 8006dd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006dd8:	2100      	movs	r1, #0
 8006dda:	2201      	movs	r2, #1
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	db09      	blt.n	8006df4 <__s2b+0x30>
 8006de0:	4630      	mov	r0, r6
 8006de2:	f7ff ff43 	bl	8006c6c <_Balloc>
 8006de6:	b940      	cbnz	r0, 8006dfa <__s2b+0x36>
 8006de8:	4602      	mov	r2, r0
 8006dea:	4b19      	ldr	r3, [pc, #100]	; (8006e50 <__s2b+0x8c>)
 8006dec:	4819      	ldr	r0, [pc, #100]	; (8006e54 <__s2b+0x90>)
 8006dee:	21ce      	movs	r1, #206	; 0xce
 8006df0:	f000 fe46 	bl	8007a80 <__assert_func>
 8006df4:	0052      	lsls	r2, r2, #1
 8006df6:	3101      	adds	r1, #1
 8006df8:	e7f0      	b.n	8006ddc <__s2b+0x18>
 8006dfa:	9b08      	ldr	r3, [sp, #32]
 8006dfc:	6143      	str	r3, [r0, #20]
 8006dfe:	2d09      	cmp	r5, #9
 8006e00:	f04f 0301 	mov.w	r3, #1
 8006e04:	6103      	str	r3, [r0, #16]
 8006e06:	dd16      	ble.n	8006e36 <__s2b+0x72>
 8006e08:	f104 0909 	add.w	r9, r4, #9
 8006e0c:	46c8      	mov	r8, r9
 8006e0e:	442c      	add	r4, r5
 8006e10:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006e14:	4601      	mov	r1, r0
 8006e16:	3b30      	subs	r3, #48	; 0x30
 8006e18:	220a      	movs	r2, #10
 8006e1a:	4630      	mov	r0, r6
 8006e1c:	f7ff ff88 	bl	8006d30 <__multadd>
 8006e20:	45a0      	cmp	r8, r4
 8006e22:	d1f5      	bne.n	8006e10 <__s2b+0x4c>
 8006e24:	f1a5 0408 	sub.w	r4, r5, #8
 8006e28:	444c      	add	r4, r9
 8006e2a:	1b2d      	subs	r5, r5, r4
 8006e2c:	1963      	adds	r3, r4, r5
 8006e2e:	42bb      	cmp	r3, r7
 8006e30:	db04      	blt.n	8006e3c <__s2b+0x78>
 8006e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e36:	340a      	adds	r4, #10
 8006e38:	2509      	movs	r5, #9
 8006e3a:	e7f6      	b.n	8006e2a <__s2b+0x66>
 8006e3c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006e40:	4601      	mov	r1, r0
 8006e42:	3b30      	subs	r3, #48	; 0x30
 8006e44:	220a      	movs	r2, #10
 8006e46:	4630      	mov	r0, r6
 8006e48:	f7ff ff72 	bl	8006d30 <__multadd>
 8006e4c:	e7ee      	b.n	8006e2c <__s2b+0x68>
 8006e4e:	bf00      	nop
 8006e50:	0800886c 	.word	0x0800886c
 8006e54:	080088fc 	.word	0x080088fc

08006e58 <__hi0bits>:
 8006e58:	0c03      	lsrs	r3, r0, #16
 8006e5a:	041b      	lsls	r3, r3, #16
 8006e5c:	b9d3      	cbnz	r3, 8006e94 <__hi0bits+0x3c>
 8006e5e:	0400      	lsls	r0, r0, #16
 8006e60:	2310      	movs	r3, #16
 8006e62:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006e66:	bf04      	itt	eq
 8006e68:	0200      	lsleq	r0, r0, #8
 8006e6a:	3308      	addeq	r3, #8
 8006e6c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006e70:	bf04      	itt	eq
 8006e72:	0100      	lsleq	r0, r0, #4
 8006e74:	3304      	addeq	r3, #4
 8006e76:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006e7a:	bf04      	itt	eq
 8006e7c:	0080      	lsleq	r0, r0, #2
 8006e7e:	3302      	addeq	r3, #2
 8006e80:	2800      	cmp	r0, #0
 8006e82:	db05      	blt.n	8006e90 <__hi0bits+0x38>
 8006e84:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006e88:	f103 0301 	add.w	r3, r3, #1
 8006e8c:	bf08      	it	eq
 8006e8e:	2320      	moveq	r3, #32
 8006e90:	4618      	mov	r0, r3
 8006e92:	4770      	bx	lr
 8006e94:	2300      	movs	r3, #0
 8006e96:	e7e4      	b.n	8006e62 <__hi0bits+0xa>

08006e98 <__lo0bits>:
 8006e98:	6803      	ldr	r3, [r0, #0]
 8006e9a:	f013 0207 	ands.w	r2, r3, #7
 8006e9e:	4601      	mov	r1, r0
 8006ea0:	d00b      	beq.n	8006eba <__lo0bits+0x22>
 8006ea2:	07da      	lsls	r2, r3, #31
 8006ea4:	d424      	bmi.n	8006ef0 <__lo0bits+0x58>
 8006ea6:	0798      	lsls	r0, r3, #30
 8006ea8:	bf49      	itett	mi
 8006eaa:	085b      	lsrmi	r3, r3, #1
 8006eac:	089b      	lsrpl	r3, r3, #2
 8006eae:	2001      	movmi	r0, #1
 8006eb0:	600b      	strmi	r3, [r1, #0]
 8006eb2:	bf5c      	itt	pl
 8006eb4:	600b      	strpl	r3, [r1, #0]
 8006eb6:	2002      	movpl	r0, #2
 8006eb8:	4770      	bx	lr
 8006eba:	b298      	uxth	r0, r3
 8006ebc:	b9b0      	cbnz	r0, 8006eec <__lo0bits+0x54>
 8006ebe:	0c1b      	lsrs	r3, r3, #16
 8006ec0:	2010      	movs	r0, #16
 8006ec2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006ec6:	bf04      	itt	eq
 8006ec8:	0a1b      	lsreq	r3, r3, #8
 8006eca:	3008      	addeq	r0, #8
 8006ecc:	071a      	lsls	r2, r3, #28
 8006ece:	bf04      	itt	eq
 8006ed0:	091b      	lsreq	r3, r3, #4
 8006ed2:	3004      	addeq	r0, #4
 8006ed4:	079a      	lsls	r2, r3, #30
 8006ed6:	bf04      	itt	eq
 8006ed8:	089b      	lsreq	r3, r3, #2
 8006eda:	3002      	addeq	r0, #2
 8006edc:	07da      	lsls	r2, r3, #31
 8006ede:	d403      	bmi.n	8006ee8 <__lo0bits+0x50>
 8006ee0:	085b      	lsrs	r3, r3, #1
 8006ee2:	f100 0001 	add.w	r0, r0, #1
 8006ee6:	d005      	beq.n	8006ef4 <__lo0bits+0x5c>
 8006ee8:	600b      	str	r3, [r1, #0]
 8006eea:	4770      	bx	lr
 8006eec:	4610      	mov	r0, r2
 8006eee:	e7e8      	b.n	8006ec2 <__lo0bits+0x2a>
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	4770      	bx	lr
 8006ef4:	2020      	movs	r0, #32
 8006ef6:	4770      	bx	lr

08006ef8 <__i2b>:
 8006ef8:	b510      	push	{r4, lr}
 8006efa:	460c      	mov	r4, r1
 8006efc:	2101      	movs	r1, #1
 8006efe:	f7ff feb5 	bl	8006c6c <_Balloc>
 8006f02:	4602      	mov	r2, r0
 8006f04:	b928      	cbnz	r0, 8006f12 <__i2b+0x1a>
 8006f06:	4b05      	ldr	r3, [pc, #20]	; (8006f1c <__i2b+0x24>)
 8006f08:	4805      	ldr	r0, [pc, #20]	; (8006f20 <__i2b+0x28>)
 8006f0a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006f0e:	f000 fdb7 	bl	8007a80 <__assert_func>
 8006f12:	2301      	movs	r3, #1
 8006f14:	6144      	str	r4, [r0, #20]
 8006f16:	6103      	str	r3, [r0, #16]
 8006f18:	bd10      	pop	{r4, pc}
 8006f1a:	bf00      	nop
 8006f1c:	0800886c 	.word	0x0800886c
 8006f20:	080088fc 	.word	0x080088fc

08006f24 <__multiply>:
 8006f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f28:	4614      	mov	r4, r2
 8006f2a:	690a      	ldr	r2, [r1, #16]
 8006f2c:	6923      	ldr	r3, [r4, #16]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	bfb8      	it	lt
 8006f32:	460b      	movlt	r3, r1
 8006f34:	460d      	mov	r5, r1
 8006f36:	bfbc      	itt	lt
 8006f38:	4625      	movlt	r5, r4
 8006f3a:	461c      	movlt	r4, r3
 8006f3c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006f40:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006f44:	68ab      	ldr	r3, [r5, #8]
 8006f46:	6869      	ldr	r1, [r5, #4]
 8006f48:	eb0a 0709 	add.w	r7, sl, r9
 8006f4c:	42bb      	cmp	r3, r7
 8006f4e:	b085      	sub	sp, #20
 8006f50:	bfb8      	it	lt
 8006f52:	3101      	addlt	r1, #1
 8006f54:	f7ff fe8a 	bl	8006c6c <_Balloc>
 8006f58:	b930      	cbnz	r0, 8006f68 <__multiply+0x44>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	4b42      	ldr	r3, [pc, #264]	; (8007068 <__multiply+0x144>)
 8006f5e:	4843      	ldr	r0, [pc, #268]	; (800706c <__multiply+0x148>)
 8006f60:	f240 115d 	movw	r1, #349	; 0x15d
 8006f64:	f000 fd8c 	bl	8007a80 <__assert_func>
 8006f68:	f100 0614 	add.w	r6, r0, #20
 8006f6c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006f70:	4633      	mov	r3, r6
 8006f72:	2200      	movs	r2, #0
 8006f74:	4543      	cmp	r3, r8
 8006f76:	d31e      	bcc.n	8006fb6 <__multiply+0x92>
 8006f78:	f105 0c14 	add.w	ip, r5, #20
 8006f7c:	f104 0314 	add.w	r3, r4, #20
 8006f80:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006f84:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006f88:	9202      	str	r2, [sp, #8]
 8006f8a:	ebac 0205 	sub.w	r2, ip, r5
 8006f8e:	3a15      	subs	r2, #21
 8006f90:	f022 0203 	bic.w	r2, r2, #3
 8006f94:	3204      	adds	r2, #4
 8006f96:	f105 0115 	add.w	r1, r5, #21
 8006f9a:	458c      	cmp	ip, r1
 8006f9c:	bf38      	it	cc
 8006f9e:	2204      	movcc	r2, #4
 8006fa0:	9201      	str	r2, [sp, #4]
 8006fa2:	9a02      	ldr	r2, [sp, #8]
 8006fa4:	9303      	str	r3, [sp, #12]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d808      	bhi.n	8006fbc <__multiply+0x98>
 8006faa:	2f00      	cmp	r7, #0
 8006fac:	dc55      	bgt.n	800705a <__multiply+0x136>
 8006fae:	6107      	str	r7, [r0, #16]
 8006fb0:	b005      	add	sp, #20
 8006fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fb6:	f843 2b04 	str.w	r2, [r3], #4
 8006fba:	e7db      	b.n	8006f74 <__multiply+0x50>
 8006fbc:	f8b3 a000 	ldrh.w	sl, [r3]
 8006fc0:	f1ba 0f00 	cmp.w	sl, #0
 8006fc4:	d020      	beq.n	8007008 <__multiply+0xe4>
 8006fc6:	f105 0e14 	add.w	lr, r5, #20
 8006fca:	46b1      	mov	r9, r6
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006fd2:	f8d9 b000 	ldr.w	fp, [r9]
 8006fd6:	b2a1      	uxth	r1, r4
 8006fd8:	fa1f fb8b 	uxth.w	fp, fp
 8006fdc:	fb0a b101 	mla	r1, sl, r1, fp
 8006fe0:	4411      	add	r1, r2
 8006fe2:	f8d9 2000 	ldr.w	r2, [r9]
 8006fe6:	0c24      	lsrs	r4, r4, #16
 8006fe8:	0c12      	lsrs	r2, r2, #16
 8006fea:	fb0a 2404 	mla	r4, sl, r4, r2
 8006fee:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006ff2:	b289      	uxth	r1, r1
 8006ff4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006ff8:	45f4      	cmp	ip, lr
 8006ffa:	f849 1b04 	str.w	r1, [r9], #4
 8006ffe:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007002:	d8e4      	bhi.n	8006fce <__multiply+0xaa>
 8007004:	9901      	ldr	r1, [sp, #4]
 8007006:	5072      	str	r2, [r6, r1]
 8007008:	9a03      	ldr	r2, [sp, #12]
 800700a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800700e:	3304      	adds	r3, #4
 8007010:	f1b9 0f00 	cmp.w	r9, #0
 8007014:	d01f      	beq.n	8007056 <__multiply+0x132>
 8007016:	6834      	ldr	r4, [r6, #0]
 8007018:	f105 0114 	add.w	r1, r5, #20
 800701c:	46b6      	mov	lr, r6
 800701e:	f04f 0a00 	mov.w	sl, #0
 8007022:	880a      	ldrh	r2, [r1, #0]
 8007024:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007028:	fb09 b202 	mla	r2, r9, r2, fp
 800702c:	4492      	add	sl, r2
 800702e:	b2a4      	uxth	r4, r4
 8007030:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007034:	f84e 4b04 	str.w	r4, [lr], #4
 8007038:	f851 4b04 	ldr.w	r4, [r1], #4
 800703c:	f8be 2000 	ldrh.w	r2, [lr]
 8007040:	0c24      	lsrs	r4, r4, #16
 8007042:	fb09 2404 	mla	r4, r9, r4, r2
 8007046:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800704a:	458c      	cmp	ip, r1
 800704c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007050:	d8e7      	bhi.n	8007022 <__multiply+0xfe>
 8007052:	9a01      	ldr	r2, [sp, #4]
 8007054:	50b4      	str	r4, [r6, r2]
 8007056:	3604      	adds	r6, #4
 8007058:	e7a3      	b.n	8006fa2 <__multiply+0x7e>
 800705a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1a5      	bne.n	8006fae <__multiply+0x8a>
 8007062:	3f01      	subs	r7, #1
 8007064:	e7a1      	b.n	8006faa <__multiply+0x86>
 8007066:	bf00      	nop
 8007068:	0800886c 	.word	0x0800886c
 800706c:	080088fc 	.word	0x080088fc

08007070 <__pow5mult>:
 8007070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007074:	4615      	mov	r5, r2
 8007076:	f012 0203 	ands.w	r2, r2, #3
 800707a:	4606      	mov	r6, r0
 800707c:	460f      	mov	r7, r1
 800707e:	d007      	beq.n	8007090 <__pow5mult+0x20>
 8007080:	4c25      	ldr	r4, [pc, #148]	; (8007118 <__pow5mult+0xa8>)
 8007082:	3a01      	subs	r2, #1
 8007084:	2300      	movs	r3, #0
 8007086:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800708a:	f7ff fe51 	bl	8006d30 <__multadd>
 800708e:	4607      	mov	r7, r0
 8007090:	10ad      	asrs	r5, r5, #2
 8007092:	d03d      	beq.n	8007110 <__pow5mult+0xa0>
 8007094:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007096:	b97c      	cbnz	r4, 80070b8 <__pow5mult+0x48>
 8007098:	2010      	movs	r0, #16
 800709a:	f7ff fdcd 	bl	8006c38 <malloc>
 800709e:	4602      	mov	r2, r0
 80070a0:	6270      	str	r0, [r6, #36]	; 0x24
 80070a2:	b928      	cbnz	r0, 80070b0 <__pow5mult+0x40>
 80070a4:	4b1d      	ldr	r3, [pc, #116]	; (800711c <__pow5mult+0xac>)
 80070a6:	481e      	ldr	r0, [pc, #120]	; (8007120 <__pow5mult+0xb0>)
 80070a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80070ac:	f000 fce8 	bl	8007a80 <__assert_func>
 80070b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070b4:	6004      	str	r4, [r0, #0]
 80070b6:	60c4      	str	r4, [r0, #12]
 80070b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80070bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80070c0:	b94c      	cbnz	r4, 80070d6 <__pow5mult+0x66>
 80070c2:	f240 2171 	movw	r1, #625	; 0x271
 80070c6:	4630      	mov	r0, r6
 80070c8:	f7ff ff16 	bl	8006ef8 <__i2b>
 80070cc:	2300      	movs	r3, #0
 80070ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80070d2:	4604      	mov	r4, r0
 80070d4:	6003      	str	r3, [r0, #0]
 80070d6:	f04f 0900 	mov.w	r9, #0
 80070da:	07eb      	lsls	r3, r5, #31
 80070dc:	d50a      	bpl.n	80070f4 <__pow5mult+0x84>
 80070de:	4639      	mov	r1, r7
 80070e0:	4622      	mov	r2, r4
 80070e2:	4630      	mov	r0, r6
 80070e4:	f7ff ff1e 	bl	8006f24 <__multiply>
 80070e8:	4639      	mov	r1, r7
 80070ea:	4680      	mov	r8, r0
 80070ec:	4630      	mov	r0, r6
 80070ee:	f7ff fdfd 	bl	8006cec <_Bfree>
 80070f2:	4647      	mov	r7, r8
 80070f4:	106d      	asrs	r5, r5, #1
 80070f6:	d00b      	beq.n	8007110 <__pow5mult+0xa0>
 80070f8:	6820      	ldr	r0, [r4, #0]
 80070fa:	b938      	cbnz	r0, 800710c <__pow5mult+0x9c>
 80070fc:	4622      	mov	r2, r4
 80070fe:	4621      	mov	r1, r4
 8007100:	4630      	mov	r0, r6
 8007102:	f7ff ff0f 	bl	8006f24 <__multiply>
 8007106:	6020      	str	r0, [r4, #0]
 8007108:	f8c0 9000 	str.w	r9, [r0]
 800710c:	4604      	mov	r4, r0
 800710e:	e7e4      	b.n	80070da <__pow5mult+0x6a>
 8007110:	4638      	mov	r0, r7
 8007112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007116:	bf00      	nop
 8007118:	08008a50 	.word	0x08008a50
 800711c:	080087f6 	.word	0x080087f6
 8007120:	080088fc 	.word	0x080088fc

08007124 <__lshift>:
 8007124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007128:	460c      	mov	r4, r1
 800712a:	6849      	ldr	r1, [r1, #4]
 800712c:	6923      	ldr	r3, [r4, #16]
 800712e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007132:	68a3      	ldr	r3, [r4, #8]
 8007134:	4607      	mov	r7, r0
 8007136:	4691      	mov	r9, r2
 8007138:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800713c:	f108 0601 	add.w	r6, r8, #1
 8007140:	42b3      	cmp	r3, r6
 8007142:	db0b      	blt.n	800715c <__lshift+0x38>
 8007144:	4638      	mov	r0, r7
 8007146:	f7ff fd91 	bl	8006c6c <_Balloc>
 800714a:	4605      	mov	r5, r0
 800714c:	b948      	cbnz	r0, 8007162 <__lshift+0x3e>
 800714e:	4602      	mov	r2, r0
 8007150:	4b28      	ldr	r3, [pc, #160]	; (80071f4 <__lshift+0xd0>)
 8007152:	4829      	ldr	r0, [pc, #164]	; (80071f8 <__lshift+0xd4>)
 8007154:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007158:	f000 fc92 	bl	8007a80 <__assert_func>
 800715c:	3101      	adds	r1, #1
 800715e:	005b      	lsls	r3, r3, #1
 8007160:	e7ee      	b.n	8007140 <__lshift+0x1c>
 8007162:	2300      	movs	r3, #0
 8007164:	f100 0114 	add.w	r1, r0, #20
 8007168:	f100 0210 	add.w	r2, r0, #16
 800716c:	4618      	mov	r0, r3
 800716e:	4553      	cmp	r3, sl
 8007170:	db33      	blt.n	80071da <__lshift+0xb6>
 8007172:	6920      	ldr	r0, [r4, #16]
 8007174:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007178:	f104 0314 	add.w	r3, r4, #20
 800717c:	f019 091f 	ands.w	r9, r9, #31
 8007180:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007184:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007188:	d02b      	beq.n	80071e2 <__lshift+0xbe>
 800718a:	f1c9 0e20 	rsb	lr, r9, #32
 800718e:	468a      	mov	sl, r1
 8007190:	2200      	movs	r2, #0
 8007192:	6818      	ldr	r0, [r3, #0]
 8007194:	fa00 f009 	lsl.w	r0, r0, r9
 8007198:	4302      	orrs	r2, r0
 800719a:	f84a 2b04 	str.w	r2, [sl], #4
 800719e:	f853 2b04 	ldr.w	r2, [r3], #4
 80071a2:	459c      	cmp	ip, r3
 80071a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80071a8:	d8f3      	bhi.n	8007192 <__lshift+0x6e>
 80071aa:	ebac 0304 	sub.w	r3, ip, r4
 80071ae:	3b15      	subs	r3, #21
 80071b0:	f023 0303 	bic.w	r3, r3, #3
 80071b4:	3304      	adds	r3, #4
 80071b6:	f104 0015 	add.w	r0, r4, #21
 80071ba:	4584      	cmp	ip, r0
 80071bc:	bf38      	it	cc
 80071be:	2304      	movcc	r3, #4
 80071c0:	50ca      	str	r2, [r1, r3]
 80071c2:	b10a      	cbz	r2, 80071c8 <__lshift+0xa4>
 80071c4:	f108 0602 	add.w	r6, r8, #2
 80071c8:	3e01      	subs	r6, #1
 80071ca:	4638      	mov	r0, r7
 80071cc:	612e      	str	r6, [r5, #16]
 80071ce:	4621      	mov	r1, r4
 80071d0:	f7ff fd8c 	bl	8006cec <_Bfree>
 80071d4:	4628      	mov	r0, r5
 80071d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071da:	f842 0f04 	str.w	r0, [r2, #4]!
 80071de:	3301      	adds	r3, #1
 80071e0:	e7c5      	b.n	800716e <__lshift+0x4a>
 80071e2:	3904      	subs	r1, #4
 80071e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80071e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80071ec:	459c      	cmp	ip, r3
 80071ee:	d8f9      	bhi.n	80071e4 <__lshift+0xc0>
 80071f0:	e7ea      	b.n	80071c8 <__lshift+0xa4>
 80071f2:	bf00      	nop
 80071f4:	0800886c 	.word	0x0800886c
 80071f8:	080088fc 	.word	0x080088fc

080071fc <__mcmp>:
 80071fc:	b530      	push	{r4, r5, lr}
 80071fe:	6902      	ldr	r2, [r0, #16]
 8007200:	690c      	ldr	r4, [r1, #16]
 8007202:	1b12      	subs	r2, r2, r4
 8007204:	d10e      	bne.n	8007224 <__mcmp+0x28>
 8007206:	f100 0314 	add.w	r3, r0, #20
 800720a:	3114      	adds	r1, #20
 800720c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007210:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007214:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007218:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800721c:	42a5      	cmp	r5, r4
 800721e:	d003      	beq.n	8007228 <__mcmp+0x2c>
 8007220:	d305      	bcc.n	800722e <__mcmp+0x32>
 8007222:	2201      	movs	r2, #1
 8007224:	4610      	mov	r0, r2
 8007226:	bd30      	pop	{r4, r5, pc}
 8007228:	4283      	cmp	r3, r0
 800722a:	d3f3      	bcc.n	8007214 <__mcmp+0x18>
 800722c:	e7fa      	b.n	8007224 <__mcmp+0x28>
 800722e:	f04f 32ff 	mov.w	r2, #4294967295
 8007232:	e7f7      	b.n	8007224 <__mcmp+0x28>

08007234 <__mdiff>:
 8007234:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007238:	460c      	mov	r4, r1
 800723a:	4606      	mov	r6, r0
 800723c:	4611      	mov	r1, r2
 800723e:	4620      	mov	r0, r4
 8007240:	4617      	mov	r7, r2
 8007242:	f7ff ffdb 	bl	80071fc <__mcmp>
 8007246:	1e05      	subs	r5, r0, #0
 8007248:	d110      	bne.n	800726c <__mdiff+0x38>
 800724a:	4629      	mov	r1, r5
 800724c:	4630      	mov	r0, r6
 800724e:	f7ff fd0d 	bl	8006c6c <_Balloc>
 8007252:	b930      	cbnz	r0, 8007262 <__mdiff+0x2e>
 8007254:	4b39      	ldr	r3, [pc, #228]	; (800733c <__mdiff+0x108>)
 8007256:	4602      	mov	r2, r0
 8007258:	f240 2132 	movw	r1, #562	; 0x232
 800725c:	4838      	ldr	r0, [pc, #224]	; (8007340 <__mdiff+0x10c>)
 800725e:	f000 fc0f 	bl	8007a80 <__assert_func>
 8007262:	2301      	movs	r3, #1
 8007264:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007268:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800726c:	bfa4      	itt	ge
 800726e:	463b      	movge	r3, r7
 8007270:	4627      	movge	r7, r4
 8007272:	4630      	mov	r0, r6
 8007274:	6879      	ldr	r1, [r7, #4]
 8007276:	bfa6      	itte	ge
 8007278:	461c      	movge	r4, r3
 800727a:	2500      	movge	r5, #0
 800727c:	2501      	movlt	r5, #1
 800727e:	f7ff fcf5 	bl	8006c6c <_Balloc>
 8007282:	b920      	cbnz	r0, 800728e <__mdiff+0x5a>
 8007284:	4b2d      	ldr	r3, [pc, #180]	; (800733c <__mdiff+0x108>)
 8007286:	4602      	mov	r2, r0
 8007288:	f44f 7110 	mov.w	r1, #576	; 0x240
 800728c:	e7e6      	b.n	800725c <__mdiff+0x28>
 800728e:	693e      	ldr	r6, [r7, #16]
 8007290:	60c5      	str	r5, [r0, #12]
 8007292:	6925      	ldr	r5, [r4, #16]
 8007294:	f107 0114 	add.w	r1, r7, #20
 8007298:	f104 0914 	add.w	r9, r4, #20
 800729c:	f100 0e14 	add.w	lr, r0, #20
 80072a0:	f107 0210 	add.w	r2, r7, #16
 80072a4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80072a8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80072ac:	46f2      	mov	sl, lr
 80072ae:	2700      	movs	r7, #0
 80072b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80072b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80072b8:	fa1f f883 	uxth.w	r8, r3
 80072bc:	fa17 f78b 	uxtah	r7, r7, fp
 80072c0:	0c1b      	lsrs	r3, r3, #16
 80072c2:	eba7 0808 	sub.w	r8, r7, r8
 80072c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80072ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80072ce:	fa1f f888 	uxth.w	r8, r8
 80072d2:	141f      	asrs	r7, r3, #16
 80072d4:	454d      	cmp	r5, r9
 80072d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80072da:	f84a 3b04 	str.w	r3, [sl], #4
 80072de:	d8e7      	bhi.n	80072b0 <__mdiff+0x7c>
 80072e0:	1b2b      	subs	r3, r5, r4
 80072e2:	3b15      	subs	r3, #21
 80072e4:	f023 0303 	bic.w	r3, r3, #3
 80072e8:	3304      	adds	r3, #4
 80072ea:	3415      	adds	r4, #21
 80072ec:	42a5      	cmp	r5, r4
 80072ee:	bf38      	it	cc
 80072f0:	2304      	movcc	r3, #4
 80072f2:	4419      	add	r1, r3
 80072f4:	4473      	add	r3, lr
 80072f6:	469e      	mov	lr, r3
 80072f8:	460d      	mov	r5, r1
 80072fa:	4565      	cmp	r5, ip
 80072fc:	d30e      	bcc.n	800731c <__mdiff+0xe8>
 80072fe:	f10c 0203 	add.w	r2, ip, #3
 8007302:	1a52      	subs	r2, r2, r1
 8007304:	f022 0203 	bic.w	r2, r2, #3
 8007308:	3903      	subs	r1, #3
 800730a:	458c      	cmp	ip, r1
 800730c:	bf38      	it	cc
 800730e:	2200      	movcc	r2, #0
 8007310:	441a      	add	r2, r3
 8007312:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007316:	b17b      	cbz	r3, 8007338 <__mdiff+0x104>
 8007318:	6106      	str	r6, [r0, #16]
 800731a:	e7a5      	b.n	8007268 <__mdiff+0x34>
 800731c:	f855 8b04 	ldr.w	r8, [r5], #4
 8007320:	fa17 f488 	uxtah	r4, r7, r8
 8007324:	1422      	asrs	r2, r4, #16
 8007326:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800732a:	b2a4      	uxth	r4, r4
 800732c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007330:	f84e 4b04 	str.w	r4, [lr], #4
 8007334:	1417      	asrs	r7, r2, #16
 8007336:	e7e0      	b.n	80072fa <__mdiff+0xc6>
 8007338:	3e01      	subs	r6, #1
 800733a:	e7ea      	b.n	8007312 <__mdiff+0xde>
 800733c:	0800886c 	.word	0x0800886c
 8007340:	080088fc 	.word	0x080088fc

08007344 <__ulp>:
 8007344:	b082      	sub	sp, #8
 8007346:	ed8d 0b00 	vstr	d0, [sp]
 800734a:	9b01      	ldr	r3, [sp, #4]
 800734c:	4912      	ldr	r1, [pc, #72]	; (8007398 <__ulp+0x54>)
 800734e:	4019      	ands	r1, r3
 8007350:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007354:	2900      	cmp	r1, #0
 8007356:	dd05      	ble.n	8007364 <__ulp+0x20>
 8007358:	2200      	movs	r2, #0
 800735a:	460b      	mov	r3, r1
 800735c:	ec43 2b10 	vmov	d0, r2, r3
 8007360:	b002      	add	sp, #8
 8007362:	4770      	bx	lr
 8007364:	4249      	negs	r1, r1
 8007366:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800736a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800736e:	f04f 0200 	mov.w	r2, #0
 8007372:	f04f 0300 	mov.w	r3, #0
 8007376:	da04      	bge.n	8007382 <__ulp+0x3e>
 8007378:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800737c:	fa41 f300 	asr.w	r3, r1, r0
 8007380:	e7ec      	b.n	800735c <__ulp+0x18>
 8007382:	f1a0 0114 	sub.w	r1, r0, #20
 8007386:	291e      	cmp	r1, #30
 8007388:	bfda      	itte	le
 800738a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800738e:	fa20 f101 	lsrle.w	r1, r0, r1
 8007392:	2101      	movgt	r1, #1
 8007394:	460a      	mov	r2, r1
 8007396:	e7e1      	b.n	800735c <__ulp+0x18>
 8007398:	7ff00000 	.word	0x7ff00000

0800739c <__b2d>:
 800739c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800739e:	6905      	ldr	r5, [r0, #16]
 80073a0:	f100 0714 	add.w	r7, r0, #20
 80073a4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80073a8:	1f2e      	subs	r6, r5, #4
 80073aa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80073ae:	4620      	mov	r0, r4
 80073b0:	f7ff fd52 	bl	8006e58 <__hi0bits>
 80073b4:	f1c0 0320 	rsb	r3, r0, #32
 80073b8:	280a      	cmp	r0, #10
 80073ba:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007438 <__b2d+0x9c>
 80073be:	600b      	str	r3, [r1, #0]
 80073c0:	dc14      	bgt.n	80073ec <__b2d+0x50>
 80073c2:	f1c0 0e0b 	rsb	lr, r0, #11
 80073c6:	fa24 f10e 	lsr.w	r1, r4, lr
 80073ca:	42b7      	cmp	r7, r6
 80073cc:	ea41 030c 	orr.w	r3, r1, ip
 80073d0:	bf34      	ite	cc
 80073d2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80073d6:	2100      	movcs	r1, #0
 80073d8:	3015      	adds	r0, #21
 80073da:	fa04 f000 	lsl.w	r0, r4, r0
 80073de:	fa21 f10e 	lsr.w	r1, r1, lr
 80073e2:	ea40 0201 	orr.w	r2, r0, r1
 80073e6:	ec43 2b10 	vmov	d0, r2, r3
 80073ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073ec:	42b7      	cmp	r7, r6
 80073ee:	bf3a      	itte	cc
 80073f0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80073f4:	f1a5 0608 	subcc.w	r6, r5, #8
 80073f8:	2100      	movcs	r1, #0
 80073fa:	380b      	subs	r0, #11
 80073fc:	d017      	beq.n	800742e <__b2d+0x92>
 80073fe:	f1c0 0c20 	rsb	ip, r0, #32
 8007402:	fa04 f500 	lsl.w	r5, r4, r0
 8007406:	42be      	cmp	r6, r7
 8007408:	fa21 f40c 	lsr.w	r4, r1, ip
 800740c:	ea45 0504 	orr.w	r5, r5, r4
 8007410:	bf8c      	ite	hi
 8007412:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007416:	2400      	movls	r4, #0
 8007418:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800741c:	fa01 f000 	lsl.w	r0, r1, r0
 8007420:	fa24 f40c 	lsr.w	r4, r4, ip
 8007424:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007428:	ea40 0204 	orr.w	r2, r0, r4
 800742c:	e7db      	b.n	80073e6 <__b2d+0x4a>
 800742e:	ea44 030c 	orr.w	r3, r4, ip
 8007432:	460a      	mov	r2, r1
 8007434:	e7d7      	b.n	80073e6 <__b2d+0x4a>
 8007436:	bf00      	nop
 8007438:	3ff00000 	.word	0x3ff00000

0800743c <__d2b>:
 800743c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007440:	4689      	mov	r9, r1
 8007442:	2101      	movs	r1, #1
 8007444:	ec57 6b10 	vmov	r6, r7, d0
 8007448:	4690      	mov	r8, r2
 800744a:	f7ff fc0f 	bl	8006c6c <_Balloc>
 800744e:	4604      	mov	r4, r0
 8007450:	b930      	cbnz	r0, 8007460 <__d2b+0x24>
 8007452:	4602      	mov	r2, r0
 8007454:	4b25      	ldr	r3, [pc, #148]	; (80074ec <__d2b+0xb0>)
 8007456:	4826      	ldr	r0, [pc, #152]	; (80074f0 <__d2b+0xb4>)
 8007458:	f240 310a 	movw	r1, #778	; 0x30a
 800745c:	f000 fb10 	bl	8007a80 <__assert_func>
 8007460:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007464:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007468:	bb35      	cbnz	r5, 80074b8 <__d2b+0x7c>
 800746a:	2e00      	cmp	r6, #0
 800746c:	9301      	str	r3, [sp, #4]
 800746e:	d028      	beq.n	80074c2 <__d2b+0x86>
 8007470:	4668      	mov	r0, sp
 8007472:	9600      	str	r6, [sp, #0]
 8007474:	f7ff fd10 	bl	8006e98 <__lo0bits>
 8007478:	9900      	ldr	r1, [sp, #0]
 800747a:	b300      	cbz	r0, 80074be <__d2b+0x82>
 800747c:	9a01      	ldr	r2, [sp, #4]
 800747e:	f1c0 0320 	rsb	r3, r0, #32
 8007482:	fa02 f303 	lsl.w	r3, r2, r3
 8007486:	430b      	orrs	r3, r1
 8007488:	40c2      	lsrs	r2, r0
 800748a:	6163      	str	r3, [r4, #20]
 800748c:	9201      	str	r2, [sp, #4]
 800748e:	9b01      	ldr	r3, [sp, #4]
 8007490:	61a3      	str	r3, [r4, #24]
 8007492:	2b00      	cmp	r3, #0
 8007494:	bf14      	ite	ne
 8007496:	2202      	movne	r2, #2
 8007498:	2201      	moveq	r2, #1
 800749a:	6122      	str	r2, [r4, #16]
 800749c:	b1d5      	cbz	r5, 80074d4 <__d2b+0x98>
 800749e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80074a2:	4405      	add	r5, r0
 80074a4:	f8c9 5000 	str.w	r5, [r9]
 80074a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80074ac:	f8c8 0000 	str.w	r0, [r8]
 80074b0:	4620      	mov	r0, r4
 80074b2:	b003      	add	sp, #12
 80074b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074bc:	e7d5      	b.n	800746a <__d2b+0x2e>
 80074be:	6161      	str	r1, [r4, #20]
 80074c0:	e7e5      	b.n	800748e <__d2b+0x52>
 80074c2:	a801      	add	r0, sp, #4
 80074c4:	f7ff fce8 	bl	8006e98 <__lo0bits>
 80074c8:	9b01      	ldr	r3, [sp, #4]
 80074ca:	6163      	str	r3, [r4, #20]
 80074cc:	2201      	movs	r2, #1
 80074ce:	6122      	str	r2, [r4, #16]
 80074d0:	3020      	adds	r0, #32
 80074d2:	e7e3      	b.n	800749c <__d2b+0x60>
 80074d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80074d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80074dc:	f8c9 0000 	str.w	r0, [r9]
 80074e0:	6918      	ldr	r0, [r3, #16]
 80074e2:	f7ff fcb9 	bl	8006e58 <__hi0bits>
 80074e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80074ea:	e7df      	b.n	80074ac <__d2b+0x70>
 80074ec:	0800886c 	.word	0x0800886c
 80074f0:	080088fc 	.word	0x080088fc

080074f4 <__ratio>:
 80074f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f8:	4688      	mov	r8, r1
 80074fa:	4669      	mov	r1, sp
 80074fc:	4681      	mov	r9, r0
 80074fe:	f7ff ff4d 	bl	800739c <__b2d>
 8007502:	a901      	add	r1, sp, #4
 8007504:	4640      	mov	r0, r8
 8007506:	ec55 4b10 	vmov	r4, r5, d0
 800750a:	f7ff ff47 	bl	800739c <__b2d>
 800750e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007512:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007516:	eba3 0c02 	sub.w	ip, r3, r2
 800751a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800751e:	1a9b      	subs	r3, r3, r2
 8007520:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007524:	ec51 0b10 	vmov	r0, r1, d0
 8007528:	2b00      	cmp	r3, #0
 800752a:	bfd6      	itet	le
 800752c:	460a      	movle	r2, r1
 800752e:	462a      	movgt	r2, r5
 8007530:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007534:	468b      	mov	fp, r1
 8007536:	462f      	mov	r7, r5
 8007538:	bfd4      	ite	le
 800753a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800753e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007542:	4620      	mov	r0, r4
 8007544:	ee10 2a10 	vmov	r2, s0
 8007548:	465b      	mov	r3, fp
 800754a:	4639      	mov	r1, r7
 800754c:	f7f9 f986 	bl	800085c <__aeabi_ddiv>
 8007550:	ec41 0b10 	vmov	d0, r0, r1
 8007554:	b003      	add	sp, #12
 8007556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800755a <__copybits>:
 800755a:	3901      	subs	r1, #1
 800755c:	b570      	push	{r4, r5, r6, lr}
 800755e:	1149      	asrs	r1, r1, #5
 8007560:	6914      	ldr	r4, [r2, #16]
 8007562:	3101      	adds	r1, #1
 8007564:	f102 0314 	add.w	r3, r2, #20
 8007568:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800756c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007570:	1f05      	subs	r5, r0, #4
 8007572:	42a3      	cmp	r3, r4
 8007574:	d30c      	bcc.n	8007590 <__copybits+0x36>
 8007576:	1aa3      	subs	r3, r4, r2
 8007578:	3b11      	subs	r3, #17
 800757a:	f023 0303 	bic.w	r3, r3, #3
 800757e:	3211      	adds	r2, #17
 8007580:	42a2      	cmp	r2, r4
 8007582:	bf88      	it	hi
 8007584:	2300      	movhi	r3, #0
 8007586:	4418      	add	r0, r3
 8007588:	2300      	movs	r3, #0
 800758a:	4288      	cmp	r0, r1
 800758c:	d305      	bcc.n	800759a <__copybits+0x40>
 800758e:	bd70      	pop	{r4, r5, r6, pc}
 8007590:	f853 6b04 	ldr.w	r6, [r3], #4
 8007594:	f845 6f04 	str.w	r6, [r5, #4]!
 8007598:	e7eb      	b.n	8007572 <__copybits+0x18>
 800759a:	f840 3b04 	str.w	r3, [r0], #4
 800759e:	e7f4      	b.n	800758a <__copybits+0x30>

080075a0 <__any_on>:
 80075a0:	f100 0214 	add.w	r2, r0, #20
 80075a4:	6900      	ldr	r0, [r0, #16]
 80075a6:	114b      	asrs	r3, r1, #5
 80075a8:	4298      	cmp	r0, r3
 80075aa:	b510      	push	{r4, lr}
 80075ac:	db11      	blt.n	80075d2 <__any_on+0x32>
 80075ae:	dd0a      	ble.n	80075c6 <__any_on+0x26>
 80075b0:	f011 011f 	ands.w	r1, r1, #31
 80075b4:	d007      	beq.n	80075c6 <__any_on+0x26>
 80075b6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80075ba:	fa24 f001 	lsr.w	r0, r4, r1
 80075be:	fa00 f101 	lsl.w	r1, r0, r1
 80075c2:	428c      	cmp	r4, r1
 80075c4:	d10b      	bne.n	80075de <__any_on+0x3e>
 80075c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d803      	bhi.n	80075d6 <__any_on+0x36>
 80075ce:	2000      	movs	r0, #0
 80075d0:	bd10      	pop	{r4, pc}
 80075d2:	4603      	mov	r3, r0
 80075d4:	e7f7      	b.n	80075c6 <__any_on+0x26>
 80075d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80075da:	2900      	cmp	r1, #0
 80075dc:	d0f5      	beq.n	80075ca <__any_on+0x2a>
 80075de:	2001      	movs	r0, #1
 80075e0:	e7f6      	b.n	80075d0 <__any_on+0x30>

080075e2 <_calloc_r>:
 80075e2:	b513      	push	{r0, r1, r4, lr}
 80075e4:	434a      	muls	r2, r1
 80075e6:	4611      	mov	r1, r2
 80075e8:	9201      	str	r2, [sp, #4]
 80075ea:	f000 f859 	bl	80076a0 <_malloc_r>
 80075ee:	4604      	mov	r4, r0
 80075f0:	b118      	cbz	r0, 80075fa <_calloc_r+0x18>
 80075f2:	9a01      	ldr	r2, [sp, #4]
 80075f4:	2100      	movs	r1, #0
 80075f6:	f7fc fbd7 	bl	8003da8 <memset>
 80075fa:	4620      	mov	r0, r4
 80075fc:	b002      	add	sp, #8
 80075fe:	bd10      	pop	{r4, pc}

08007600 <_free_r>:
 8007600:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007602:	2900      	cmp	r1, #0
 8007604:	d048      	beq.n	8007698 <_free_r+0x98>
 8007606:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800760a:	9001      	str	r0, [sp, #4]
 800760c:	2b00      	cmp	r3, #0
 800760e:	f1a1 0404 	sub.w	r4, r1, #4
 8007612:	bfb8      	it	lt
 8007614:	18e4      	addlt	r4, r4, r3
 8007616:	f000 fa7d 	bl	8007b14 <__malloc_lock>
 800761a:	4a20      	ldr	r2, [pc, #128]	; (800769c <_free_r+0x9c>)
 800761c:	9801      	ldr	r0, [sp, #4]
 800761e:	6813      	ldr	r3, [r2, #0]
 8007620:	4615      	mov	r5, r2
 8007622:	b933      	cbnz	r3, 8007632 <_free_r+0x32>
 8007624:	6063      	str	r3, [r4, #4]
 8007626:	6014      	str	r4, [r2, #0]
 8007628:	b003      	add	sp, #12
 800762a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800762e:	f000 ba77 	b.w	8007b20 <__malloc_unlock>
 8007632:	42a3      	cmp	r3, r4
 8007634:	d90b      	bls.n	800764e <_free_r+0x4e>
 8007636:	6821      	ldr	r1, [r4, #0]
 8007638:	1862      	adds	r2, r4, r1
 800763a:	4293      	cmp	r3, r2
 800763c:	bf04      	itt	eq
 800763e:	681a      	ldreq	r2, [r3, #0]
 8007640:	685b      	ldreq	r3, [r3, #4]
 8007642:	6063      	str	r3, [r4, #4]
 8007644:	bf04      	itt	eq
 8007646:	1852      	addeq	r2, r2, r1
 8007648:	6022      	streq	r2, [r4, #0]
 800764a:	602c      	str	r4, [r5, #0]
 800764c:	e7ec      	b.n	8007628 <_free_r+0x28>
 800764e:	461a      	mov	r2, r3
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	b10b      	cbz	r3, 8007658 <_free_r+0x58>
 8007654:	42a3      	cmp	r3, r4
 8007656:	d9fa      	bls.n	800764e <_free_r+0x4e>
 8007658:	6811      	ldr	r1, [r2, #0]
 800765a:	1855      	adds	r5, r2, r1
 800765c:	42a5      	cmp	r5, r4
 800765e:	d10b      	bne.n	8007678 <_free_r+0x78>
 8007660:	6824      	ldr	r4, [r4, #0]
 8007662:	4421      	add	r1, r4
 8007664:	1854      	adds	r4, r2, r1
 8007666:	42a3      	cmp	r3, r4
 8007668:	6011      	str	r1, [r2, #0]
 800766a:	d1dd      	bne.n	8007628 <_free_r+0x28>
 800766c:	681c      	ldr	r4, [r3, #0]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	6053      	str	r3, [r2, #4]
 8007672:	4421      	add	r1, r4
 8007674:	6011      	str	r1, [r2, #0]
 8007676:	e7d7      	b.n	8007628 <_free_r+0x28>
 8007678:	d902      	bls.n	8007680 <_free_r+0x80>
 800767a:	230c      	movs	r3, #12
 800767c:	6003      	str	r3, [r0, #0]
 800767e:	e7d3      	b.n	8007628 <_free_r+0x28>
 8007680:	6825      	ldr	r5, [r4, #0]
 8007682:	1961      	adds	r1, r4, r5
 8007684:	428b      	cmp	r3, r1
 8007686:	bf04      	itt	eq
 8007688:	6819      	ldreq	r1, [r3, #0]
 800768a:	685b      	ldreq	r3, [r3, #4]
 800768c:	6063      	str	r3, [r4, #4]
 800768e:	bf04      	itt	eq
 8007690:	1949      	addeq	r1, r1, r5
 8007692:	6021      	streq	r1, [r4, #0]
 8007694:	6054      	str	r4, [r2, #4]
 8007696:	e7c7      	b.n	8007628 <_free_r+0x28>
 8007698:	b003      	add	sp, #12
 800769a:	bd30      	pop	{r4, r5, pc}
 800769c:	20000214 	.word	0x20000214

080076a0 <_malloc_r>:
 80076a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a2:	1ccd      	adds	r5, r1, #3
 80076a4:	f025 0503 	bic.w	r5, r5, #3
 80076a8:	3508      	adds	r5, #8
 80076aa:	2d0c      	cmp	r5, #12
 80076ac:	bf38      	it	cc
 80076ae:	250c      	movcc	r5, #12
 80076b0:	2d00      	cmp	r5, #0
 80076b2:	4606      	mov	r6, r0
 80076b4:	db01      	blt.n	80076ba <_malloc_r+0x1a>
 80076b6:	42a9      	cmp	r1, r5
 80076b8:	d903      	bls.n	80076c2 <_malloc_r+0x22>
 80076ba:	230c      	movs	r3, #12
 80076bc:	6033      	str	r3, [r6, #0]
 80076be:	2000      	movs	r0, #0
 80076c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076c2:	f000 fa27 	bl	8007b14 <__malloc_lock>
 80076c6:	4921      	ldr	r1, [pc, #132]	; (800774c <_malloc_r+0xac>)
 80076c8:	680a      	ldr	r2, [r1, #0]
 80076ca:	4614      	mov	r4, r2
 80076cc:	b99c      	cbnz	r4, 80076f6 <_malloc_r+0x56>
 80076ce:	4f20      	ldr	r7, [pc, #128]	; (8007750 <_malloc_r+0xb0>)
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	b923      	cbnz	r3, 80076de <_malloc_r+0x3e>
 80076d4:	4621      	mov	r1, r4
 80076d6:	4630      	mov	r0, r6
 80076d8:	f000 f9a2 	bl	8007a20 <_sbrk_r>
 80076dc:	6038      	str	r0, [r7, #0]
 80076de:	4629      	mov	r1, r5
 80076e0:	4630      	mov	r0, r6
 80076e2:	f000 f99d 	bl	8007a20 <_sbrk_r>
 80076e6:	1c43      	adds	r3, r0, #1
 80076e8:	d123      	bne.n	8007732 <_malloc_r+0x92>
 80076ea:	230c      	movs	r3, #12
 80076ec:	6033      	str	r3, [r6, #0]
 80076ee:	4630      	mov	r0, r6
 80076f0:	f000 fa16 	bl	8007b20 <__malloc_unlock>
 80076f4:	e7e3      	b.n	80076be <_malloc_r+0x1e>
 80076f6:	6823      	ldr	r3, [r4, #0]
 80076f8:	1b5b      	subs	r3, r3, r5
 80076fa:	d417      	bmi.n	800772c <_malloc_r+0x8c>
 80076fc:	2b0b      	cmp	r3, #11
 80076fe:	d903      	bls.n	8007708 <_malloc_r+0x68>
 8007700:	6023      	str	r3, [r4, #0]
 8007702:	441c      	add	r4, r3
 8007704:	6025      	str	r5, [r4, #0]
 8007706:	e004      	b.n	8007712 <_malloc_r+0x72>
 8007708:	6863      	ldr	r3, [r4, #4]
 800770a:	42a2      	cmp	r2, r4
 800770c:	bf0c      	ite	eq
 800770e:	600b      	streq	r3, [r1, #0]
 8007710:	6053      	strne	r3, [r2, #4]
 8007712:	4630      	mov	r0, r6
 8007714:	f000 fa04 	bl	8007b20 <__malloc_unlock>
 8007718:	f104 000b 	add.w	r0, r4, #11
 800771c:	1d23      	adds	r3, r4, #4
 800771e:	f020 0007 	bic.w	r0, r0, #7
 8007722:	1ac2      	subs	r2, r0, r3
 8007724:	d0cc      	beq.n	80076c0 <_malloc_r+0x20>
 8007726:	1a1b      	subs	r3, r3, r0
 8007728:	50a3      	str	r3, [r4, r2]
 800772a:	e7c9      	b.n	80076c0 <_malloc_r+0x20>
 800772c:	4622      	mov	r2, r4
 800772e:	6864      	ldr	r4, [r4, #4]
 8007730:	e7cc      	b.n	80076cc <_malloc_r+0x2c>
 8007732:	1cc4      	adds	r4, r0, #3
 8007734:	f024 0403 	bic.w	r4, r4, #3
 8007738:	42a0      	cmp	r0, r4
 800773a:	d0e3      	beq.n	8007704 <_malloc_r+0x64>
 800773c:	1a21      	subs	r1, r4, r0
 800773e:	4630      	mov	r0, r6
 8007740:	f000 f96e 	bl	8007a20 <_sbrk_r>
 8007744:	3001      	adds	r0, #1
 8007746:	d1dd      	bne.n	8007704 <_malloc_r+0x64>
 8007748:	e7cf      	b.n	80076ea <_malloc_r+0x4a>
 800774a:	bf00      	nop
 800774c:	20000214 	.word	0x20000214
 8007750:	20000218 	.word	0x20000218

08007754 <__ssputs_r>:
 8007754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007758:	688e      	ldr	r6, [r1, #8]
 800775a:	429e      	cmp	r6, r3
 800775c:	4682      	mov	sl, r0
 800775e:	460c      	mov	r4, r1
 8007760:	4690      	mov	r8, r2
 8007762:	461f      	mov	r7, r3
 8007764:	d838      	bhi.n	80077d8 <__ssputs_r+0x84>
 8007766:	898a      	ldrh	r2, [r1, #12]
 8007768:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800776c:	d032      	beq.n	80077d4 <__ssputs_r+0x80>
 800776e:	6825      	ldr	r5, [r4, #0]
 8007770:	6909      	ldr	r1, [r1, #16]
 8007772:	eba5 0901 	sub.w	r9, r5, r1
 8007776:	6965      	ldr	r5, [r4, #20]
 8007778:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800777c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007780:	3301      	adds	r3, #1
 8007782:	444b      	add	r3, r9
 8007784:	106d      	asrs	r5, r5, #1
 8007786:	429d      	cmp	r5, r3
 8007788:	bf38      	it	cc
 800778a:	461d      	movcc	r5, r3
 800778c:	0553      	lsls	r3, r2, #21
 800778e:	d531      	bpl.n	80077f4 <__ssputs_r+0xa0>
 8007790:	4629      	mov	r1, r5
 8007792:	f7ff ff85 	bl	80076a0 <_malloc_r>
 8007796:	4606      	mov	r6, r0
 8007798:	b950      	cbnz	r0, 80077b0 <__ssputs_r+0x5c>
 800779a:	230c      	movs	r3, #12
 800779c:	f8ca 3000 	str.w	r3, [sl]
 80077a0:	89a3      	ldrh	r3, [r4, #12]
 80077a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077a6:	81a3      	strh	r3, [r4, #12]
 80077a8:	f04f 30ff 	mov.w	r0, #4294967295
 80077ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077b0:	6921      	ldr	r1, [r4, #16]
 80077b2:	464a      	mov	r2, r9
 80077b4:	f7fc faea 	bl	8003d8c <memcpy>
 80077b8:	89a3      	ldrh	r3, [r4, #12]
 80077ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80077be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077c2:	81a3      	strh	r3, [r4, #12]
 80077c4:	6126      	str	r6, [r4, #16]
 80077c6:	6165      	str	r5, [r4, #20]
 80077c8:	444e      	add	r6, r9
 80077ca:	eba5 0509 	sub.w	r5, r5, r9
 80077ce:	6026      	str	r6, [r4, #0]
 80077d0:	60a5      	str	r5, [r4, #8]
 80077d2:	463e      	mov	r6, r7
 80077d4:	42be      	cmp	r6, r7
 80077d6:	d900      	bls.n	80077da <__ssputs_r+0x86>
 80077d8:	463e      	mov	r6, r7
 80077da:	4632      	mov	r2, r6
 80077dc:	6820      	ldr	r0, [r4, #0]
 80077de:	4641      	mov	r1, r8
 80077e0:	f000 f97e 	bl	8007ae0 <memmove>
 80077e4:	68a3      	ldr	r3, [r4, #8]
 80077e6:	6822      	ldr	r2, [r4, #0]
 80077e8:	1b9b      	subs	r3, r3, r6
 80077ea:	4432      	add	r2, r6
 80077ec:	60a3      	str	r3, [r4, #8]
 80077ee:	6022      	str	r2, [r4, #0]
 80077f0:	2000      	movs	r0, #0
 80077f2:	e7db      	b.n	80077ac <__ssputs_r+0x58>
 80077f4:	462a      	mov	r2, r5
 80077f6:	f000 f999 	bl	8007b2c <_realloc_r>
 80077fa:	4606      	mov	r6, r0
 80077fc:	2800      	cmp	r0, #0
 80077fe:	d1e1      	bne.n	80077c4 <__ssputs_r+0x70>
 8007800:	6921      	ldr	r1, [r4, #16]
 8007802:	4650      	mov	r0, sl
 8007804:	f7ff fefc 	bl	8007600 <_free_r>
 8007808:	e7c7      	b.n	800779a <__ssputs_r+0x46>
	...

0800780c <_svfiprintf_r>:
 800780c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007810:	4698      	mov	r8, r3
 8007812:	898b      	ldrh	r3, [r1, #12]
 8007814:	061b      	lsls	r3, r3, #24
 8007816:	b09d      	sub	sp, #116	; 0x74
 8007818:	4607      	mov	r7, r0
 800781a:	460d      	mov	r5, r1
 800781c:	4614      	mov	r4, r2
 800781e:	d50e      	bpl.n	800783e <_svfiprintf_r+0x32>
 8007820:	690b      	ldr	r3, [r1, #16]
 8007822:	b963      	cbnz	r3, 800783e <_svfiprintf_r+0x32>
 8007824:	2140      	movs	r1, #64	; 0x40
 8007826:	f7ff ff3b 	bl	80076a0 <_malloc_r>
 800782a:	6028      	str	r0, [r5, #0]
 800782c:	6128      	str	r0, [r5, #16]
 800782e:	b920      	cbnz	r0, 800783a <_svfiprintf_r+0x2e>
 8007830:	230c      	movs	r3, #12
 8007832:	603b      	str	r3, [r7, #0]
 8007834:	f04f 30ff 	mov.w	r0, #4294967295
 8007838:	e0d1      	b.n	80079de <_svfiprintf_r+0x1d2>
 800783a:	2340      	movs	r3, #64	; 0x40
 800783c:	616b      	str	r3, [r5, #20]
 800783e:	2300      	movs	r3, #0
 8007840:	9309      	str	r3, [sp, #36]	; 0x24
 8007842:	2320      	movs	r3, #32
 8007844:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007848:	f8cd 800c 	str.w	r8, [sp, #12]
 800784c:	2330      	movs	r3, #48	; 0x30
 800784e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80079f8 <_svfiprintf_r+0x1ec>
 8007852:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007856:	f04f 0901 	mov.w	r9, #1
 800785a:	4623      	mov	r3, r4
 800785c:	469a      	mov	sl, r3
 800785e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007862:	b10a      	cbz	r2, 8007868 <_svfiprintf_r+0x5c>
 8007864:	2a25      	cmp	r2, #37	; 0x25
 8007866:	d1f9      	bne.n	800785c <_svfiprintf_r+0x50>
 8007868:	ebba 0b04 	subs.w	fp, sl, r4
 800786c:	d00b      	beq.n	8007886 <_svfiprintf_r+0x7a>
 800786e:	465b      	mov	r3, fp
 8007870:	4622      	mov	r2, r4
 8007872:	4629      	mov	r1, r5
 8007874:	4638      	mov	r0, r7
 8007876:	f7ff ff6d 	bl	8007754 <__ssputs_r>
 800787a:	3001      	adds	r0, #1
 800787c:	f000 80aa 	beq.w	80079d4 <_svfiprintf_r+0x1c8>
 8007880:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007882:	445a      	add	r2, fp
 8007884:	9209      	str	r2, [sp, #36]	; 0x24
 8007886:	f89a 3000 	ldrb.w	r3, [sl]
 800788a:	2b00      	cmp	r3, #0
 800788c:	f000 80a2 	beq.w	80079d4 <_svfiprintf_r+0x1c8>
 8007890:	2300      	movs	r3, #0
 8007892:	f04f 32ff 	mov.w	r2, #4294967295
 8007896:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800789a:	f10a 0a01 	add.w	sl, sl, #1
 800789e:	9304      	str	r3, [sp, #16]
 80078a0:	9307      	str	r3, [sp, #28]
 80078a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078a6:	931a      	str	r3, [sp, #104]	; 0x68
 80078a8:	4654      	mov	r4, sl
 80078aa:	2205      	movs	r2, #5
 80078ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078b0:	4851      	ldr	r0, [pc, #324]	; (80079f8 <_svfiprintf_r+0x1ec>)
 80078b2:	f7f8 fc9d 	bl	80001f0 <memchr>
 80078b6:	9a04      	ldr	r2, [sp, #16]
 80078b8:	b9d8      	cbnz	r0, 80078f2 <_svfiprintf_r+0xe6>
 80078ba:	06d0      	lsls	r0, r2, #27
 80078bc:	bf44      	itt	mi
 80078be:	2320      	movmi	r3, #32
 80078c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078c4:	0711      	lsls	r1, r2, #28
 80078c6:	bf44      	itt	mi
 80078c8:	232b      	movmi	r3, #43	; 0x2b
 80078ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078ce:	f89a 3000 	ldrb.w	r3, [sl]
 80078d2:	2b2a      	cmp	r3, #42	; 0x2a
 80078d4:	d015      	beq.n	8007902 <_svfiprintf_r+0xf6>
 80078d6:	9a07      	ldr	r2, [sp, #28]
 80078d8:	4654      	mov	r4, sl
 80078da:	2000      	movs	r0, #0
 80078dc:	f04f 0c0a 	mov.w	ip, #10
 80078e0:	4621      	mov	r1, r4
 80078e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078e6:	3b30      	subs	r3, #48	; 0x30
 80078e8:	2b09      	cmp	r3, #9
 80078ea:	d94e      	bls.n	800798a <_svfiprintf_r+0x17e>
 80078ec:	b1b0      	cbz	r0, 800791c <_svfiprintf_r+0x110>
 80078ee:	9207      	str	r2, [sp, #28]
 80078f0:	e014      	b.n	800791c <_svfiprintf_r+0x110>
 80078f2:	eba0 0308 	sub.w	r3, r0, r8
 80078f6:	fa09 f303 	lsl.w	r3, r9, r3
 80078fa:	4313      	orrs	r3, r2
 80078fc:	9304      	str	r3, [sp, #16]
 80078fe:	46a2      	mov	sl, r4
 8007900:	e7d2      	b.n	80078a8 <_svfiprintf_r+0x9c>
 8007902:	9b03      	ldr	r3, [sp, #12]
 8007904:	1d19      	adds	r1, r3, #4
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	9103      	str	r1, [sp, #12]
 800790a:	2b00      	cmp	r3, #0
 800790c:	bfbb      	ittet	lt
 800790e:	425b      	neglt	r3, r3
 8007910:	f042 0202 	orrlt.w	r2, r2, #2
 8007914:	9307      	strge	r3, [sp, #28]
 8007916:	9307      	strlt	r3, [sp, #28]
 8007918:	bfb8      	it	lt
 800791a:	9204      	strlt	r2, [sp, #16]
 800791c:	7823      	ldrb	r3, [r4, #0]
 800791e:	2b2e      	cmp	r3, #46	; 0x2e
 8007920:	d10c      	bne.n	800793c <_svfiprintf_r+0x130>
 8007922:	7863      	ldrb	r3, [r4, #1]
 8007924:	2b2a      	cmp	r3, #42	; 0x2a
 8007926:	d135      	bne.n	8007994 <_svfiprintf_r+0x188>
 8007928:	9b03      	ldr	r3, [sp, #12]
 800792a:	1d1a      	adds	r2, r3, #4
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	9203      	str	r2, [sp, #12]
 8007930:	2b00      	cmp	r3, #0
 8007932:	bfb8      	it	lt
 8007934:	f04f 33ff 	movlt.w	r3, #4294967295
 8007938:	3402      	adds	r4, #2
 800793a:	9305      	str	r3, [sp, #20]
 800793c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007a08 <_svfiprintf_r+0x1fc>
 8007940:	7821      	ldrb	r1, [r4, #0]
 8007942:	2203      	movs	r2, #3
 8007944:	4650      	mov	r0, sl
 8007946:	f7f8 fc53 	bl	80001f0 <memchr>
 800794a:	b140      	cbz	r0, 800795e <_svfiprintf_r+0x152>
 800794c:	2340      	movs	r3, #64	; 0x40
 800794e:	eba0 000a 	sub.w	r0, r0, sl
 8007952:	fa03 f000 	lsl.w	r0, r3, r0
 8007956:	9b04      	ldr	r3, [sp, #16]
 8007958:	4303      	orrs	r3, r0
 800795a:	3401      	adds	r4, #1
 800795c:	9304      	str	r3, [sp, #16]
 800795e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007962:	4826      	ldr	r0, [pc, #152]	; (80079fc <_svfiprintf_r+0x1f0>)
 8007964:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007968:	2206      	movs	r2, #6
 800796a:	f7f8 fc41 	bl	80001f0 <memchr>
 800796e:	2800      	cmp	r0, #0
 8007970:	d038      	beq.n	80079e4 <_svfiprintf_r+0x1d8>
 8007972:	4b23      	ldr	r3, [pc, #140]	; (8007a00 <_svfiprintf_r+0x1f4>)
 8007974:	bb1b      	cbnz	r3, 80079be <_svfiprintf_r+0x1b2>
 8007976:	9b03      	ldr	r3, [sp, #12]
 8007978:	3307      	adds	r3, #7
 800797a:	f023 0307 	bic.w	r3, r3, #7
 800797e:	3308      	adds	r3, #8
 8007980:	9303      	str	r3, [sp, #12]
 8007982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007984:	4433      	add	r3, r6
 8007986:	9309      	str	r3, [sp, #36]	; 0x24
 8007988:	e767      	b.n	800785a <_svfiprintf_r+0x4e>
 800798a:	fb0c 3202 	mla	r2, ip, r2, r3
 800798e:	460c      	mov	r4, r1
 8007990:	2001      	movs	r0, #1
 8007992:	e7a5      	b.n	80078e0 <_svfiprintf_r+0xd4>
 8007994:	2300      	movs	r3, #0
 8007996:	3401      	adds	r4, #1
 8007998:	9305      	str	r3, [sp, #20]
 800799a:	4619      	mov	r1, r3
 800799c:	f04f 0c0a 	mov.w	ip, #10
 80079a0:	4620      	mov	r0, r4
 80079a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079a6:	3a30      	subs	r2, #48	; 0x30
 80079a8:	2a09      	cmp	r2, #9
 80079aa:	d903      	bls.n	80079b4 <_svfiprintf_r+0x1a8>
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d0c5      	beq.n	800793c <_svfiprintf_r+0x130>
 80079b0:	9105      	str	r1, [sp, #20]
 80079b2:	e7c3      	b.n	800793c <_svfiprintf_r+0x130>
 80079b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80079b8:	4604      	mov	r4, r0
 80079ba:	2301      	movs	r3, #1
 80079bc:	e7f0      	b.n	80079a0 <_svfiprintf_r+0x194>
 80079be:	ab03      	add	r3, sp, #12
 80079c0:	9300      	str	r3, [sp, #0]
 80079c2:	462a      	mov	r2, r5
 80079c4:	4b0f      	ldr	r3, [pc, #60]	; (8007a04 <_svfiprintf_r+0x1f8>)
 80079c6:	a904      	add	r1, sp, #16
 80079c8:	4638      	mov	r0, r7
 80079ca:	f7fc fa95 	bl	8003ef8 <_printf_float>
 80079ce:	1c42      	adds	r2, r0, #1
 80079d0:	4606      	mov	r6, r0
 80079d2:	d1d6      	bne.n	8007982 <_svfiprintf_r+0x176>
 80079d4:	89ab      	ldrh	r3, [r5, #12]
 80079d6:	065b      	lsls	r3, r3, #25
 80079d8:	f53f af2c 	bmi.w	8007834 <_svfiprintf_r+0x28>
 80079dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079de:	b01d      	add	sp, #116	; 0x74
 80079e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079e4:	ab03      	add	r3, sp, #12
 80079e6:	9300      	str	r3, [sp, #0]
 80079e8:	462a      	mov	r2, r5
 80079ea:	4b06      	ldr	r3, [pc, #24]	; (8007a04 <_svfiprintf_r+0x1f8>)
 80079ec:	a904      	add	r1, sp, #16
 80079ee:	4638      	mov	r0, r7
 80079f0:	f7fc fd26 	bl	8004440 <_printf_i>
 80079f4:	e7eb      	b.n	80079ce <_svfiprintf_r+0x1c2>
 80079f6:	bf00      	nop
 80079f8:	08008a5c 	.word	0x08008a5c
 80079fc:	08008a66 	.word	0x08008a66
 8007a00:	08003ef9 	.word	0x08003ef9
 8007a04:	08007755 	.word	0x08007755
 8007a08:	08008a62 	.word	0x08008a62
 8007a0c:	00000000 	.word	0x00000000

08007a10 <nan>:
 8007a10:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007a18 <nan+0x8>
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	00000000 	.word	0x00000000
 8007a1c:	7ff80000 	.word	0x7ff80000

08007a20 <_sbrk_r>:
 8007a20:	b538      	push	{r3, r4, r5, lr}
 8007a22:	4d06      	ldr	r5, [pc, #24]	; (8007a3c <_sbrk_r+0x1c>)
 8007a24:	2300      	movs	r3, #0
 8007a26:	4604      	mov	r4, r0
 8007a28:	4608      	mov	r0, r1
 8007a2a:	602b      	str	r3, [r5, #0]
 8007a2c:	f7fa f91c 	bl	8001c68 <_sbrk>
 8007a30:	1c43      	adds	r3, r0, #1
 8007a32:	d102      	bne.n	8007a3a <_sbrk_r+0x1a>
 8007a34:	682b      	ldr	r3, [r5, #0]
 8007a36:	b103      	cbz	r3, 8007a3a <_sbrk_r+0x1a>
 8007a38:	6023      	str	r3, [r4, #0]
 8007a3a:	bd38      	pop	{r3, r4, r5, pc}
 8007a3c:	20000300 	.word	0x20000300

08007a40 <strncmp>:
 8007a40:	b510      	push	{r4, lr}
 8007a42:	b16a      	cbz	r2, 8007a60 <strncmp+0x20>
 8007a44:	3901      	subs	r1, #1
 8007a46:	1884      	adds	r4, r0, r2
 8007a48:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007a4c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d103      	bne.n	8007a5c <strncmp+0x1c>
 8007a54:	42a0      	cmp	r0, r4
 8007a56:	d001      	beq.n	8007a5c <strncmp+0x1c>
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1f5      	bne.n	8007a48 <strncmp+0x8>
 8007a5c:	1a98      	subs	r0, r3, r2
 8007a5e:	bd10      	pop	{r4, pc}
 8007a60:	4610      	mov	r0, r2
 8007a62:	e7fc      	b.n	8007a5e <strncmp+0x1e>

08007a64 <__ascii_wctomb>:
 8007a64:	b149      	cbz	r1, 8007a7a <__ascii_wctomb+0x16>
 8007a66:	2aff      	cmp	r2, #255	; 0xff
 8007a68:	bf85      	ittet	hi
 8007a6a:	238a      	movhi	r3, #138	; 0x8a
 8007a6c:	6003      	strhi	r3, [r0, #0]
 8007a6e:	700a      	strbls	r2, [r1, #0]
 8007a70:	f04f 30ff 	movhi.w	r0, #4294967295
 8007a74:	bf98      	it	ls
 8007a76:	2001      	movls	r0, #1
 8007a78:	4770      	bx	lr
 8007a7a:	4608      	mov	r0, r1
 8007a7c:	4770      	bx	lr
	...

08007a80 <__assert_func>:
 8007a80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a82:	4614      	mov	r4, r2
 8007a84:	461a      	mov	r2, r3
 8007a86:	4b09      	ldr	r3, [pc, #36]	; (8007aac <__assert_func+0x2c>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4605      	mov	r5, r0
 8007a8c:	68d8      	ldr	r0, [r3, #12]
 8007a8e:	b14c      	cbz	r4, 8007aa4 <__assert_func+0x24>
 8007a90:	4b07      	ldr	r3, [pc, #28]	; (8007ab0 <__assert_func+0x30>)
 8007a92:	9100      	str	r1, [sp, #0]
 8007a94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a98:	4906      	ldr	r1, [pc, #24]	; (8007ab4 <__assert_func+0x34>)
 8007a9a:	462b      	mov	r3, r5
 8007a9c:	f000 f80e 	bl	8007abc <fiprintf>
 8007aa0:	f000 fa84 	bl	8007fac <abort>
 8007aa4:	4b04      	ldr	r3, [pc, #16]	; (8007ab8 <__assert_func+0x38>)
 8007aa6:	461c      	mov	r4, r3
 8007aa8:	e7f3      	b.n	8007a92 <__assert_func+0x12>
 8007aaa:	bf00      	nop
 8007aac:	20000020 	.word	0x20000020
 8007ab0:	08008a6d 	.word	0x08008a6d
 8007ab4:	08008a7a 	.word	0x08008a7a
 8007ab8:	08008aa8 	.word	0x08008aa8

08007abc <fiprintf>:
 8007abc:	b40e      	push	{r1, r2, r3}
 8007abe:	b503      	push	{r0, r1, lr}
 8007ac0:	4601      	mov	r1, r0
 8007ac2:	ab03      	add	r3, sp, #12
 8007ac4:	4805      	ldr	r0, [pc, #20]	; (8007adc <fiprintf+0x20>)
 8007ac6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007aca:	6800      	ldr	r0, [r0, #0]
 8007acc:	9301      	str	r3, [sp, #4]
 8007ace:	f000 f87d 	bl	8007bcc <_vfiprintf_r>
 8007ad2:	b002      	add	sp, #8
 8007ad4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ad8:	b003      	add	sp, #12
 8007ada:	4770      	bx	lr
 8007adc:	20000020 	.word	0x20000020

08007ae0 <memmove>:
 8007ae0:	4288      	cmp	r0, r1
 8007ae2:	b510      	push	{r4, lr}
 8007ae4:	eb01 0402 	add.w	r4, r1, r2
 8007ae8:	d902      	bls.n	8007af0 <memmove+0x10>
 8007aea:	4284      	cmp	r4, r0
 8007aec:	4623      	mov	r3, r4
 8007aee:	d807      	bhi.n	8007b00 <memmove+0x20>
 8007af0:	1e43      	subs	r3, r0, #1
 8007af2:	42a1      	cmp	r1, r4
 8007af4:	d008      	beq.n	8007b08 <memmove+0x28>
 8007af6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007afa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007afe:	e7f8      	b.n	8007af2 <memmove+0x12>
 8007b00:	4402      	add	r2, r0
 8007b02:	4601      	mov	r1, r0
 8007b04:	428a      	cmp	r2, r1
 8007b06:	d100      	bne.n	8007b0a <memmove+0x2a>
 8007b08:	bd10      	pop	{r4, pc}
 8007b0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b12:	e7f7      	b.n	8007b04 <memmove+0x24>

08007b14 <__malloc_lock>:
 8007b14:	4801      	ldr	r0, [pc, #4]	; (8007b1c <__malloc_lock+0x8>)
 8007b16:	f000 bc09 	b.w	800832c <__retarget_lock_acquire_recursive>
 8007b1a:	bf00      	nop
 8007b1c:	20000308 	.word	0x20000308

08007b20 <__malloc_unlock>:
 8007b20:	4801      	ldr	r0, [pc, #4]	; (8007b28 <__malloc_unlock+0x8>)
 8007b22:	f000 bc04 	b.w	800832e <__retarget_lock_release_recursive>
 8007b26:	bf00      	nop
 8007b28:	20000308 	.word	0x20000308

08007b2c <_realloc_r>:
 8007b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b2e:	4607      	mov	r7, r0
 8007b30:	4614      	mov	r4, r2
 8007b32:	460e      	mov	r6, r1
 8007b34:	b921      	cbnz	r1, 8007b40 <_realloc_r+0x14>
 8007b36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007b3a:	4611      	mov	r1, r2
 8007b3c:	f7ff bdb0 	b.w	80076a0 <_malloc_r>
 8007b40:	b922      	cbnz	r2, 8007b4c <_realloc_r+0x20>
 8007b42:	f7ff fd5d 	bl	8007600 <_free_r>
 8007b46:	4625      	mov	r5, r4
 8007b48:	4628      	mov	r0, r5
 8007b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b4c:	f000 fc54 	bl	80083f8 <_malloc_usable_size_r>
 8007b50:	42a0      	cmp	r0, r4
 8007b52:	d20f      	bcs.n	8007b74 <_realloc_r+0x48>
 8007b54:	4621      	mov	r1, r4
 8007b56:	4638      	mov	r0, r7
 8007b58:	f7ff fda2 	bl	80076a0 <_malloc_r>
 8007b5c:	4605      	mov	r5, r0
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	d0f2      	beq.n	8007b48 <_realloc_r+0x1c>
 8007b62:	4631      	mov	r1, r6
 8007b64:	4622      	mov	r2, r4
 8007b66:	f7fc f911 	bl	8003d8c <memcpy>
 8007b6a:	4631      	mov	r1, r6
 8007b6c:	4638      	mov	r0, r7
 8007b6e:	f7ff fd47 	bl	8007600 <_free_r>
 8007b72:	e7e9      	b.n	8007b48 <_realloc_r+0x1c>
 8007b74:	4635      	mov	r5, r6
 8007b76:	e7e7      	b.n	8007b48 <_realloc_r+0x1c>

08007b78 <__sfputc_r>:
 8007b78:	6893      	ldr	r3, [r2, #8]
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	b410      	push	{r4}
 8007b80:	6093      	str	r3, [r2, #8]
 8007b82:	da08      	bge.n	8007b96 <__sfputc_r+0x1e>
 8007b84:	6994      	ldr	r4, [r2, #24]
 8007b86:	42a3      	cmp	r3, r4
 8007b88:	db01      	blt.n	8007b8e <__sfputc_r+0x16>
 8007b8a:	290a      	cmp	r1, #10
 8007b8c:	d103      	bne.n	8007b96 <__sfputc_r+0x1e>
 8007b8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b92:	f000 b94b 	b.w	8007e2c <__swbuf_r>
 8007b96:	6813      	ldr	r3, [r2, #0]
 8007b98:	1c58      	adds	r0, r3, #1
 8007b9a:	6010      	str	r0, [r2, #0]
 8007b9c:	7019      	strb	r1, [r3, #0]
 8007b9e:	4608      	mov	r0, r1
 8007ba0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ba4:	4770      	bx	lr

08007ba6 <__sfputs_r>:
 8007ba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ba8:	4606      	mov	r6, r0
 8007baa:	460f      	mov	r7, r1
 8007bac:	4614      	mov	r4, r2
 8007bae:	18d5      	adds	r5, r2, r3
 8007bb0:	42ac      	cmp	r4, r5
 8007bb2:	d101      	bne.n	8007bb8 <__sfputs_r+0x12>
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	e007      	b.n	8007bc8 <__sfputs_r+0x22>
 8007bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bbc:	463a      	mov	r2, r7
 8007bbe:	4630      	mov	r0, r6
 8007bc0:	f7ff ffda 	bl	8007b78 <__sfputc_r>
 8007bc4:	1c43      	adds	r3, r0, #1
 8007bc6:	d1f3      	bne.n	8007bb0 <__sfputs_r+0xa>
 8007bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007bcc <_vfiprintf_r>:
 8007bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bd0:	460d      	mov	r5, r1
 8007bd2:	b09d      	sub	sp, #116	; 0x74
 8007bd4:	4614      	mov	r4, r2
 8007bd6:	4698      	mov	r8, r3
 8007bd8:	4606      	mov	r6, r0
 8007bda:	b118      	cbz	r0, 8007be4 <_vfiprintf_r+0x18>
 8007bdc:	6983      	ldr	r3, [r0, #24]
 8007bde:	b90b      	cbnz	r3, 8007be4 <_vfiprintf_r+0x18>
 8007be0:	f000 fb06 	bl	80081f0 <__sinit>
 8007be4:	4b89      	ldr	r3, [pc, #548]	; (8007e0c <_vfiprintf_r+0x240>)
 8007be6:	429d      	cmp	r5, r3
 8007be8:	d11b      	bne.n	8007c22 <_vfiprintf_r+0x56>
 8007bea:	6875      	ldr	r5, [r6, #4]
 8007bec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bee:	07d9      	lsls	r1, r3, #31
 8007bf0:	d405      	bmi.n	8007bfe <_vfiprintf_r+0x32>
 8007bf2:	89ab      	ldrh	r3, [r5, #12]
 8007bf4:	059a      	lsls	r2, r3, #22
 8007bf6:	d402      	bmi.n	8007bfe <_vfiprintf_r+0x32>
 8007bf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bfa:	f000 fb97 	bl	800832c <__retarget_lock_acquire_recursive>
 8007bfe:	89ab      	ldrh	r3, [r5, #12]
 8007c00:	071b      	lsls	r3, r3, #28
 8007c02:	d501      	bpl.n	8007c08 <_vfiprintf_r+0x3c>
 8007c04:	692b      	ldr	r3, [r5, #16]
 8007c06:	b9eb      	cbnz	r3, 8007c44 <_vfiprintf_r+0x78>
 8007c08:	4629      	mov	r1, r5
 8007c0a:	4630      	mov	r0, r6
 8007c0c:	f000 f960 	bl	8007ed0 <__swsetup_r>
 8007c10:	b1c0      	cbz	r0, 8007c44 <_vfiprintf_r+0x78>
 8007c12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c14:	07dc      	lsls	r4, r3, #31
 8007c16:	d50e      	bpl.n	8007c36 <_vfiprintf_r+0x6a>
 8007c18:	f04f 30ff 	mov.w	r0, #4294967295
 8007c1c:	b01d      	add	sp, #116	; 0x74
 8007c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c22:	4b7b      	ldr	r3, [pc, #492]	; (8007e10 <_vfiprintf_r+0x244>)
 8007c24:	429d      	cmp	r5, r3
 8007c26:	d101      	bne.n	8007c2c <_vfiprintf_r+0x60>
 8007c28:	68b5      	ldr	r5, [r6, #8]
 8007c2a:	e7df      	b.n	8007bec <_vfiprintf_r+0x20>
 8007c2c:	4b79      	ldr	r3, [pc, #484]	; (8007e14 <_vfiprintf_r+0x248>)
 8007c2e:	429d      	cmp	r5, r3
 8007c30:	bf08      	it	eq
 8007c32:	68f5      	ldreq	r5, [r6, #12]
 8007c34:	e7da      	b.n	8007bec <_vfiprintf_r+0x20>
 8007c36:	89ab      	ldrh	r3, [r5, #12]
 8007c38:	0598      	lsls	r0, r3, #22
 8007c3a:	d4ed      	bmi.n	8007c18 <_vfiprintf_r+0x4c>
 8007c3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c3e:	f000 fb76 	bl	800832e <__retarget_lock_release_recursive>
 8007c42:	e7e9      	b.n	8007c18 <_vfiprintf_r+0x4c>
 8007c44:	2300      	movs	r3, #0
 8007c46:	9309      	str	r3, [sp, #36]	; 0x24
 8007c48:	2320      	movs	r3, #32
 8007c4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c52:	2330      	movs	r3, #48	; 0x30
 8007c54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007e18 <_vfiprintf_r+0x24c>
 8007c58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c5c:	f04f 0901 	mov.w	r9, #1
 8007c60:	4623      	mov	r3, r4
 8007c62:	469a      	mov	sl, r3
 8007c64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c68:	b10a      	cbz	r2, 8007c6e <_vfiprintf_r+0xa2>
 8007c6a:	2a25      	cmp	r2, #37	; 0x25
 8007c6c:	d1f9      	bne.n	8007c62 <_vfiprintf_r+0x96>
 8007c6e:	ebba 0b04 	subs.w	fp, sl, r4
 8007c72:	d00b      	beq.n	8007c8c <_vfiprintf_r+0xc0>
 8007c74:	465b      	mov	r3, fp
 8007c76:	4622      	mov	r2, r4
 8007c78:	4629      	mov	r1, r5
 8007c7a:	4630      	mov	r0, r6
 8007c7c:	f7ff ff93 	bl	8007ba6 <__sfputs_r>
 8007c80:	3001      	adds	r0, #1
 8007c82:	f000 80aa 	beq.w	8007dda <_vfiprintf_r+0x20e>
 8007c86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c88:	445a      	add	r2, fp
 8007c8a:	9209      	str	r2, [sp, #36]	; 0x24
 8007c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	f000 80a2 	beq.w	8007dda <_vfiprintf_r+0x20e>
 8007c96:	2300      	movs	r3, #0
 8007c98:	f04f 32ff 	mov.w	r2, #4294967295
 8007c9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ca0:	f10a 0a01 	add.w	sl, sl, #1
 8007ca4:	9304      	str	r3, [sp, #16]
 8007ca6:	9307      	str	r3, [sp, #28]
 8007ca8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cac:	931a      	str	r3, [sp, #104]	; 0x68
 8007cae:	4654      	mov	r4, sl
 8007cb0:	2205      	movs	r2, #5
 8007cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cb6:	4858      	ldr	r0, [pc, #352]	; (8007e18 <_vfiprintf_r+0x24c>)
 8007cb8:	f7f8 fa9a 	bl	80001f0 <memchr>
 8007cbc:	9a04      	ldr	r2, [sp, #16]
 8007cbe:	b9d8      	cbnz	r0, 8007cf8 <_vfiprintf_r+0x12c>
 8007cc0:	06d1      	lsls	r1, r2, #27
 8007cc2:	bf44      	itt	mi
 8007cc4:	2320      	movmi	r3, #32
 8007cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cca:	0713      	lsls	r3, r2, #28
 8007ccc:	bf44      	itt	mi
 8007cce:	232b      	movmi	r3, #43	; 0x2b
 8007cd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8007cd8:	2b2a      	cmp	r3, #42	; 0x2a
 8007cda:	d015      	beq.n	8007d08 <_vfiprintf_r+0x13c>
 8007cdc:	9a07      	ldr	r2, [sp, #28]
 8007cde:	4654      	mov	r4, sl
 8007ce0:	2000      	movs	r0, #0
 8007ce2:	f04f 0c0a 	mov.w	ip, #10
 8007ce6:	4621      	mov	r1, r4
 8007ce8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cec:	3b30      	subs	r3, #48	; 0x30
 8007cee:	2b09      	cmp	r3, #9
 8007cf0:	d94e      	bls.n	8007d90 <_vfiprintf_r+0x1c4>
 8007cf2:	b1b0      	cbz	r0, 8007d22 <_vfiprintf_r+0x156>
 8007cf4:	9207      	str	r2, [sp, #28]
 8007cf6:	e014      	b.n	8007d22 <_vfiprintf_r+0x156>
 8007cf8:	eba0 0308 	sub.w	r3, r0, r8
 8007cfc:	fa09 f303 	lsl.w	r3, r9, r3
 8007d00:	4313      	orrs	r3, r2
 8007d02:	9304      	str	r3, [sp, #16]
 8007d04:	46a2      	mov	sl, r4
 8007d06:	e7d2      	b.n	8007cae <_vfiprintf_r+0xe2>
 8007d08:	9b03      	ldr	r3, [sp, #12]
 8007d0a:	1d19      	adds	r1, r3, #4
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	9103      	str	r1, [sp, #12]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	bfbb      	ittet	lt
 8007d14:	425b      	neglt	r3, r3
 8007d16:	f042 0202 	orrlt.w	r2, r2, #2
 8007d1a:	9307      	strge	r3, [sp, #28]
 8007d1c:	9307      	strlt	r3, [sp, #28]
 8007d1e:	bfb8      	it	lt
 8007d20:	9204      	strlt	r2, [sp, #16]
 8007d22:	7823      	ldrb	r3, [r4, #0]
 8007d24:	2b2e      	cmp	r3, #46	; 0x2e
 8007d26:	d10c      	bne.n	8007d42 <_vfiprintf_r+0x176>
 8007d28:	7863      	ldrb	r3, [r4, #1]
 8007d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8007d2c:	d135      	bne.n	8007d9a <_vfiprintf_r+0x1ce>
 8007d2e:	9b03      	ldr	r3, [sp, #12]
 8007d30:	1d1a      	adds	r2, r3, #4
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	9203      	str	r2, [sp, #12]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	bfb8      	it	lt
 8007d3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d3e:	3402      	adds	r4, #2
 8007d40:	9305      	str	r3, [sp, #20]
 8007d42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007e28 <_vfiprintf_r+0x25c>
 8007d46:	7821      	ldrb	r1, [r4, #0]
 8007d48:	2203      	movs	r2, #3
 8007d4a:	4650      	mov	r0, sl
 8007d4c:	f7f8 fa50 	bl	80001f0 <memchr>
 8007d50:	b140      	cbz	r0, 8007d64 <_vfiprintf_r+0x198>
 8007d52:	2340      	movs	r3, #64	; 0x40
 8007d54:	eba0 000a 	sub.w	r0, r0, sl
 8007d58:	fa03 f000 	lsl.w	r0, r3, r0
 8007d5c:	9b04      	ldr	r3, [sp, #16]
 8007d5e:	4303      	orrs	r3, r0
 8007d60:	3401      	adds	r4, #1
 8007d62:	9304      	str	r3, [sp, #16]
 8007d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d68:	482c      	ldr	r0, [pc, #176]	; (8007e1c <_vfiprintf_r+0x250>)
 8007d6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d6e:	2206      	movs	r2, #6
 8007d70:	f7f8 fa3e 	bl	80001f0 <memchr>
 8007d74:	2800      	cmp	r0, #0
 8007d76:	d03f      	beq.n	8007df8 <_vfiprintf_r+0x22c>
 8007d78:	4b29      	ldr	r3, [pc, #164]	; (8007e20 <_vfiprintf_r+0x254>)
 8007d7a:	bb1b      	cbnz	r3, 8007dc4 <_vfiprintf_r+0x1f8>
 8007d7c:	9b03      	ldr	r3, [sp, #12]
 8007d7e:	3307      	adds	r3, #7
 8007d80:	f023 0307 	bic.w	r3, r3, #7
 8007d84:	3308      	adds	r3, #8
 8007d86:	9303      	str	r3, [sp, #12]
 8007d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d8a:	443b      	add	r3, r7
 8007d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d8e:	e767      	b.n	8007c60 <_vfiprintf_r+0x94>
 8007d90:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d94:	460c      	mov	r4, r1
 8007d96:	2001      	movs	r0, #1
 8007d98:	e7a5      	b.n	8007ce6 <_vfiprintf_r+0x11a>
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	3401      	adds	r4, #1
 8007d9e:	9305      	str	r3, [sp, #20]
 8007da0:	4619      	mov	r1, r3
 8007da2:	f04f 0c0a 	mov.w	ip, #10
 8007da6:	4620      	mov	r0, r4
 8007da8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dac:	3a30      	subs	r2, #48	; 0x30
 8007dae:	2a09      	cmp	r2, #9
 8007db0:	d903      	bls.n	8007dba <_vfiprintf_r+0x1ee>
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d0c5      	beq.n	8007d42 <_vfiprintf_r+0x176>
 8007db6:	9105      	str	r1, [sp, #20]
 8007db8:	e7c3      	b.n	8007d42 <_vfiprintf_r+0x176>
 8007dba:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dbe:	4604      	mov	r4, r0
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e7f0      	b.n	8007da6 <_vfiprintf_r+0x1da>
 8007dc4:	ab03      	add	r3, sp, #12
 8007dc6:	9300      	str	r3, [sp, #0]
 8007dc8:	462a      	mov	r2, r5
 8007dca:	4b16      	ldr	r3, [pc, #88]	; (8007e24 <_vfiprintf_r+0x258>)
 8007dcc:	a904      	add	r1, sp, #16
 8007dce:	4630      	mov	r0, r6
 8007dd0:	f7fc f892 	bl	8003ef8 <_printf_float>
 8007dd4:	4607      	mov	r7, r0
 8007dd6:	1c78      	adds	r0, r7, #1
 8007dd8:	d1d6      	bne.n	8007d88 <_vfiprintf_r+0x1bc>
 8007dda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ddc:	07d9      	lsls	r1, r3, #31
 8007dde:	d405      	bmi.n	8007dec <_vfiprintf_r+0x220>
 8007de0:	89ab      	ldrh	r3, [r5, #12]
 8007de2:	059a      	lsls	r2, r3, #22
 8007de4:	d402      	bmi.n	8007dec <_vfiprintf_r+0x220>
 8007de6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007de8:	f000 faa1 	bl	800832e <__retarget_lock_release_recursive>
 8007dec:	89ab      	ldrh	r3, [r5, #12]
 8007dee:	065b      	lsls	r3, r3, #25
 8007df0:	f53f af12 	bmi.w	8007c18 <_vfiprintf_r+0x4c>
 8007df4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007df6:	e711      	b.n	8007c1c <_vfiprintf_r+0x50>
 8007df8:	ab03      	add	r3, sp, #12
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	462a      	mov	r2, r5
 8007dfe:	4b09      	ldr	r3, [pc, #36]	; (8007e24 <_vfiprintf_r+0x258>)
 8007e00:	a904      	add	r1, sp, #16
 8007e02:	4630      	mov	r0, r6
 8007e04:	f7fc fb1c 	bl	8004440 <_printf_i>
 8007e08:	e7e4      	b.n	8007dd4 <_vfiprintf_r+0x208>
 8007e0a:	bf00      	nop
 8007e0c:	08008acc 	.word	0x08008acc
 8007e10:	08008aec 	.word	0x08008aec
 8007e14:	08008aac 	.word	0x08008aac
 8007e18:	08008a5c 	.word	0x08008a5c
 8007e1c:	08008a66 	.word	0x08008a66
 8007e20:	08003ef9 	.word	0x08003ef9
 8007e24:	08007ba7 	.word	0x08007ba7
 8007e28:	08008a62 	.word	0x08008a62

08007e2c <__swbuf_r>:
 8007e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e2e:	460e      	mov	r6, r1
 8007e30:	4614      	mov	r4, r2
 8007e32:	4605      	mov	r5, r0
 8007e34:	b118      	cbz	r0, 8007e3e <__swbuf_r+0x12>
 8007e36:	6983      	ldr	r3, [r0, #24]
 8007e38:	b90b      	cbnz	r3, 8007e3e <__swbuf_r+0x12>
 8007e3a:	f000 f9d9 	bl	80081f0 <__sinit>
 8007e3e:	4b21      	ldr	r3, [pc, #132]	; (8007ec4 <__swbuf_r+0x98>)
 8007e40:	429c      	cmp	r4, r3
 8007e42:	d12b      	bne.n	8007e9c <__swbuf_r+0x70>
 8007e44:	686c      	ldr	r4, [r5, #4]
 8007e46:	69a3      	ldr	r3, [r4, #24]
 8007e48:	60a3      	str	r3, [r4, #8]
 8007e4a:	89a3      	ldrh	r3, [r4, #12]
 8007e4c:	071a      	lsls	r2, r3, #28
 8007e4e:	d52f      	bpl.n	8007eb0 <__swbuf_r+0x84>
 8007e50:	6923      	ldr	r3, [r4, #16]
 8007e52:	b36b      	cbz	r3, 8007eb0 <__swbuf_r+0x84>
 8007e54:	6923      	ldr	r3, [r4, #16]
 8007e56:	6820      	ldr	r0, [r4, #0]
 8007e58:	1ac0      	subs	r0, r0, r3
 8007e5a:	6963      	ldr	r3, [r4, #20]
 8007e5c:	b2f6      	uxtb	r6, r6
 8007e5e:	4283      	cmp	r3, r0
 8007e60:	4637      	mov	r7, r6
 8007e62:	dc04      	bgt.n	8007e6e <__swbuf_r+0x42>
 8007e64:	4621      	mov	r1, r4
 8007e66:	4628      	mov	r0, r5
 8007e68:	f000 f92e 	bl	80080c8 <_fflush_r>
 8007e6c:	bb30      	cbnz	r0, 8007ebc <__swbuf_r+0x90>
 8007e6e:	68a3      	ldr	r3, [r4, #8]
 8007e70:	3b01      	subs	r3, #1
 8007e72:	60a3      	str	r3, [r4, #8]
 8007e74:	6823      	ldr	r3, [r4, #0]
 8007e76:	1c5a      	adds	r2, r3, #1
 8007e78:	6022      	str	r2, [r4, #0]
 8007e7a:	701e      	strb	r6, [r3, #0]
 8007e7c:	6963      	ldr	r3, [r4, #20]
 8007e7e:	3001      	adds	r0, #1
 8007e80:	4283      	cmp	r3, r0
 8007e82:	d004      	beq.n	8007e8e <__swbuf_r+0x62>
 8007e84:	89a3      	ldrh	r3, [r4, #12]
 8007e86:	07db      	lsls	r3, r3, #31
 8007e88:	d506      	bpl.n	8007e98 <__swbuf_r+0x6c>
 8007e8a:	2e0a      	cmp	r6, #10
 8007e8c:	d104      	bne.n	8007e98 <__swbuf_r+0x6c>
 8007e8e:	4621      	mov	r1, r4
 8007e90:	4628      	mov	r0, r5
 8007e92:	f000 f919 	bl	80080c8 <_fflush_r>
 8007e96:	b988      	cbnz	r0, 8007ebc <__swbuf_r+0x90>
 8007e98:	4638      	mov	r0, r7
 8007e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e9c:	4b0a      	ldr	r3, [pc, #40]	; (8007ec8 <__swbuf_r+0x9c>)
 8007e9e:	429c      	cmp	r4, r3
 8007ea0:	d101      	bne.n	8007ea6 <__swbuf_r+0x7a>
 8007ea2:	68ac      	ldr	r4, [r5, #8]
 8007ea4:	e7cf      	b.n	8007e46 <__swbuf_r+0x1a>
 8007ea6:	4b09      	ldr	r3, [pc, #36]	; (8007ecc <__swbuf_r+0xa0>)
 8007ea8:	429c      	cmp	r4, r3
 8007eaa:	bf08      	it	eq
 8007eac:	68ec      	ldreq	r4, [r5, #12]
 8007eae:	e7ca      	b.n	8007e46 <__swbuf_r+0x1a>
 8007eb0:	4621      	mov	r1, r4
 8007eb2:	4628      	mov	r0, r5
 8007eb4:	f000 f80c 	bl	8007ed0 <__swsetup_r>
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	d0cb      	beq.n	8007e54 <__swbuf_r+0x28>
 8007ebc:	f04f 37ff 	mov.w	r7, #4294967295
 8007ec0:	e7ea      	b.n	8007e98 <__swbuf_r+0x6c>
 8007ec2:	bf00      	nop
 8007ec4:	08008acc 	.word	0x08008acc
 8007ec8:	08008aec 	.word	0x08008aec
 8007ecc:	08008aac 	.word	0x08008aac

08007ed0 <__swsetup_r>:
 8007ed0:	4b32      	ldr	r3, [pc, #200]	; (8007f9c <__swsetup_r+0xcc>)
 8007ed2:	b570      	push	{r4, r5, r6, lr}
 8007ed4:	681d      	ldr	r5, [r3, #0]
 8007ed6:	4606      	mov	r6, r0
 8007ed8:	460c      	mov	r4, r1
 8007eda:	b125      	cbz	r5, 8007ee6 <__swsetup_r+0x16>
 8007edc:	69ab      	ldr	r3, [r5, #24]
 8007ede:	b913      	cbnz	r3, 8007ee6 <__swsetup_r+0x16>
 8007ee0:	4628      	mov	r0, r5
 8007ee2:	f000 f985 	bl	80081f0 <__sinit>
 8007ee6:	4b2e      	ldr	r3, [pc, #184]	; (8007fa0 <__swsetup_r+0xd0>)
 8007ee8:	429c      	cmp	r4, r3
 8007eea:	d10f      	bne.n	8007f0c <__swsetup_r+0x3c>
 8007eec:	686c      	ldr	r4, [r5, #4]
 8007eee:	89a3      	ldrh	r3, [r4, #12]
 8007ef0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ef4:	0719      	lsls	r1, r3, #28
 8007ef6:	d42c      	bmi.n	8007f52 <__swsetup_r+0x82>
 8007ef8:	06dd      	lsls	r5, r3, #27
 8007efa:	d411      	bmi.n	8007f20 <__swsetup_r+0x50>
 8007efc:	2309      	movs	r3, #9
 8007efe:	6033      	str	r3, [r6, #0]
 8007f00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f04:	81a3      	strh	r3, [r4, #12]
 8007f06:	f04f 30ff 	mov.w	r0, #4294967295
 8007f0a:	e03e      	b.n	8007f8a <__swsetup_r+0xba>
 8007f0c:	4b25      	ldr	r3, [pc, #148]	; (8007fa4 <__swsetup_r+0xd4>)
 8007f0e:	429c      	cmp	r4, r3
 8007f10:	d101      	bne.n	8007f16 <__swsetup_r+0x46>
 8007f12:	68ac      	ldr	r4, [r5, #8]
 8007f14:	e7eb      	b.n	8007eee <__swsetup_r+0x1e>
 8007f16:	4b24      	ldr	r3, [pc, #144]	; (8007fa8 <__swsetup_r+0xd8>)
 8007f18:	429c      	cmp	r4, r3
 8007f1a:	bf08      	it	eq
 8007f1c:	68ec      	ldreq	r4, [r5, #12]
 8007f1e:	e7e6      	b.n	8007eee <__swsetup_r+0x1e>
 8007f20:	0758      	lsls	r0, r3, #29
 8007f22:	d512      	bpl.n	8007f4a <__swsetup_r+0x7a>
 8007f24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f26:	b141      	cbz	r1, 8007f3a <__swsetup_r+0x6a>
 8007f28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f2c:	4299      	cmp	r1, r3
 8007f2e:	d002      	beq.n	8007f36 <__swsetup_r+0x66>
 8007f30:	4630      	mov	r0, r6
 8007f32:	f7ff fb65 	bl	8007600 <_free_r>
 8007f36:	2300      	movs	r3, #0
 8007f38:	6363      	str	r3, [r4, #52]	; 0x34
 8007f3a:	89a3      	ldrh	r3, [r4, #12]
 8007f3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f40:	81a3      	strh	r3, [r4, #12]
 8007f42:	2300      	movs	r3, #0
 8007f44:	6063      	str	r3, [r4, #4]
 8007f46:	6923      	ldr	r3, [r4, #16]
 8007f48:	6023      	str	r3, [r4, #0]
 8007f4a:	89a3      	ldrh	r3, [r4, #12]
 8007f4c:	f043 0308 	orr.w	r3, r3, #8
 8007f50:	81a3      	strh	r3, [r4, #12]
 8007f52:	6923      	ldr	r3, [r4, #16]
 8007f54:	b94b      	cbnz	r3, 8007f6a <__swsetup_r+0x9a>
 8007f56:	89a3      	ldrh	r3, [r4, #12]
 8007f58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f60:	d003      	beq.n	8007f6a <__swsetup_r+0x9a>
 8007f62:	4621      	mov	r1, r4
 8007f64:	4630      	mov	r0, r6
 8007f66:	f000 fa07 	bl	8008378 <__smakebuf_r>
 8007f6a:	89a0      	ldrh	r0, [r4, #12]
 8007f6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f70:	f010 0301 	ands.w	r3, r0, #1
 8007f74:	d00a      	beq.n	8007f8c <__swsetup_r+0xbc>
 8007f76:	2300      	movs	r3, #0
 8007f78:	60a3      	str	r3, [r4, #8]
 8007f7a:	6963      	ldr	r3, [r4, #20]
 8007f7c:	425b      	negs	r3, r3
 8007f7e:	61a3      	str	r3, [r4, #24]
 8007f80:	6923      	ldr	r3, [r4, #16]
 8007f82:	b943      	cbnz	r3, 8007f96 <__swsetup_r+0xc6>
 8007f84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f88:	d1ba      	bne.n	8007f00 <__swsetup_r+0x30>
 8007f8a:	bd70      	pop	{r4, r5, r6, pc}
 8007f8c:	0781      	lsls	r1, r0, #30
 8007f8e:	bf58      	it	pl
 8007f90:	6963      	ldrpl	r3, [r4, #20]
 8007f92:	60a3      	str	r3, [r4, #8]
 8007f94:	e7f4      	b.n	8007f80 <__swsetup_r+0xb0>
 8007f96:	2000      	movs	r0, #0
 8007f98:	e7f7      	b.n	8007f8a <__swsetup_r+0xba>
 8007f9a:	bf00      	nop
 8007f9c:	20000020 	.word	0x20000020
 8007fa0:	08008acc 	.word	0x08008acc
 8007fa4:	08008aec 	.word	0x08008aec
 8007fa8:	08008aac 	.word	0x08008aac

08007fac <abort>:
 8007fac:	b508      	push	{r3, lr}
 8007fae:	2006      	movs	r0, #6
 8007fb0:	f000 fa52 	bl	8008458 <raise>
 8007fb4:	2001      	movs	r0, #1
 8007fb6:	f7f9 fddf 	bl	8001b78 <_exit>
	...

08007fbc <__sflush_r>:
 8007fbc:	898a      	ldrh	r2, [r1, #12]
 8007fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fc2:	4605      	mov	r5, r0
 8007fc4:	0710      	lsls	r0, r2, #28
 8007fc6:	460c      	mov	r4, r1
 8007fc8:	d458      	bmi.n	800807c <__sflush_r+0xc0>
 8007fca:	684b      	ldr	r3, [r1, #4]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	dc05      	bgt.n	8007fdc <__sflush_r+0x20>
 8007fd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	dc02      	bgt.n	8007fdc <__sflush_r+0x20>
 8007fd6:	2000      	movs	r0, #0
 8007fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fde:	2e00      	cmp	r6, #0
 8007fe0:	d0f9      	beq.n	8007fd6 <__sflush_r+0x1a>
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007fe8:	682f      	ldr	r7, [r5, #0]
 8007fea:	602b      	str	r3, [r5, #0]
 8007fec:	d032      	beq.n	8008054 <__sflush_r+0x98>
 8007fee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ff0:	89a3      	ldrh	r3, [r4, #12]
 8007ff2:	075a      	lsls	r2, r3, #29
 8007ff4:	d505      	bpl.n	8008002 <__sflush_r+0x46>
 8007ff6:	6863      	ldr	r3, [r4, #4]
 8007ff8:	1ac0      	subs	r0, r0, r3
 8007ffa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ffc:	b10b      	cbz	r3, 8008002 <__sflush_r+0x46>
 8007ffe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008000:	1ac0      	subs	r0, r0, r3
 8008002:	2300      	movs	r3, #0
 8008004:	4602      	mov	r2, r0
 8008006:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008008:	6a21      	ldr	r1, [r4, #32]
 800800a:	4628      	mov	r0, r5
 800800c:	47b0      	blx	r6
 800800e:	1c43      	adds	r3, r0, #1
 8008010:	89a3      	ldrh	r3, [r4, #12]
 8008012:	d106      	bne.n	8008022 <__sflush_r+0x66>
 8008014:	6829      	ldr	r1, [r5, #0]
 8008016:	291d      	cmp	r1, #29
 8008018:	d82c      	bhi.n	8008074 <__sflush_r+0xb8>
 800801a:	4a2a      	ldr	r2, [pc, #168]	; (80080c4 <__sflush_r+0x108>)
 800801c:	40ca      	lsrs	r2, r1
 800801e:	07d6      	lsls	r6, r2, #31
 8008020:	d528      	bpl.n	8008074 <__sflush_r+0xb8>
 8008022:	2200      	movs	r2, #0
 8008024:	6062      	str	r2, [r4, #4]
 8008026:	04d9      	lsls	r1, r3, #19
 8008028:	6922      	ldr	r2, [r4, #16]
 800802a:	6022      	str	r2, [r4, #0]
 800802c:	d504      	bpl.n	8008038 <__sflush_r+0x7c>
 800802e:	1c42      	adds	r2, r0, #1
 8008030:	d101      	bne.n	8008036 <__sflush_r+0x7a>
 8008032:	682b      	ldr	r3, [r5, #0]
 8008034:	b903      	cbnz	r3, 8008038 <__sflush_r+0x7c>
 8008036:	6560      	str	r0, [r4, #84]	; 0x54
 8008038:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800803a:	602f      	str	r7, [r5, #0]
 800803c:	2900      	cmp	r1, #0
 800803e:	d0ca      	beq.n	8007fd6 <__sflush_r+0x1a>
 8008040:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008044:	4299      	cmp	r1, r3
 8008046:	d002      	beq.n	800804e <__sflush_r+0x92>
 8008048:	4628      	mov	r0, r5
 800804a:	f7ff fad9 	bl	8007600 <_free_r>
 800804e:	2000      	movs	r0, #0
 8008050:	6360      	str	r0, [r4, #52]	; 0x34
 8008052:	e7c1      	b.n	8007fd8 <__sflush_r+0x1c>
 8008054:	6a21      	ldr	r1, [r4, #32]
 8008056:	2301      	movs	r3, #1
 8008058:	4628      	mov	r0, r5
 800805a:	47b0      	blx	r6
 800805c:	1c41      	adds	r1, r0, #1
 800805e:	d1c7      	bne.n	8007ff0 <__sflush_r+0x34>
 8008060:	682b      	ldr	r3, [r5, #0]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d0c4      	beq.n	8007ff0 <__sflush_r+0x34>
 8008066:	2b1d      	cmp	r3, #29
 8008068:	d001      	beq.n	800806e <__sflush_r+0xb2>
 800806a:	2b16      	cmp	r3, #22
 800806c:	d101      	bne.n	8008072 <__sflush_r+0xb6>
 800806e:	602f      	str	r7, [r5, #0]
 8008070:	e7b1      	b.n	8007fd6 <__sflush_r+0x1a>
 8008072:	89a3      	ldrh	r3, [r4, #12]
 8008074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008078:	81a3      	strh	r3, [r4, #12]
 800807a:	e7ad      	b.n	8007fd8 <__sflush_r+0x1c>
 800807c:	690f      	ldr	r7, [r1, #16]
 800807e:	2f00      	cmp	r7, #0
 8008080:	d0a9      	beq.n	8007fd6 <__sflush_r+0x1a>
 8008082:	0793      	lsls	r3, r2, #30
 8008084:	680e      	ldr	r6, [r1, #0]
 8008086:	bf08      	it	eq
 8008088:	694b      	ldreq	r3, [r1, #20]
 800808a:	600f      	str	r7, [r1, #0]
 800808c:	bf18      	it	ne
 800808e:	2300      	movne	r3, #0
 8008090:	eba6 0807 	sub.w	r8, r6, r7
 8008094:	608b      	str	r3, [r1, #8]
 8008096:	f1b8 0f00 	cmp.w	r8, #0
 800809a:	dd9c      	ble.n	8007fd6 <__sflush_r+0x1a>
 800809c:	6a21      	ldr	r1, [r4, #32]
 800809e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80080a0:	4643      	mov	r3, r8
 80080a2:	463a      	mov	r2, r7
 80080a4:	4628      	mov	r0, r5
 80080a6:	47b0      	blx	r6
 80080a8:	2800      	cmp	r0, #0
 80080aa:	dc06      	bgt.n	80080ba <__sflush_r+0xfe>
 80080ac:	89a3      	ldrh	r3, [r4, #12]
 80080ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080b2:	81a3      	strh	r3, [r4, #12]
 80080b4:	f04f 30ff 	mov.w	r0, #4294967295
 80080b8:	e78e      	b.n	8007fd8 <__sflush_r+0x1c>
 80080ba:	4407      	add	r7, r0
 80080bc:	eba8 0800 	sub.w	r8, r8, r0
 80080c0:	e7e9      	b.n	8008096 <__sflush_r+0xda>
 80080c2:	bf00      	nop
 80080c4:	20400001 	.word	0x20400001

080080c8 <_fflush_r>:
 80080c8:	b538      	push	{r3, r4, r5, lr}
 80080ca:	690b      	ldr	r3, [r1, #16]
 80080cc:	4605      	mov	r5, r0
 80080ce:	460c      	mov	r4, r1
 80080d0:	b913      	cbnz	r3, 80080d8 <_fflush_r+0x10>
 80080d2:	2500      	movs	r5, #0
 80080d4:	4628      	mov	r0, r5
 80080d6:	bd38      	pop	{r3, r4, r5, pc}
 80080d8:	b118      	cbz	r0, 80080e2 <_fflush_r+0x1a>
 80080da:	6983      	ldr	r3, [r0, #24]
 80080dc:	b90b      	cbnz	r3, 80080e2 <_fflush_r+0x1a>
 80080de:	f000 f887 	bl	80081f0 <__sinit>
 80080e2:	4b14      	ldr	r3, [pc, #80]	; (8008134 <_fflush_r+0x6c>)
 80080e4:	429c      	cmp	r4, r3
 80080e6:	d11b      	bne.n	8008120 <_fflush_r+0x58>
 80080e8:	686c      	ldr	r4, [r5, #4]
 80080ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d0ef      	beq.n	80080d2 <_fflush_r+0xa>
 80080f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80080f4:	07d0      	lsls	r0, r2, #31
 80080f6:	d404      	bmi.n	8008102 <_fflush_r+0x3a>
 80080f8:	0599      	lsls	r1, r3, #22
 80080fa:	d402      	bmi.n	8008102 <_fflush_r+0x3a>
 80080fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080fe:	f000 f915 	bl	800832c <__retarget_lock_acquire_recursive>
 8008102:	4628      	mov	r0, r5
 8008104:	4621      	mov	r1, r4
 8008106:	f7ff ff59 	bl	8007fbc <__sflush_r>
 800810a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800810c:	07da      	lsls	r2, r3, #31
 800810e:	4605      	mov	r5, r0
 8008110:	d4e0      	bmi.n	80080d4 <_fflush_r+0xc>
 8008112:	89a3      	ldrh	r3, [r4, #12]
 8008114:	059b      	lsls	r3, r3, #22
 8008116:	d4dd      	bmi.n	80080d4 <_fflush_r+0xc>
 8008118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800811a:	f000 f908 	bl	800832e <__retarget_lock_release_recursive>
 800811e:	e7d9      	b.n	80080d4 <_fflush_r+0xc>
 8008120:	4b05      	ldr	r3, [pc, #20]	; (8008138 <_fflush_r+0x70>)
 8008122:	429c      	cmp	r4, r3
 8008124:	d101      	bne.n	800812a <_fflush_r+0x62>
 8008126:	68ac      	ldr	r4, [r5, #8]
 8008128:	e7df      	b.n	80080ea <_fflush_r+0x22>
 800812a:	4b04      	ldr	r3, [pc, #16]	; (800813c <_fflush_r+0x74>)
 800812c:	429c      	cmp	r4, r3
 800812e:	bf08      	it	eq
 8008130:	68ec      	ldreq	r4, [r5, #12]
 8008132:	e7da      	b.n	80080ea <_fflush_r+0x22>
 8008134:	08008acc 	.word	0x08008acc
 8008138:	08008aec 	.word	0x08008aec
 800813c:	08008aac 	.word	0x08008aac

08008140 <std>:
 8008140:	2300      	movs	r3, #0
 8008142:	b510      	push	{r4, lr}
 8008144:	4604      	mov	r4, r0
 8008146:	e9c0 3300 	strd	r3, r3, [r0]
 800814a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800814e:	6083      	str	r3, [r0, #8]
 8008150:	8181      	strh	r1, [r0, #12]
 8008152:	6643      	str	r3, [r0, #100]	; 0x64
 8008154:	81c2      	strh	r2, [r0, #14]
 8008156:	6183      	str	r3, [r0, #24]
 8008158:	4619      	mov	r1, r3
 800815a:	2208      	movs	r2, #8
 800815c:	305c      	adds	r0, #92	; 0x5c
 800815e:	f7fb fe23 	bl	8003da8 <memset>
 8008162:	4b05      	ldr	r3, [pc, #20]	; (8008178 <std+0x38>)
 8008164:	6263      	str	r3, [r4, #36]	; 0x24
 8008166:	4b05      	ldr	r3, [pc, #20]	; (800817c <std+0x3c>)
 8008168:	62a3      	str	r3, [r4, #40]	; 0x28
 800816a:	4b05      	ldr	r3, [pc, #20]	; (8008180 <std+0x40>)
 800816c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800816e:	4b05      	ldr	r3, [pc, #20]	; (8008184 <std+0x44>)
 8008170:	6224      	str	r4, [r4, #32]
 8008172:	6323      	str	r3, [r4, #48]	; 0x30
 8008174:	bd10      	pop	{r4, pc}
 8008176:	bf00      	nop
 8008178:	08008491 	.word	0x08008491
 800817c:	080084b3 	.word	0x080084b3
 8008180:	080084eb 	.word	0x080084eb
 8008184:	0800850f 	.word	0x0800850f

08008188 <_cleanup_r>:
 8008188:	4901      	ldr	r1, [pc, #4]	; (8008190 <_cleanup_r+0x8>)
 800818a:	f000 b8af 	b.w	80082ec <_fwalk_reent>
 800818e:	bf00      	nop
 8008190:	080080c9 	.word	0x080080c9

08008194 <__sfmoreglue>:
 8008194:	b570      	push	{r4, r5, r6, lr}
 8008196:	1e4a      	subs	r2, r1, #1
 8008198:	2568      	movs	r5, #104	; 0x68
 800819a:	4355      	muls	r5, r2
 800819c:	460e      	mov	r6, r1
 800819e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80081a2:	f7ff fa7d 	bl	80076a0 <_malloc_r>
 80081a6:	4604      	mov	r4, r0
 80081a8:	b140      	cbz	r0, 80081bc <__sfmoreglue+0x28>
 80081aa:	2100      	movs	r1, #0
 80081ac:	e9c0 1600 	strd	r1, r6, [r0]
 80081b0:	300c      	adds	r0, #12
 80081b2:	60a0      	str	r0, [r4, #8]
 80081b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80081b8:	f7fb fdf6 	bl	8003da8 <memset>
 80081bc:	4620      	mov	r0, r4
 80081be:	bd70      	pop	{r4, r5, r6, pc}

080081c0 <__sfp_lock_acquire>:
 80081c0:	4801      	ldr	r0, [pc, #4]	; (80081c8 <__sfp_lock_acquire+0x8>)
 80081c2:	f000 b8b3 	b.w	800832c <__retarget_lock_acquire_recursive>
 80081c6:	bf00      	nop
 80081c8:	2000030c 	.word	0x2000030c

080081cc <__sfp_lock_release>:
 80081cc:	4801      	ldr	r0, [pc, #4]	; (80081d4 <__sfp_lock_release+0x8>)
 80081ce:	f000 b8ae 	b.w	800832e <__retarget_lock_release_recursive>
 80081d2:	bf00      	nop
 80081d4:	2000030c 	.word	0x2000030c

080081d8 <__sinit_lock_acquire>:
 80081d8:	4801      	ldr	r0, [pc, #4]	; (80081e0 <__sinit_lock_acquire+0x8>)
 80081da:	f000 b8a7 	b.w	800832c <__retarget_lock_acquire_recursive>
 80081de:	bf00      	nop
 80081e0:	20000307 	.word	0x20000307

080081e4 <__sinit_lock_release>:
 80081e4:	4801      	ldr	r0, [pc, #4]	; (80081ec <__sinit_lock_release+0x8>)
 80081e6:	f000 b8a2 	b.w	800832e <__retarget_lock_release_recursive>
 80081ea:	bf00      	nop
 80081ec:	20000307 	.word	0x20000307

080081f0 <__sinit>:
 80081f0:	b510      	push	{r4, lr}
 80081f2:	4604      	mov	r4, r0
 80081f4:	f7ff fff0 	bl	80081d8 <__sinit_lock_acquire>
 80081f8:	69a3      	ldr	r3, [r4, #24]
 80081fa:	b11b      	cbz	r3, 8008204 <__sinit+0x14>
 80081fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008200:	f7ff bff0 	b.w	80081e4 <__sinit_lock_release>
 8008204:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008208:	6523      	str	r3, [r4, #80]	; 0x50
 800820a:	4b13      	ldr	r3, [pc, #76]	; (8008258 <__sinit+0x68>)
 800820c:	4a13      	ldr	r2, [pc, #76]	; (800825c <__sinit+0x6c>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	62a2      	str	r2, [r4, #40]	; 0x28
 8008212:	42a3      	cmp	r3, r4
 8008214:	bf04      	itt	eq
 8008216:	2301      	moveq	r3, #1
 8008218:	61a3      	streq	r3, [r4, #24]
 800821a:	4620      	mov	r0, r4
 800821c:	f000 f820 	bl	8008260 <__sfp>
 8008220:	6060      	str	r0, [r4, #4]
 8008222:	4620      	mov	r0, r4
 8008224:	f000 f81c 	bl	8008260 <__sfp>
 8008228:	60a0      	str	r0, [r4, #8]
 800822a:	4620      	mov	r0, r4
 800822c:	f000 f818 	bl	8008260 <__sfp>
 8008230:	2200      	movs	r2, #0
 8008232:	60e0      	str	r0, [r4, #12]
 8008234:	2104      	movs	r1, #4
 8008236:	6860      	ldr	r0, [r4, #4]
 8008238:	f7ff ff82 	bl	8008140 <std>
 800823c:	68a0      	ldr	r0, [r4, #8]
 800823e:	2201      	movs	r2, #1
 8008240:	2109      	movs	r1, #9
 8008242:	f7ff ff7d 	bl	8008140 <std>
 8008246:	68e0      	ldr	r0, [r4, #12]
 8008248:	2202      	movs	r2, #2
 800824a:	2112      	movs	r1, #18
 800824c:	f7ff ff78 	bl	8008140 <std>
 8008250:	2301      	movs	r3, #1
 8008252:	61a3      	str	r3, [r4, #24]
 8008254:	e7d2      	b.n	80081fc <__sinit+0xc>
 8008256:	bf00      	nop
 8008258:	08008654 	.word	0x08008654
 800825c:	08008189 	.word	0x08008189

08008260 <__sfp>:
 8008260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008262:	4607      	mov	r7, r0
 8008264:	f7ff ffac 	bl	80081c0 <__sfp_lock_acquire>
 8008268:	4b1e      	ldr	r3, [pc, #120]	; (80082e4 <__sfp+0x84>)
 800826a:	681e      	ldr	r6, [r3, #0]
 800826c:	69b3      	ldr	r3, [r6, #24]
 800826e:	b913      	cbnz	r3, 8008276 <__sfp+0x16>
 8008270:	4630      	mov	r0, r6
 8008272:	f7ff ffbd 	bl	80081f0 <__sinit>
 8008276:	3648      	adds	r6, #72	; 0x48
 8008278:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800827c:	3b01      	subs	r3, #1
 800827e:	d503      	bpl.n	8008288 <__sfp+0x28>
 8008280:	6833      	ldr	r3, [r6, #0]
 8008282:	b30b      	cbz	r3, 80082c8 <__sfp+0x68>
 8008284:	6836      	ldr	r6, [r6, #0]
 8008286:	e7f7      	b.n	8008278 <__sfp+0x18>
 8008288:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800828c:	b9d5      	cbnz	r5, 80082c4 <__sfp+0x64>
 800828e:	4b16      	ldr	r3, [pc, #88]	; (80082e8 <__sfp+0x88>)
 8008290:	60e3      	str	r3, [r4, #12]
 8008292:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008296:	6665      	str	r5, [r4, #100]	; 0x64
 8008298:	f000 f847 	bl	800832a <__retarget_lock_init_recursive>
 800829c:	f7ff ff96 	bl	80081cc <__sfp_lock_release>
 80082a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80082a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80082a8:	6025      	str	r5, [r4, #0]
 80082aa:	61a5      	str	r5, [r4, #24]
 80082ac:	2208      	movs	r2, #8
 80082ae:	4629      	mov	r1, r5
 80082b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80082b4:	f7fb fd78 	bl	8003da8 <memset>
 80082b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80082bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80082c0:	4620      	mov	r0, r4
 80082c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082c4:	3468      	adds	r4, #104	; 0x68
 80082c6:	e7d9      	b.n	800827c <__sfp+0x1c>
 80082c8:	2104      	movs	r1, #4
 80082ca:	4638      	mov	r0, r7
 80082cc:	f7ff ff62 	bl	8008194 <__sfmoreglue>
 80082d0:	4604      	mov	r4, r0
 80082d2:	6030      	str	r0, [r6, #0]
 80082d4:	2800      	cmp	r0, #0
 80082d6:	d1d5      	bne.n	8008284 <__sfp+0x24>
 80082d8:	f7ff ff78 	bl	80081cc <__sfp_lock_release>
 80082dc:	230c      	movs	r3, #12
 80082de:	603b      	str	r3, [r7, #0]
 80082e0:	e7ee      	b.n	80082c0 <__sfp+0x60>
 80082e2:	bf00      	nop
 80082e4:	08008654 	.word	0x08008654
 80082e8:	ffff0001 	.word	0xffff0001

080082ec <_fwalk_reent>:
 80082ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082f0:	4606      	mov	r6, r0
 80082f2:	4688      	mov	r8, r1
 80082f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80082f8:	2700      	movs	r7, #0
 80082fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082fe:	f1b9 0901 	subs.w	r9, r9, #1
 8008302:	d505      	bpl.n	8008310 <_fwalk_reent+0x24>
 8008304:	6824      	ldr	r4, [r4, #0]
 8008306:	2c00      	cmp	r4, #0
 8008308:	d1f7      	bne.n	80082fa <_fwalk_reent+0xe>
 800830a:	4638      	mov	r0, r7
 800830c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008310:	89ab      	ldrh	r3, [r5, #12]
 8008312:	2b01      	cmp	r3, #1
 8008314:	d907      	bls.n	8008326 <_fwalk_reent+0x3a>
 8008316:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800831a:	3301      	adds	r3, #1
 800831c:	d003      	beq.n	8008326 <_fwalk_reent+0x3a>
 800831e:	4629      	mov	r1, r5
 8008320:	4630      	mov	r0, r6
 8008322:	47c0      	blx	r8
 8008324:	4307      	orrs	r7, r0
 8008326:	3568      	adds	r5, #104	; 0x68
 8008328:	e7e9      	b.n	80082fe <_fwalk_reent+0x12>

0800832a <__retarget_lock_init_recursive>:
 800832a:	4770      	bx	lr

0800832c <__retarget_lock_acquire_recursive>:
 800832c:	4770      	bx	lr

0800832e <__retarget_lock_release_recursive>:
 800832e:	4770      	bx	lr

08008330 <__swhatbuf_r>:
 8008330:	b570      	push	{r4, r5, r6, lr}
 8008332:	460e      	mov	r6, r1
 8008334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008338:	2900      	cmp	r1, #0
 800833a:	b096      	sub	sp, #88	; 0x58
 800833c:	4614      	mov	r4, r2
 800833e:	461d      	mov	r5, r3
 8008340:	da07      	bge.n	8008352 <__swhatbuf_r+0x22>
 8008342:	2300      	movs	r3, #0
 8008344:	602b      	str	r3, [r5, #0]
 8008346:	89b3      	ldrh	r3, [r6, #12]
 8008348:	061a      	lsls	r2, r3, #24
 800834a:	d410      	bmi.n	800836e <__swhatbuf_r+0x3e>
 800834c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008350:	e00e      	b.n	8008370 <__swhatbuf_r+0x40>
 8008352:	466a      	mov	r2, sp
 8008354:	f000 f902 	bl	800855c <_fstat_r>
 8008358:	2800      	cmp	r0, #0
 800835a:	dbf2      	blt.n	8008342 <__swhatbuf_r+0x12>
 800835c:	9a01      	ldr	r2, [sp, #4]
 800835e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008362:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008366:	425a      	negs	r2, r3
 8008368:	415a      	adcs	r2, r3
 800836a:	602a      	str	r2, [r5, #0]
 800836c:	e7ee      	b.n	800834c <__swhatbuf_r+0x1c>
 800836e:	2340      	movs	r3, #64	; 0x40
 8008370:	2000      	movs	r0, #0
 8008372:	6023      	str	r3, [r4, #0]
 8008374:	b016      	add	sp, #88	; 0x58
 8008376:	bd70      	pop	{r4, r5, r6, pc}

08008378 <__smakebuf_r>:
 8008378:	898b      	ldrh	r3, [r1, #12]
 800837a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800837c:	079d      	lsls	r5, r3, #30
 800837e:	4606      	mov	r6, r0
 8008380:	460c      	mov	r4, r1
 8008382:	d507      	bpl.n	8008394 <__smakebuf_r+0x1c>
 8008384:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008388:	6023      	str	r3, [r4, #0]
 800838a:	6123      	str	r3, [r4, #16]
 800838c:	2301      	movs	r3, #1
 800838e:	6163      	str	r3, [r4, #20]
 8008390:	b002      	add	sp, #8
 8008392:	bd70      	pop	{r4, r5, r6, pc}
 8008394:	ab01      	add	r3, sp, #4
 8008396:	466a      	mov	r2, sp
 8008398:	f7ff ffca 	bl	8008330 <__swhatbuf_r>
 800839c:	9900      	ldr	r1, [sp, #0]
 800839e:	4605      	mov	r5, r0
 80083a0:	4630      	mov	r0, r6
 80083a2:	f7ff f97d 	bl	80076a0 <_malloc_r>
 80083a6:	b948      	cbnz	r0, 80083bc <__smakebuf_r+0x44>
 80083a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083ac:	059a      	lsls	r2, r3, #22
 80083ae:	d4ef      	bmi.n	8008390 <__smakebuf_r+0x18>
 80083b0:	f023 0303 	bic.w	r3, r3, #3
 80083b4:	f043 0302 	orr.w	r3, r3, #2
 80083b8:	81a3      	strh	r3, [r4, #12]
 80083ba:	e7e3      	b.n	8008384 <__smakebuf_r+0xc>
 80083bc:	4b0d      	ldr	r3, [pc, #52]	; (80083f4 <__smakebuf_r+0x7c>)
 80083be:	62b3      	str	r3, [r6, #40]	; 0x28
 80083c0:	89a3      	ldrh	r3, [r4, #12]
 80083c2:	6020      	str	r0, [r4, #0]
 80083c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083c8:	81a3      	strh	r3, [r4, #12]
 80083ca:	9b00      	ldr	r3, [sp, #0]
 80083cc:	6163      	str	r3, [r4, #20]
 80083ce:	9b01      	ldr	r3, [sp, #4]
 80083d0:	6120      	str	r0, [r4, #16]
 80083d2:	b15b      	cbz	r3, 80083ec <__smakebuf_r+0x74>
 80083d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083d8:	4630      	mov	r0, r6
 80083da:	f000 f8d1 	bl	8008580 <_isatty_r>
 80083de:	b128      	cbz	r0, 80083ec <__smakebuf_r+0x74>
 80083e0:	89a3      	ldrh	r3, [r4, #12]
 80083e2:	f023 0303 	bic.w	r3, r3, #3
 80083e6:	f043 0301 	orr.w	r3, r3, #1
 80083ea:	81a3      	strh	r3, [r4, #12]
 80083ec:	89a0      	ldrh	r0, [r4, #12]
 80083ee:	4305      	orrs	r5, r0
 80083f0:	81a5      	strh	r5, [r4, #12]
 80083f2:	e7cd      	b.n	8008390 <__smakebuf_r+0x18>
 80083f4:	08008189 	.word	0x08008189

080083f8 <_malloc_usable_size_r>:
 80083f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083fc:	1f18      	subs	r0, r3, #4
 80083fe:	2b00      	cmp	r3, #0
 8008400:	bfbc      	itt	lt
 8008402:	580b      	ldrlt	r3, [r1, r0]
 8008404:	18c0      	addlt	r0, r0, r3
 8008406:	4770      	bx	lr

08008408 <_raise_r>:
 8008408:	291f      	cmp	r1, #31
 800840a:	b538      	push	{r3, r4, r5, lr}
 800840c:	4604      	mov	r4, r0
 800840e:	460d      	mov	r5, r1
 8008410:	d904      	bls.n	800841c <_raise_r+0x14>
 8008412:	2316      	movs	r3, #22
 8008414:	6003      	str	r3, [r0, #0]
 8008416:	f04f 30ff 	mov.w	r0, #4294967295
 800841a:	bd38      	pop	{r3, r4, r5, pc}
 800841c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800841e:	b112      	cbz	r2, 8008426 <_raise_r+0x1e>
 8008420:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008424:	b94b      	cbnz	r3, 800843a <_raise_r+0x32>
 8008426:	4620      	mov	r0, r4
 8008428:	f000 f830 	bl	800848c <_getpid_r>
 800842c:	462a      	mov	r2, r5
 800842e:	4601      	mov	r1, r0
 8008430:	4620      	mov	r0, r4
 8008432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008436:	f000 b817 	b.w	8008468 <_kill_r>
 800843a:	2b01      	cmp	r3, #1
 800843c:	d00a      	beq.n	8008454 <_raise_r+0x4c>
 800843e:	1c59      	adds	r1, r3, #1
 8008440:	d103      	bne.n	800844a <_raise_r+0x42>
 8008442:	2316      	movs	r3, #22
 8008444:	6003      	str	r3, [r0, #0]
 8008446:	2001      	movs	r0, #1
 8008448:	e7e7      	b.n	800841a <_raise_r+0x12>
 800844a:	2400      	movs	r4, #0
 800844c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008450:	4628      	mov	r0, r5
 8008452:	4798      	blx	r3
 8008454:	2000      	movs	r0, #0
 8008456:	e7e0      	b.n	800841a <_raise_r+0x12>

08008458 <raise>:
 8008458:	4b02      	ldr	r3, [pc, #8]	; (8008464 <raise+0xc>)
 800845a:	4601      	mov	r1, r0
 800845c:	6818      	ldr	r0, [r3, #0]
 800845e:	f7ff bfd3 	b.w	8008408 <_raise_r>
 8008462:	bf00      	nop
 8008464:	20000020 	.word	0x20000020

08008468 <_kill_r>:
 8008468:	b538      	push	{r3, r4, r5, lr}
 800846a:	4d07      	ldr	r5, [pc, #28]	; (8008488 <_kill_r+0x20>)
 800846c:	2300      	movs	r3, #0
 800846e:	4604      	mov	r4, r0
 8008470:	4608      	mov	r0, r1
 8008472:	4611      	mov	r1, r2
 8008474:	602b      	str	r3, [r5, #0]
 8008476:	f7f9 fb6f 	bl	8001b58 <_kill>
 800847a:	1c43      	adds	r3, r0, #1
 800847c:	d102      	bne.n	8008484 <_kill_r+0x1c>
 800847e:	682b      	ldr	r3, [r5, #0]
 8008480:	b103      	cbz	r3, 8008484 <_kill_r+0x1c>
 8008482:	6023      	str	r3, [r4, #0]
 8008484:	bd38      	pop	{r3, r4, r5, pc}
 8008486:	bf00      	nop
 8008488:	20000300 	.word	0x20000300

0800848c <_getpid_r>:
 800848c:	f7f9 bb5c 	b.w	8001b48 <_getpid>

08008490 <__sread>:
 8008490:	b510      	push	{r4, lr}
 8008492:	460c      	mov	r4, r1
 8008494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008498:	f000 f894 	bl	80085c4 <_read_r>
 800849c:	2800      	cmp	r0, #0
 800849e:	bfab      	itete	ge
 80084a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80084a2:	89a3      	ldrhlt	r3, [r4, #12]
 80084a4:	181b      	addge	r3, r3, r0
 80084a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80084aa:	bfac      	ite	ge
 80084ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80084ae:	81a3      	strhlt	r3, [r4, #12]
 80084b0:	bd10      	pop	{r4, pc}

080084b2 <__swrite>:
 80084b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084b6:	461f      	mov	r7, r3
 80084b8:	898b      	ldrh	r3, [r1, #12]
 80084ba:	05db      	lsls	r3, r3, #23
 80084bc:	4605      	mov	r5, r0
 80084be:	460c      	mov	r4, r1
 80084c0:	4616      	mov	r6, r2
 80084c2:	d505      	bpl.n	80084d0 <__swrite+0x1e>
 80084c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084c8:	2302      	movs	r3, #2
 80084ca:	2200      	movs	r2, #0
 80084cc:	f000 f868 	bl	80085a0 <_lseek_r>
 80084d0:	89a3      	ldrh	r3, [r4, #12]
 80084d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084da:	81a3      	strh	r3, [r4, #12]
 80084dc:	4632      	mov	r2, r6
 80084de:	463b      	mov	r3, r7
 80084e0:	4628      	mov	r0, r5
 80084e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084e6:	f000 b817 	b.w	8008518 <_write_r>

080084ea <__sseek>:
 80084ea:	b510      	push	{r4, lr}
 80084ec:	460c      	mov	r4, r1
 80084ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084f2:	f000 f855 	bl	80085a0 <_lseek_r>
 80084f6:	1c43      	adds	r3, r0, #1
 80084f8:	89a3      	ldrh	r3, [r4, #12]
 80084fa:	bf15      	itete	ne
 80084fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80084fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008502:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008506:	81a3      	strheq	r3, [r4, #12]
 8008508:	bf18      	it	ne
 800850a:	81a3      	strhne	r3, [r4, #12]
 800850c:	bd10      	pop	{r4, pc}

0800850e <__sclose>:
 800850e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008512:	f000 b813 	b.w	800853c <_close_r>
	...

08008518 <_write_r>:
 8008518:	b538      	push	{r3, r4, r5, lr}
 800851a:	4d07      	ldr	r5, [pc, #28]	; (8008538 <_write_r+0x20>)
 800851c:	4604      	mov	r4, r0
 800851e:	4608      	mov	r0, r1
 8008520:	4611      	mov	r1, r2
 8008522:	2200      	movs	r2, #0
 8008524:	602a      	str	r2, [r5, #0]
 8008526:	461a      	mov	r2, r3
 8008528:	f7f9 fb4d 	bl	8001bc6 <_write>
 800852c:	1c43      	adds	r3, r0, #1
 800852e:	d102      	bne.n	8008536 <_write_r+0x1e>
 8008530:	682b      	ldr	r3, [r5, #0]
 8008532:	b103      	cbz	r3, 8008536 <_write_r+0x1e>
 8008534:	6023      	str	r3, [r4, #0]
 8008536:	bd38      	pop	{r3, r4, r5, pc}
 8008538:	20000300 	.word	0x20000300

0800853c <_close_r>:
 800853c:	b538      	push	{r3, r4, r5, lr}
 800853e:	4d06      	ldr	r5, [pc, #24]	; (8008558 <_close_r+0x1c>)
 8008540:	2300      	movs	r3, #0
 8008542:	4604      	mov	r4, r0
 8008544:	4608      	mov	r0, r1
 8008546:	602b      	str	r3, [r5, #0]
 8008548:	f7f9 fb59 	bl	8001bfe <_close>
 800854c:	1c43      	adds	r3, r0, #1
 800854e:	d102      	bne.n	8008556 <_close_r+0x1a>
 8008550:	682b      	ldr	r3, [r5, #0]
 8008552:	b103      	cbz	r3, 8008556 <_close_r+0x1a>
 8008554:	6023      	str	r3, [r4, #0]
 8008556:	bd38      	pop	{r3, r4, r5, pc}
 8008558:	20000300 	.word	0x20000300

0800855c <_fstat_r>:
 800855c:	b538      	push	{r3, r4, r5, lr}
 800855e:	4d07      	ldr	r5, [pc, #28]	; (800857c <_fstat_r+0x20>)
 8008560:	2300      	movs	r3, #0
 8008562:	4604      	mov	r4, r0
 8008564:	4608      	mov	r0, r1
 8008566:	4611      	mov	r1, r2
 8008568:	602b      	str	r3, [r5, #0]
 800856a:	f7f9 fb54 	bl	8001c16 <_fstat>
 800856e:	1c43      	adds	r3, r0, #1
 8008570:	d102      	bne.n	8008578 <_fstat_r+0x1c>
 8008572:	682b      	ldr	r3, [r5, #0]
 8008574:	b103      	cbz	r3, 8008578 <_fstat_r+0x1c>
 8008576:	6023      	str	r3, [r4, #0]
 8008578:	bd38      	pop	{r3, r4, r5, pc}
 800857a:	bf00      	nop
 800857c:	20000300 	.word	0x20000300

08008580 <_isatty_r>:
 8008580:	b538      	push	{r3, r4, r5, lr}
 8008582:	4d06      	ldr	r5, [pc, #24]	; (800859c <_isatty_r+0x1c>)
 8008584:	2300      	movs	r3, #0
 8008586:	4604      	mov	r4, r0
 8008588:	4608      	mov	r0, r1
 800858a:	602b      	str	r3, [r5, #0]
 800858c:	f7f9 fb53 	bl	8001c36 <_isatty>
 8008590:	1c43      	adds	r3, r0, #1
 8008592:	d102      	bne.n	800859a <_isatty_r+0x1a>
 8008594:	682b      	ldr	r3, [r5, #0]
 8008596:	b103      	cbz	r3, 800859a <_isatty_r+0x1a>
 8008598:	6023      	str	r3, [r4, #0]
 800859a:	bd38      	pop	{r3, r4, r5, pc}
 800859c:	20000300 	.word	0x20000300

080085a0 <_lseek_r>:
 80085a0:	b538      	push	{r3, r4, r5, lr}
 80085a2:	4d07      	ldr	r5, [pc, #28]	; (80085c0 <_lseek_r+0x20>)
 80085a4:	4604      	mov	r4, r0
 80085a6:	4608      	mov	r0, r1
 80085a8:	4611      	mov	r1, r2
 80085aa:	2200      	movs	r2, #0
 80085ac:	602a      	str	r2, [r5, #0]
 80085ae:	461a      	mov	r2, r3
 80085b0:	f7f9 fb4c 	bl	8001c4c <_lseek>
 80085b4:	1c43      	adds	r3, r0, #1
 80085b6:	d102      	bne.n	80085be <_lseek_r+0x1e>
 80085b8:	682b      	ldr	r3, [r5, #0]
 80085ba:	b103      	cbz	r3, 80085be <_lseek_r+0x1e>
 80085bc:	6023      	str	r3, [r4, #0]
 80085be:	bd38      	pop	{r3, r4, r5, pc}
 80085c0:	20000300 	.word	0x20000300

080085c4 <_read_r>:
 80085c4:	b538      	push	{r3, r4, r5, lr}
 80085c6:	4d07      	ldr	r5, [pc, #28]	; (80085e4 <_read_r+0x20>)
 80085c8:	4604      	mov	r4, r0
 80085ca:	4608      	mov	r0, r1
 80085cc:	4611      	mov	r1, r2
 80085ce:	2200      	movs	r2, #0
 80085d0:	602a      	str	r2, [r5, #0]
 80085d2:	461a      	mov	r2, r3
 80085d4:	f7f9 fada 	bl	8001b8c <_read>
 80085d8:	1c43      	adds	r3, r0, #1
 80085da:	d102      	bne.n	80085e2 <_read_r+0x1e>
 80085dc:	682b      	ldr	r3, [r5, #0]
 80085de:	b103      	cbz	r3, 80085e2 <_read_r+0x1e>
 80085e0:	6023      	str	r3, [r4, #0]
 80085e2:	bd38      	pop	{r3, r4, r5, pc}
 80085e4:	20000300 	.word	0x20000300

080085e8 <_init>:
 80085e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ea:	bf00      	nop
 80085ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ee:	bc08      	pop	{r3}
 80085f0:	469e      	mov	lr, r3
 80085f2:	4770      	bx	lr

080085f4 <_fini>:
 80085f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f6:	bf00      	nop
 80085f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085fa:	bc08      	pop	{r3}
 80085fc:	469e      	mov	lr, r3
 80085fe:	4770      	bx	lr
